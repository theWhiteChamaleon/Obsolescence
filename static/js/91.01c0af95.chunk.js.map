{"version":3,"file":"static/js/91.01c0af95.chunk.js","mappings":"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","sources":["components/DragAndDrop/DragAndDrop.jsx","components/Popup/Popup.jsx","pages/ObsolescenceWidget/ObsolescencedataHelper.js","hooks/useObsolescenceWidget.js","hooks/useObsolescenceDropableArea.js","pages/ObsolescenceWidget/MassUpdateDropdown.jsx","pages/ObsolescenceWidget/ObsolescenceWidgetToolbarNativeCta.jsx","pages/ObsolescenceWidget/ObsolescenceWidget.jsx","pages/ObsolescenceWidget/WidgetLifecycle.jsx","pages/ObsolescenceWidget/ObsolescenceIndex.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\n// export const getTableData = (tableData, type, CAData) => {\r\n//   console.log(\"cadata datahelpers\",CAData );\r\n  \r\n//   if (!tableData) return [];\r\n\r\n//   return tableData.map((data) => {\r\n//     if (type === \"Change Action\") {\r\n//       return {\r\n//         ItemName: data?.ItemTitle || \"N/A\",\r\n//         Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n//         ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n//       };\r\n//     } else {\r\n//       console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n//       return {\r\n//         Plant: data?.title || \"N/A\",\r\n//         Seq: data?.Seq || \"1\",\r\n//         Status: data?.PlantStatus || \"Pending\",\r\n//         \"MFG Change\": data?.MFGChange || \"N/A\",\r\n//         \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n//         Change: data?.Change || CAData.CAName ||\"N/A\",\r\n//         \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n//         \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n//         \"ERP Status\": \"Active\" || \"N/A\",\r\n//         \"ERP Export\": \"Yes\" || \"N/A\",\r\n//         \"Lead Plant\": false,\r\n//         MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n//         \"Sort Value\": \"\",\r\n//       };\r\n//     }\r\n//   });\r\n// };\r\n\r\nexport const getTableData = (tableData, type) => {\r\n  if (!tableData) return [];\r\n\r\n  const revisionMap = {};\r\n  \r\n  // Extracting Revision and State from instance response\r\n  // if (instanceResponse?.member?.length) {\r\n  //   instanceResponse.member.forEach((item) => {\r\n  //     const instance = item?.[\"dseng:EngInstance\"]?.member?.[0];\r\n  //     const parentId = instance?.parentObject?.identifier;\r\n  //     const name = instance?.name || \"\";\r\n\r\n  //     // Extract revision as the part after the last dot (e.g., \".1\")\r\n  //     const revision = name.split(\".\").pop();\r\n  //     revisionMap[parentId] = {\r\n  //       revision,\r\n  //       state: \"N/A\", // Add logic here if you have a way to extract 'state'\r\n  //     };\r\n  //   });\r\n  // }\r\n\r\n  return tableData.map((data) => {\r\n    const parentId = data?.ItemId || data?.id;\r\n    const revisionData = revisionMap[parentId] || { revision: \"N/A\", state: \"N/A\" };\r\n\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        \"Parent Item Name\": data.title || \"N/A\",\r\n        Plant: data?.ItemPlants || \"N/A\",\r\n        \"Parent Item Revision\": data.revision,\r\n        \"Parent Item State\": data.state,\r\n      };\r\n    } else {\r\n      return {\r\n        \"Parent Item Name\": data.title,\r\n        Plant: data?.title || \"N/A\",\r\n        \"Parent Item Revision\": data.revision,\r\n        \"Parent Item State\": data.state,\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  // return [\r\n  //   { accessorKey: \"Plant\", header: \"Plant\"},\r\n  //   { accessorKey: \"Seq\", header: \"Seq\" },\r\n  //   { accessorKey: \"Status\", header: \"Status\" },\r\n  //   { accessorKey: \"Change\", header: \"Change\" },\r\n  //   { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n  //   { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n  //   { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n  //   { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n  //   {\r\n  //     accessorKey: \"MBom\",\r\n  //     header: \"MBom\",\r\n      \r\n  //   },\r\n  //   { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n  //   { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n  //   { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n  //   { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  // ];\r\n\r\n  return [\r\n    \r\n    { accessorKey: \"Parent Item Name\", header: \"Parent Item Name\"},\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Parent Item Revision\", header: \"Parent Item Revision\" },\r\n    { accessorKey: \"Parent Item State\", header: \"Parent Item State\" },\r\n  ];\r\n  \r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport async function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nexport async function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/7D56FB4BAE741300682C5271000001CF?mask=dsmveng%3AEngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nexport async function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nexport async function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}","import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setObselenceObjectData,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\nimport {\r\n  getAssignedClasses,\r\n  getItemDetails,\r\n  getLatestRevision,\r\n  getScopedItms,\r\n} from \"../pages/plantAssignment/dataHelpers\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\n\r\nconst useObsolescenceWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useObsolescenceWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  // const {droppedObjectData}= useSelector ((state)=> state.droppedObjectData)\r\n  // console.log(\"SSSSSSSSSSSSSSSs\", droppedObjectData)\r\n\r\n  const handleObsolescenceWidget = async (collabSpace,objectId, type, relativePath) => {\r\n    if (!collabSpace || !objectId || !type || !relativePath) {\r\n      console.error(\"[handleObsolescenceWidget] ❌ Missing required argument(s):\", {\r\n        collabSpace,\r\n        objectId,\r\n        type,\r\n        relativePath,\r\n      });\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      console.log(\"Relative path is:\", relativePath);\r\n\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      console.log(\"headerssss\", headers);\r\n\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useObsolescenceWidget] CSRF Headers:\", headers);\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n      let body = {\r\n        referencedObjects: [\r\n          {\r\n            source: ENOVIA_BASE_URL,\r\n            type: type,\r\n            identifier: objectId,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"POST\",\r\n        baseURL,\r\n        body,\r\n        headers\r\n      );\r\n\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n      if (ChildObject.status && ChildObject.output) {\r\n        let member =\r\n          ChildObject?.output?.member[0][\"dseng:EngInstance\"]?.member;\r\n        if (member?.length > 0) {\r\n          let url = [];\r\n          member &&\r\n            member.map((items) => {\r\n              url.push(\r\n                items.parentObject?.source + items.parentObject?.relativePath\r\n              );\r\n            });\r\n          console.log(\"URL\", url);\r\n          let revisionStateData = [];\r\n          if (url) {\r\n            const promises = url.map(async (apiPath) => {\r\n              const revisionState = await callEnoviaWebService(\r\n                \"GET\",\r\n                apiPath,\r\n                \"\",\r\n                headers\r\n              );\r\n              if (revisionState) {\r\n                revisionStateData = [\r\n                  ...revisionStateData,\r\n                  ...revisionState?.output?.member,\r\n                ];\r\n              }\r\n            });\r\n            await Promise.all(promises);\r\n          }\r\n          console.log(\"revisionStateData\", revisionStateData);\r\n          dispatch(\r\n            setObselenceObjectData({ parentObjectData: revisionStateData })\r\n          );\r\n        } else {\r\n          console.log(\"Not working\");\r\n        }\r\n        // Handle \"Change Action\" type separately\r\n        // if (type === \"Change Action\") {\r\n        //   let isMFGCA = false;\r\n        //   console.log(\"The object Type is Change Action\");\r\n        //   const fetchChangeActionData = async () => {\r\n        //     const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n        //     const response = await callEnoviaWebService(\r\n        //       \"GET\",\r\n        //       CAURL,\r\n        //       \"\",\r\n        //       headers\r\n        //     );\r\n        //     console.log(\"Response from Change Action URL:\", response);\r\n\r\n        //     if (response.status && response.output) {\r\n        //       const realizedChanges = response.output.realizedChanges.map(\r\n        //         (realizedChange) => realizedChange.where.identifier\r\n        //       );\r\n        //       const changeProcessingPromises =\r\n        //         response.output.proposedChanges.map(async (change) => {\r\n        //           let ItemId = change.where.identifier;\r\n        //           let ItemType = change.where.type;\r\n\r\n        //           if (change.target === \"NewVersion\") {\r\n        //             const sLatestID = await getLatestRevision(\r\n        //               ItemId,\r\n        //               ItemType,\r\n        //               headers\r\n        //             );\r\n        //             if (realizedChanges.includes(sLatestID)) {\r\n        //               ItemId = sLatestID;\r\n        //             }\r\n        //           }\r\n        //           if (\r\n        //             ItemType !== \"Raw_Material\" &&\r\n        //             ItemType !== \"VPMReference\"\r\n        //           ) {\r\n        //             isMFGCA = true;\r\n        //             const mfgDetails = await getScopedItms(ItemId, headers);\r\n        //             console.log(\"MFG Details are:\", mfgDetails);\r\n        //             ItemId = mfgDetails.identifier;\r\n        //             ItemType = mfgDetails.type;\r\n        //           }\r\n        //           if (ItemId !== undefined && ItemType !== undefined) {\r\n        //             try {\r\n        //               const [ItemPlants, Iteminfo] = await Promise.all([\r\n        //                 getAssignedClasses(ItemId, headers),\r\n        //                 getItemDetails(ItemId, ItemType, headers),\r\n        //               ]);\r\n\r\n        //               ItemDetails.push({\r\n        //                 ItemId,\r\n        //                 ItemType,\r\n        //                 ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n        //                 ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n        //                 ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n        //                 ItemPlants,\r\n        //               });\r\n        //             } catch (err) {\r\n        //               console.error(\r\n        //                 `Error processing change for item ${ItemId}:`,\r\n        //                 err\r\n        //               );\r\n        //             }\r\n        //           }\r\n        //         });\r\n\r\n        //       await Promise.all(changeProcessingPromises);\r\n        //     } else {\r\n        //       console.error(\"Invalid response structure or no proposed changes.\");\r\n        //     }\r\n        //   };\r\n        //   const CAAllPlantsData = async () => {\r\n        //     // Replace this with your actual API call\r\n        //     const allPlants = await getAllPlants(\r\n        //       [collabSpace],\r\n        //       headers,\r\n        //       objectId\r\n        //     ); // getAllPlants wants collabspace as an array.\r\n        //     console.log(\"Parallel API response:\", allPlants);\r\n        //     dispatch(setCAAllPlants(allPlants));\r\n        //   };\r\n\r\n        //   // Run both functions in parallel\r\n        //   await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n        //   dispatch(setParentDetailsLoading(false));\r\n        //   dispatch(setCAItemDetails(ItemDetails));\r\n        //   dispatch(setIsMFGCA(isMFGCA));\r\n        //   dispatch(setCAHeaders(headers));\r\n        // } else {\r\n\r\n        //   // Step 1: Fetch user group collaboration spaces\r\n        //   const userGroupCollab = await getUserGroupCollab(\r\n        //     headers,\r\n        //     objectId,\r\n        //     email\r\n        //   );\r\n        //   console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        //   let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        //   console.log(\r\n        //     \"[Use Plant Assignment] All CollabSpaces:\",\r\n        //     allCollabSpaces\r\n        //   );\r\n\r\n        //   // Step 2: Fetch all plants if collab spaces exist\r\n        //   let allPlants = [];\r\n        //   if (allCollabSpaces.length > 0) {\r\n        //     allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n        //     console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        //   } else {\r\n        //     console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        //   }\r\n\r\n        // }\r\n        if (type === \"Change Action\") {\r\n          let isMFGCA = false;\r\n          let ItemDetails = []; \r\n          console.log(\"The object Type is Change Action\");\r\n          const fetchChangeActionData = async () => {\r\n            const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n            const response = await callEnoviaWebService(\r\n              \"GET\",\r\n              CAURL,\r\n              \"\",\r\n              headers\r\n            );\r\n            console.log(\"Response from Change Action URL:\", response);\r\n\r\n            if (response.status && response.output) {\r\n              const realizedChanges = response.output.realizedChanges.map(\r\n                (realizedChange) => realizedChange.where.identifier\r\n              );\r\n              const changeProcessingPromises =\r\n                response.output.proposedChanges.map(async (change) => {\r\n                  let ItemId = change.where.identifier;\r\n                  let ItemType = change.where.type;\r\n\r\n                  if (change.target === \"NewVersion\") {\r\n                    const sLatestID = await getLatestRevision(\r\n                      ItemId,\r\n                      ItemType,\r\n                      headers\r\n                    );\r\n                    if (realizedChanges.includes(sLatestID)) {\r\n                      ItemId = sLatestID;\r\n                    }\r\n                  }\r\n                  if (\r\n                    ItemType !== \"Raw_Material\" &&\r\n                    ItemType !== \"VPMReference\"\r\n                  ) {\r\n                    isMFGCA = true;\r\n                    const mfgDetails = await getScopedItms(ItemId, headers);\r\n                    console.log(\"MFG Details are:\", mfgDetails);\r\n                    ItemId = mfgDetails.identifier;\r\n                    ItemType = mfgDetails.type;\r\n                  }\r\n                  if (ItemId !== undefined && ItemType !== undefined) {\r\n                    try {\r\n                      const [ItemPlants, Iteminfo] = await Promise.all([\r\n                        getAssignedClasses(ItemId, headers),\r\n                        getItemDetails(ItemId, ItemType, headers),\r\n                      ]);\r\n\r\n                      ItemDetails.push({\r\n                        ItemId,\r\n                        ItemType,\r\n                        ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                        ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                        ItemMBOM:\r\n                          Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]\r\n                            ?.EMR_hasMBOM || \"N/A\",\r\n                        ItemPlants,\r\n                      });\r\n                    } catch (err) {\r\n                      console.error(\r\n                        `Error processing change for item ${ItemId}:`,\r\n                        err\r\n                      );\r\n                    }\r\n                  }\r\n                });\r\n\r\n              await Promise.all(changeProcessingPromises);\r\n            } else {\r\n              console.error(\r\n                \"Invalid response structure or no proposed changes.\"\r\n              );\r\n            }\r\n          };\r\n          const CAAllPlantsData = async () => {\r\n            // Replace this with your actual API call\r\n            const allPlants = await getAllPlants(\r\n              [collabSpace],\r\n              headers,\r\n              objectId\r\n            ); // getAllPlants wants collabspace as an array.\r\n            console.log(\"Parallel API response:\", allPlants);\r\n            dispatch(setCAAllPlants(allPlants));\r\n          };\r\n\r\n          // Run both functions in parallel\r\n          await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n          dispatch(setParentDetailsLoading(false));\r\n          dispatch(setCAItemDetails(ItemDetails));\r\n          dispatch(setIsMFGCA(isMFGCA));\r\n          dispatch(setCAHeaders(headers));\r\n        } else {\r\n          // Step 1: Fetch user group collaboration spaces\r\n          const userGroupCollab = await getUserGroupCollab(\r\n            headers,\r\n            objectId,\r\n            email\r\n          );\r\n          console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n          let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n          console.log(\r\n            \"[Use Plant Assignment] All CollabSpaces:\",\r\n            allCollabSpaces\r\n          );\r\n\r\n          // Step 2: Fetch all plants if collab spaces exist\r\n          let allPlants = [];\r\n          if (allCollabSpaces.length > 0) {\r\n            allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n            console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n          } else {\r\n            console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n          }\r\n\r\n          // Step 3: Fetch assigned plants if there are any\r\n          if (allPlants.length > 0) {\r\n            const plants = await fetchAssignedPlants(\r\n              allPlants,\r\n              headers,\r\n              objectId\r\n            );\r\n            console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n            if (plants.success) {\r\n              dispatch(setPlantObjectData(plants.data.plantData));\r\n              dispatch(setHeaders(headers));\r\n            } else {\r\n              console.error(\"Failed to fetch plant data.\");\r\n            }\r\n          } else {\r\n            console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n          }\r\n\r\n          // Step 4: Fetch Product Children based on type\r\n          let getProductChildren = {};\r\n          if (type === \"Raw_Material\") {\r\n            getProductChildren = { success: true, data: [] };\r\n          } else {\r\n            getProductChildren = await fetchProductChildren(\r\n              headers,\r\n              objectId,\r\n              type\r\n            );\r\n          }\r\n\r\n          console.log(\"Type After:\", type);\r\n          console.log(\r\n            \"[Use Plant Assignment] Product Children:\",\r\n            getProductChildren\r\n          );\r\n\r\n          if (getProductChildren.success) {\r\n            dispatch(setProductChildren(getProductChildren.data));\r\n          }\r\n\r\n          // Step 5: Fetch Change Action details\r\n          const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n          console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n          if (getCaDetails.success) {\r\n            dispatch(setCAName(getCaDetails.data));\r\n            dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n            dispatch(setCAData(getCaDetails.CAData));\r\n          }\r\n\r\n          console.log(\"[Plant Assignment] All services executed successfully.\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useObsolescenceWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleObsolescenceWidget };\r\n};\r\n\r\nexport default useObsolescenceWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","// import { useCallback, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\n// import { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// // Custom hook\r\n// import usePlantAssignment from \"./usePlantAssignment\";\r\n// // Reusable services\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({\r\n//           dataItems,\r\n//         });\r\n\r\n//         // const cardownerResult = await fetchCardOwnerDetailsService({\r\n//         //   dataItems,\r\n//         //   headers,\r\n//         // });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           // Merge the data from both services\r\n//           // const combineData = {\r\n//           //   cardData: objectDetailsResult.data.cardData,\r\n//           //   ownerData: cardownerResult.data.ownerData,\r\n//           // };\r\n\r\n//           dispatch(\r\n//             setDroppedObjectData({\r\n//               cardData: objectDetailsResult.data.cardData,\r\n//             })\r\n//           );\r\n\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // call usePlantAssignment after successfully fetching object details\r\n//           if (objectDetailsResult) {\r\n//             await handleObsolescenceWidget(\r\n//               draggedObjectData[\"Collaborative Space\"],\r\n//               draggedObjectData[\"Maturity State\"],\r\n//               dataItems[0]?.objectId,\r\n//               dataItems[0]?.objectType,\r\n//               draggedObjectData.Name,\r\n//               draggedObjectData[\"Dropped Revision\"]\r\n//             );\r\n//           }\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       setLoading(true); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         setLoading(false);\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         console.log(\r\n//           \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n//         );\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast]\r\n//   );\r\n//   // Initialize droppable area\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n//       );\r\n//       dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n//     } else {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n//       );\r\n//     }\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100); // Check every 100ms\r\n\r\n//     return () => clearInterval(interval); // Cleanup interval on unmount\r\n//   }, [handleDrop, dispatch]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n//           if (\r\n//             objectType !== \"VPMReference\" &&\r\n//             objectType !== \"Change Action\"\r\n//           ) {\r\n//             showErrorToast(\"Please select CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n////////////////////////////////////////////////original///////////////////////////\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult= await getDroppedObjectDetails({ dataItems });\r\n//         console.log(\"[Object Details Result]:\", objectDetailsResult);\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n//           console.log(\"Maturity state\", maturityState)\r\n\r\n//           if (objectType === \"Change Action\") {\r\n//             const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n//             if (maturityState === \"Completed\") {\r\n//               showErrorToast(\"CA is already completed.\");\r\n//               dispatch(setLoading(false));\r\n//               return;\r\n//             }\r\n//           }\r\n\r\n//           if ((objectType === \"Physical Product\") && (maturityState !== \"Released\")) {\r\n//             showErrorToast(\"Product is not released.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//            // draggedObjectData[\"Collaborative Space\"],\r\n//            // draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData[\"relativePath\"],\r\n//             // draggedObjectData.Name,\r\n//           //  draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n////////////////////////////////////////////////////////////original above//////////////////\r\n\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setLoading,\r\n  setIsDropped as setIsDroppedAction,\r\n} from \"../store/droppedObjectSlice\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport useObsolescenceWidget from \"./useObsolescenceWidget\";\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useObsolescenceDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const validTypes = [\"VPMReference\", \"Physical Product\", \"Change Action\"];\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        console.log(\r\n          \"[FetchObjectDetails] Requesting with dataItems:\",\r\n          dataItems\r\n        );\r\n\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        console.log(\"[FetchObjectDetails] API response:\", objectDetailsResult);\r\n\r\n        if (objectDetailsResult.success) {\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          const objectType = draggedObjectData?.Type;\r\n          const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n\r\n          console.log(\"[Dragged Object Type]:\", objectType);\r\n          console.log(\"[Maturity State]:\", maturityState);\r\n\r\n          // if (!validTypes.includes(objectType)) {\r\n          //   showErrorToast(\"Please select a CA or Engg Item.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n\r\n          // if (objectType === \"Change Action\" && maturityState === \"Completed\") {\r\n          //   showErrorToast(\"CA is already completed.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n\r\n          // if (objectType === \"Physical Product\" && maturityState !== \"Released\") {\r\n          //   showErrorToast(\"Product is not released.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n          console.log(\"[Validation] Object Type:\", objectType);\r\n          console.log(\"[Validation] Maturity State:\", maturityState);\r\n          console.log(\r\n            \"[Validation] Is valid type?\",\r\n            validTypes.includes(objectType)\r\n          );\r\n\r\n          if (!validTypes.includes(objectType)) {\r\n            console.log(\"[Validation] Invalid object type error triggered\");\r\n            showErrorToast(\"Please select a CA or Engg Item.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          if (objectType === \"Change Action\" && maturityState === \"Completed\") {\r\n            console.log(\"[Validation] CA completed error triggered\");\r\n            showErrorToast(\"CA is already completed.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          if (\r\n            objectType === \"Physical Product\" &&\r\n            maturityState !== \"Released\"\r\n          ) {\r\n            console.log(\"[Validation] Product not released error triggered\");\r\n            showErrorToast(\"Product is not released.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          await handleObsolescenceWidget(\r\n            draggedObjectData[\"Collaborative Space\"], // collabSpace\r\n            dataItems[0]?.objectId,                   // objectId\r\n            dataItems[0]?.objectType,                 // objectType\r\n            draggedObjectData[\"relativePath\"]         // relativePath\r\n          );          \r\n        } else {\r\n          console.error(\r\n            \"[FetchObjectDetails] API failure:\",\r\n            objectDetailsResult\r\n          );\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Exception:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleObsolescenceWidget, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      dispatch(setLoading(true));\r\n      console.log(\"[handleDrop] Called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n          dispatch(setLoading(false));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[handleDrop] Unexpected error:\", error);\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast, dispatch]\r\n  );\r\n\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\"[initializeDroppableArea] Resetting isDropped to false...\");\r\n      dispatch(setIsDroppedAction(false));\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useObsolescenceDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n  onClose, // New prop to close dropdown\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n    onClose(); // Close after applying update\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropdown-menu p-3 \"\r\n      style={{ width: \"300px\", display: \"block\" }}\r\n    >\r\n      <label>Select Column:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        onChange={(e) => setSelectedColumn(e.target.value)}\r\n        value={selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Column --</option>\r\n        {editableColumns.map((col) => (\r\n          <option key={col} value={col}>\r\n            {col}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Select Value:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        value={selectedValue}\r\n        onChange={(e) => setSelectedValue(e.target.value)}\r\n        disabled={!selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Value --</option>\r\n        {valueOptions.map((val) => (\r\n          <option key={val} value={val}>\r\n            {val}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button\r\n        className=\"btn btn-outline-success me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(false)}\r\n        disabled={!selectedRows.length}\r\n        style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n      >\r\n        Apply to Selected\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(true)}\r\n      >\r\n        Apply to All\r\n      </button>\r\n\r\n      {/* Close Button */}\r\n      <button className=\"btn btn-outline-danger me-2 mb-2\" onClick={onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","// import { useState } from \"react\";\r\n// import Popup from \"../../components/Popup/Popup\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\n// import MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\n// const ObsolescenceWidgetToolbarNativeCta = ({\r\n//   onSave,\r\n//   state,\r\n//   selectedRows,\r\n//   tableData,\r\n//   onMassUpdate,\r\n//   type,\r\n//   latestRevision,\r\n//   droppedRevision,\r\n// }) => {\r\n//   const { showWarningToast } = useToast();\r\n//   const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n//   const handleSaveClick = () => {\r\n//     if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n//       showWarningToast(MSG_BOS_SAVE);\r\n//     } else {\r\n//       onSave();\r\n//     }\r\n//     // When save button is clicked, call onSave passed as prop\r\n//     // onSave is passed with tableData from parent\r\n//   };\r\n//   const handleMassUpdate = (column, value, scope) => {\r\n//     if (scope === \"selected\") {\r\n//       onMassUpdate(selectedRows, column, value);\r\n//     } else {\r\n//       onMassUpdate(tableData, column, value);\r\n//     }\r\n//   };\r\n//   const editableColumns = [\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column cta-absolute\">\r\n//       <div className=\"d-flex\">\r\n//         <button\r\n//           className=\"btn btn-outline-success btn-lg m-2\"\r\n//           // onClick={handleSaveClick}\r\n//         >\r\n//           Obsolete\r\n//         </button>\r\n//         {/* <button\r\n//           className=\"btn btn-outline-primary btn-lg m-2\"\r\n//           onClick={() =>\r\n//             type !== \"Document\" && latestRevision !== droppedRevision\r\n//               ? showWarningToast(MSG_BOS_SAVE)\r\n//               : setShowDropdown((prev) => !prev)\r\n//           }\r\n//         >\r\n//           Mass Update\r\n//         </button> */}\r\n//       </div>\r\n\r\n//       {/* Dropdown appears below */}\r\n//       {showDropdown && (\r\n//         <div className=\"mt-2\">\r\n//           <MassUpdateDropdown\r\n//             editableColumns={editableColumns}\r\n//             selectedRows={selectedRows}\r\n//             onApplyUpdate={handleMassUpdate}\r\n//             valueOptions={[\"Yes\", \"No\"]}\r\n//             onClose={() => setShowDropdown(false)}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ObsolescenceWidgetToolbarNativeCta;\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\nconst ObsolescenceWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n  ParentItemState,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  const handleSaveClick = () => {\r\n    if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n      showWarningToast(MSG_BOS_SAVE);\r\n    } else {\r\n      onSave();\r\n    }\r\n  };\r\n\r\n  // const handleObsoleteClick = () => {\r\n  //   // Show the new toast\r\n  //   showWarningToast(\"Product is not yet released\");\r\n\r\n  //   // Preserve original save logic\r\n  //   handleSaveClick();\r\n  // };\r\n\r\n  const handleObsoleteClick = () => {\r\n    if (ParentItemState !== \"obsolete\") {\r\n      showWarningToast(\"Parent item is not obsolete\");\r\n    } else {\r\n      showSuccessToast(\"Parent item is already obsolete\");\r\n    }\r\n  };\r\n    \r\n\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleObsoleteClick}\r\n        >\r\n          Obsolete\r\n        </button>\r\n        {/* <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={() =>\r\n            type !== \"Document\" && latestRevision !== droppedRevision\r\n              ? showWarningToast(MSG_BOS_SAVE)\r\n              : setShowDropdown((prev) => !prev)\r\n          }\r\n        >\r\n          Mass Update\r\n        </button> */}\r\n      </div>\r\n\r\n      {showDropdown && (\r\n        <div className=\"mt-2\">\r\n          <MassUpdateDropdown\r\n            editableColumns={editableColumns}\r\n            selectedRows={selectedRows}\r\n            onApplyUpdate={handleMassUpdate}\r\n            valueOptions={[\"Yes\", \"No\"]}\r\n            onClose={() => setShowDropdown(false)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidgetToolbarNativeCta;\r\n","// import React, { useEffect, useMemo, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\n// import { Image } from \"react-bootstrap\";\r\n// import \"./ObsolescenceWidget.css\";\r\n// import Loader from \"../../components/Loader/Loader\";\r\n// import ReusableTable from \"../../components/Table/Table\";\r\n// import CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setIsDropped,\r\n//   setPlantObjectData,\r\n// } from \"../../store/droppedObjectSlice\";\r\n// import { getCardData, getTableData, tableColumns } from \"./ObsolescencedataHelper\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\n// import { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\n// import useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n// import ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\n// import { fetchData } from \"../../utils/helpers\";\r\n\r\n// const ObsolescenceWidget = () => {\r\n//   const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n//   const [tableKey, setTableKey] = useState(0);\r\n//   const [tableData, setTableData] = useState([]);\r\n//   const [isTableLoading, setIsTableLoading] = useState(false);\r\n//   const [screenLoader, setScreenLoader] = useState(false);\r\n//   const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n//   const [specData, setSpecData] = useState([]);\r\n//   const [selectableRows, setSelectableRows] = useState([]);\r\n//   const dispatch = useDispatch();\r\n//   const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n//   useEffect(() => {\r\n//     if (specData.length) {\r\n//       setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n//     }\r\n//   }, [specData]);\r\n\r\n//   const handleSave = async () => {\r\n//     console.log(\"Table Data is:\", tableData);\r\n//     setScreenLoader(true);\r\n//     console.log(\"Type of Parent:\", type);\r\n//     let parentData = [];\r\n//     let ChildNameKey;\r\n//     let ChildRevKey;\r\n//     let ChildStateKey;\r\n//     let ChildIdKey;\r\n//     if (type === \"Document\") {\r\n//       parentData = {\r\n//         SpecName: droppedObjectData.cardData.Name,\r\n//         SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n//         SpecState: droppedObjectData.cardData[\"Maturity State\"],\r\n//         SpecID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK CARD DATA\r\n//         // SpecState need to be added.\r\n//       };\r\n//       ChildNameKey = \"ParentItemName\";\r\n//       ChildRevKey = \"ParentItemRevision\";\r\n//       ChildStateKey = \"ParentItemState\";\r\n//       ChildIdKey = \"ItemID\";\r\n//     } else {\r\n//       console.log(\"It's a physical Product\");\r\n//       parentData = {\r\n//         ParentItemName: droppedObjectData.cardData.Name,\r\n//         ParentItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n//         ParentItemState: droppedObjectData.cardData[\"Maturity State\"],\r\n//         ItemID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK THIS\r\n//         // need to add Maturity State as Item State and ItemId is Dropped Revision Id.\r\n//       };\r\n//       ChildNameKey = \"SpecName\";\r\n//       ChildRevKey = \"SpecRevision\";\r\n//       ChildStateKey = \"SpecState\";\r\n//       ChildIdKey = \"SpecID\";\r\n//     }\r\n\r\n//     const formattedData = tableData.map((item) => {\r\n//       // Find matching data in bosSpecDocument\r\n//       let matchingData = bosSpecDocument.find(\r\n//         (data) =>\r\n//           data.childTitle === item.Title && data.childRevision === item.Revision\r\n//       );\r\n\r\n//       return {\r\n//         [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n//         [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n//         [ChildStateKey]: matchingData ? matchingData.childState : null, // need to check this\r\n//         [ChildIdKey]: matchingData ? matchingData.ID : null, //\r\n//         // something needs to be done here\r\n//         // [ChildStateKey]:\r\n//         ...parentData, // Merge Parent Data\r\n//         PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n//         PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n//         WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n//         PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n//         \"SAP/JDE\": item[\"SAP/JDE\"],\r\n//       };\r\n//     });\r\n\r\n//     formattedData.sort((a, b) => {\r\n//       if (a.SpecName !== b.SpecName) {\r\n//         return a.SpecName.localeCompare(b.SpecName);\r\n//       }\r\n//       return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n//     });\r\n\r\n//     console.log(\"Formatted Data:\", formattedData);\r\n//     const saveURL =\r\n//       \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n//     const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n//     console.log(\"the response from node API is:\", response);\r\n//     if (response.status === 200) {\r\n//       showSuccessToast(MSG_SAVE_SUCCESS);\r\n//       setSpecData(tableData);\r\n//       setScreenLoader(false);\r\n//     } else {\r\n//       showErrorToast(MSG_SAVE_FAILURE);\r\n//       setScreenLoader(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleMassUpdate = async (data, column, value) => {\r\n//     console.log(\"Data when the Mass Update is Clicked:\", data);\r\n//     console.log(\"Columns to Change:\", column);\r\n//     console.log(\"Value after change:\", value);\r\n\r\n//     const updatedData = data.map((row) => ({\r\n//       ...row,\r\n//       [column]: value, // Update the specified column with the new value\r\n//     }));\r\n\r\n//     console.log(\"Updated Data is:\", updatedData);\r\n//     console.log(\"Table Data is:\", tableData);\r\n\r\n//     // Merge updatedData into tableData based on matching Title & Revision\r\n//     const mergedData = tableData.map((row) => {\r\n//       const updatedRow = updatedData.find(\r\n//         (updated) =>\r\n//           updated.Title === row.Title && updated.Revision === row.Revision\r\n//       );\r\n\r\n//       return updatedRow ? updatedRow : row; // Use updated row if found, else keep original row\r\n//     });\r\n\r\n//     console.log(\"Merged Data:\", mergedData);\r\n//     updateTableData(mergedData);\r\n//   };\r\n\r\n//   console.log(\"Table Data after Adding:\", tableData);\r\n//   const selectedTableRows = useSelector(\r\n//     (state) => state.droppedObject.selectedTableRows\r\n//   );\r\n//   // Access Redux store\r\n//   const droppedObjectData = useSelector(\r\n//     (state) => state.droppedObject.droppedObjectData\r\n//   );\r\n//   console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n//   const loadingParentDetails = useSelector(\r\n//     (state) => state.droppedObject.loadingParentDetails\r\n//   );\r\n//   console.log(\"Parents Loading State:\", loadingParentDetails);\r\n//   const proposedChanges = useSelector(\r\n//     (state) => state.droppedObject.plantObjectData.proposedChanges\r\n//   );\r\n//   console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n//   console.log(\"Bos data in BOS Widget is:\", bosData);\r\n//   const bosSpecDocument = useSelector(\r\n//     (state) => state.droppedObject.BOSObjectData.specDocument\r\n//   );\r\n//   console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n//   const parentObjectData = useSelector(\r\n//     (state)=> state.droppedObject?.obselenceObjectData?.parentObjectData\r\n//   );\r\n//   console.log(\"Parent Object Data:\", parentObjectData)\r\n\r\n//   const updateTableData = (updatedData) => {\r\n//     const newDataWithChanges = updatedData.map((newItem) => {\r\n//       const originalItem = specData.find(\r\n//         (oldItem) =>\r\n//           oldItem.Title === newItem.Title &&\r\n//           oldItem.Revision === newItem.Revision\r\n//       );\r\n\r\n//       if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n//       // Track changed cells\r\n//       const changedCells = {};\r\n//       Object.keys(newItem).forEach((key) => {\r\n//         if (newItem[key] !== originalItem[key]) {\r\n//           changedCells[key] = true; // Mark this cell as changed\r\n//         }\r\n//       });\r\n\r\n//       return { ...newItem, changedCells };\r\n//     });\r\n\r\n//     setTableData(newDataWithChanges);\r\n//   };\r\n\r\n//   console.log(\"Table Data is:\", tableData);\r\n//   useEffect(() => {\r\n//     if (tableData.length >= 0) {\r\n//       setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n//     }\r\n//   }, [tableData]); // Runs whenever tableData changes\r\n//   if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n//     var state = droppedObjectData.cardData[\"Maturity State\"];\r\n//     var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     if (!isDropped) {\r\n//       initializeDroppableArea();\r\n//     }\r\n//   }, [isDropped, initializeDroppableArea]);\r\n//   useEffect(() => {\r\n//     setIsTableLoading(loadingParentDetails);\r\n//   }, [loadingParentDetails]);\r\n\r\n//   const newTableData = useMemo(\r\n//     () => getTableData(parentObjectData, type),\r\n//     [parentObjectData, type]\r\n//   );\r\n//   useEffect(() => {\r\n//     setSpecData(newTableData);\r\n//   }, [newTableData]);\r\n\r\n//   useEffect(() => {\r\n//     if (newTableData.length >= 0) {\r\n//       console.log(\"New Table Data:\", newTableData);\r\n//       setTableData(newTableData);\r\n//       setTableKey((prevKey) => prevKey + 1); // Update table key\r\n//     }\r\n//   }, [newTableData]);\r\n//   const cardData = useMemo(\r\n//     () => getCardData(droppedObjectData),\r\n//     [droppedObjectData]\r\n//   );\r\n//   console.log(cardData);\r\n//   useEffect(() => {\r\n//     setIsCardDataAvailable(!!cardData);\r\n//   }, [cardData]);\r\n//   const columns = useMemo(\r\n//     () =>\r\n//       tableColumns(\r\n//         type,\r\n//         droppedObjectData?.cardData[\"Latest Revision\"],\r\n//         droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//       ),\r\n//     [type, droppedObjectData?.cardData]\r\n//   );\r\n\r\n//   const handleHomeClick = () => {\r\n//     initializeDroppableArea(); // Reset the droppable area\r\n//     dispatch(setIsDropped(false));\r\n//     dispatch(\r\n//       setDroppedObjectData({\r\n//         cardData: {},\r\n//         parentDetails: [],\r\n//         versions: [],\r\n//         initialDraggedData: [],\r\n//       })\r\n//     ); // Clear Redux state\r\n//     dispatch(\r\n//       setPlantObjectData({\r\n//         allPlants: [],\r\n//         initialAssignedPlants: [],\r\n//         uniquePlants: [],\r\n//         productChildren: [],\r\n//         CAName: false,\r\n//         headers: {},\r\n//       })\r\n//     );\r\n//     setTableData([]); // Clear local table data\r\n//     setIsCardDataAvailable(false);\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {screenLoader && (\r\n//         <div className=\"loading-overlay\">\r\n//           <Loader />\r\n//           <p>Saving...</p>\r\n//         </div>\r\n//       )}\r\n//       {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n//       {loading && <Loader />}\r\n//       {isDropped && (\r\n\r\n//         <>\r\n//          {/* Show initial loader when loading is true */}\r\n//          {loading && <Loader />}\r\n//           <div className=\"content-wrapper py-3 border-bottom\">\r\n//             <div className=\"d-flex \">\r\n//               <div className=\" p-0 pt-4\">\r\n//                 <Image\r\n//                   src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n//                   alt=\"home-icon\"\r\n//                   className=\"home-icon\"\r\n//                   onClick={handleHomeClick}\r\n//                 />\r\n//               </div>\r\n//               {cardData && (\r\n//                 <CardWithDragAndDrop data={cardData} widgetType=\"ObsolescenceWidget\" />\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {isTableLoading ? (\r\n//             <div className=\"loading-indicator mt-5\">\r\n//               <Loader />\r\n//             </div>\r\n//           ) : (\r\n//             <>\r\n//               <div className=\"wrapper-cta\">\r\n//                 <ObsolescenceWidgetToolbarNativeCta\r\n//                   onSave={handleSave}\r\n//                   type={type}\r\n//                   latestRevision={\r\n//                     droppedObjectData?.cardData[\"Latest Revision\"]\r\n//                   }\r\n//                   droppedRevision={\r\n//                     droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//                   }\r\n//                   selectedRows={selectedTableRows}\r\n//                   state={state}\r\n//                   tableData={selectableRows}\r\n//                   onMassUpdate={handleMassUpdate}\r\n//                 />\r\n//                 <ReusableTable\r\n//                   key={tableKey}\r\n//                   data={tableData}\r\n//                   columns={columns}\r\n//                   meta={{ updateTableData }}\r\n//                   type={type}\r\n//                   latestRevision={\r\n//                     droppedObjectData?.cardData[\"Latest Revision\"]\r\n//                   }\r\n//                   droppedRevision={\r\n//                     droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//                   }\r\n//                   widgetType=\"Obsolescence_Attribute_Widget\"\r\n//                   // onSelectableRowsChange={setSelectableRows}\r\n//                 />\r\n//               </div>\r\n//             </>\r\n//           )}\r\n//         </>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n// export default ObsolescenceWidget;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./ObsolescenceWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./ObsolescencedataHelper\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\nimport ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst ObsolescenceWidget = () => {\r\n  const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const droppedObjectData = useSelector((state) => state.droppedObject.droppedObjectData);\r\n  const selectedTableRows = useSelector((state) => state.droppedObject.selectedTableRows);\r\n  const loadingParentDetails = useSelector((state) => state.droppedObject.loadingParentDetails);\r\n  const proposedChanges = useSelector((state) => state.droppedObject.plantObjectData.proposedChanges);\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData || {});\r\n  const bosSpecDocument = bosData?.specDocument || [];\r\n  const parentObjectData = useSelector((state) => state.droppedObject?.obselenceObjectData?.parentObjectData || []);\r\n\r\n  const type = droppedObjectData?.initialDraggedData?.data?.items?.[0]?.objectType || \"Product\";\r\n  const state = droppedObjectData?.cardData?.[\"Maturity State\"] || \"\";\r\n\r\n  const updateTableData = (updatedData) => {\r\n    const newDataWithChanges = updatedData.map((newItem) => {\r\n      const originalItem = specData.find(\r\n        (oldItem) => oldItem.Title === newItem.Title && oldItem.Revision === newItem.Revision\r\n      );\r\n      if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n      const changedCells = {};\r\n      Object.keys(newItem).forEach((key) => {\r\n        if (newItem[key] !== originalItem[key]) {\r\n          changedCells[key] = true;\r\n        }\r\n      });\r\n\r\n      return { ...newItem, changedCells };\r\n    });\r\n\r\n    setTableData(newDataWithChanges);\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    setScreenLoader(true);\r\n\r\n    let parentData = {};\r\n    let ChildNameKey, ChildRevKey, ChildStateKey, ChildIdKey;\r\n\r\n    if (type === \"Document\") {\r\n      parentData = {\r\n        SpecName: droppedObjectData.cardData?.Name,\r\n        SpecRevision: droppedObjectData.cardData?.[\"Dropped Revision\"],\r\n        SpecState: droppedObjectData.cardData?.[\"Maturity State\"],\r\n        SpecID: droppedObjectData.cardData?.[\"ID\"],\r\n      };\r\n      ChildNameKey = \"ParentItemName\";\r\n      ChildRevKey = \"ParentItemRevision\";\r\n      ChildStateKey = \"ParentItemState\";\r\n      ChildIdKey = \"ItemID\";\r\n    } else {\r\n      parentData = {\r\n        ParentItemName: droppedObjectData.cardData?.Name,\r\n        ParentItemRevision: droppedObjectData.cardData?.[\"Dropped Revision\"],\r\n        ParentItemState: droppedObjectData.cardData?.[\"Maturity State\"],\r\n        ItemID: droppedObjectData.cardData?.[\"ID\"],\r\n      };\r\n      ChildNameKey = \"SpecName\";\r\n      ChildRevKey = \"SpecRevision\";\r\n      ChildStateKey = \"SpecState\";\r\n      ChildIdKey = \"SpecID\";\r\n    }\r\n\r\n    const formattedData = tableData.map((item) => {\r\n      const match = bosSpecDocument.find(\r\n        (d) => d.childTitle === item.Title && d.childRevision === item.Revision\r\n      ) || {};\r\n\r\n      return {\r\n        [ChildNameKey]: match.childName || item.Title,\r\n        [ChildRevKey]: item.Revision,\r\n        [ChildStateKey]: match.childState || null,\r\n        [ChildIdKey]: match.ID || null,\r\n        ...parentData,\r\n        PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n        PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n        WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n        PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n        \"SAP/JDE\": item[\"SAP/JDE\"],\r\n      };\r\n    });\r\n\r\n    formattedData.sort((a, b) => {\r\n      if (a.SpecName !== b.SpecName) {\r\n        return a.SpecName.localeCompare(b.SpecName);\r\n      }\r\n      return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n    });\r\n\r\n    const saveURL = \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n    const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n    if (response?.status === 200) {\r\n      showSuccessToast(MSG_SAVE_SUCCESS);\r\n      setSpecData(tableData);\r\n    } else {\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    setScreenLoader(false);\r\n  };\r\n\r\n  const handleMassUpdate = (data, column, value) => {\r\n    const updatedData = data.map((row) => ({ ...row, [column]: value }));\r\n\r\n    const mergedData = tableData.map((row) => {\r\n      const updatedRow = updatedData.find(\r\n        (updated) => updated.Title === row.Title && updated.Revision === row.Revision\r\n      );\r\n      return updatedRow ? updatedRow : row;\r\n    });\r\n\r\n    updateTableData(mergedData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) initializeDroppableArea();\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(() => getTableData(parentObjectData, type) || [], [parentObjectData, type]);\r\n\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(newTableData)) {\r\n      setTableData(newTableData.map((item) => ({ ...item, changedCells: {} })));\r\n      setTableKey((prev) => prev + 1);\r\n    }\r\n  }, [newTableData]);\r\n\r\n  const cardData = useMemo(() => getCardData(droppedObjectData), [droppedObjectData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData?.[\"Latest Revision\"],\r\n        droppedObjectData?.cardData?.[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea();\r\n    dispatch(setIsDropped(false));\r\n    dispatch(setDroppedObjectData({ cardData: {}, parentDetails: [], versions: [], initialDraggedData: [] }));\r\n    dispatch(setPlantObjectData({ allPlants: [], initialAssignedPlants: [], uniquePlants: [], productChildren: [], CAName: false, headers: {} }));\r\n    setTableData([]);\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n        <>\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\"p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && <CardWithDragAndDrop data={cardData} widgetType=\"ObsolescenceWidget\" />}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <div className=\"wrapper-cta\">\r\n              <ObsolescenceWidgetToolbarNativeCta\r\n                onSave={handleSave}\r\n                type={type}\r\n                latestRevision={droppedObjectData?.cardData?.[\"Latest Revision\"]}\r\n                droppedRevision={droppedObjectData?.cardData?.[\"Dropped Revision\"]}\r\n                selectedRows={selectedTableRows}\r\n                state={state}\r\n                tableData={selectableRows}\r\n                onMassUpdate={handleMassUpdate}\r\n              />\r\n              <ReusableTable\r\n                key={tableKey}\r\n                data={tableData}\r\n                columns={columns}\r\n                meta={{ updateTableData }}\r\n                type={type}\r\n                latestRevision={droppedObjectData?.cardData?.[\"Latest Revision\"]}\r\n                droppedRevision={droppedObjectData?.cardData?.[\"Dropped Revision\"]}\r\n                widgetType=\"Obsolescence_Attribute_Widget\"\r\n              />\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidget;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useObsolescenceDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport ObsolescenceWidget from \"./ObsolescenceWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <ObsolescenceWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","forwardRef","_ref","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","cell","_ref2","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","onClick","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","log","plant","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","size","cursor","marginLeft","PlantID","useObsolescenceWidget","showErrorToast","dispatch","useDispatch","ENOVIA_BASE_URL","process","email","window","widget","getValue","handleObsolescenceWidget","async","collabSpace","relativePath","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","concat","body","referencedObjects","source","identifier","ChildObject","callEnoviaWebService","status","output","_ChildObject$output","_ChildObject$output$m","member","url","items","_items$parentObject","_items$parentObject2","push","parentObject","revisionStateData","promises","revisionState","apiPath","_revisionState$output","Promise","all","setObselenceObjectData","parentObjectData","isMFGCA","ItemDetails","fetchChangeActionData","CAURL","response","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","target","sLatestID","getLatestRevision","includes","mfgDetails","getScopedItms","undefined","_Iteminfo$member$","_Iteminfo$member$$dse","ItemPlants","Iteminfo","getAssignedClasses","getItemDetails","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","error","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","getUserGroupCollab","allCollabSpaces","fetchAssignedPlants","success","setPlantObjectData","plantData","setHeaders","getProductChildren","fetchProductChildren","setProductChildren","getCaDetails","fetchCADetails","setCAName","setProposedChanges","setCAData","CAData","useObsolescenceDropableArea","isDropped","useSelector","droppedObject","loading","validTypes","fetchObjectDetails","useCallback","dataItems","objectDetailsResult","getDroppedObjectDetails","_dataItems$","_dataItems$2","draggedObjectData","cardData","Type","maturityState","setLoading","setDroppedObjectData","setIsDroppedAction","MSG_FETCH_OBJECT_DETAILS_FAILED","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","editableColumns","selectedRows","onApplyUpdate","valueOptions","onClose","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","e","value","col","disabled","val","onSave","tableData","onMassUpdate","latestRevision","droppedRevision","ParentItemState","showDropdown","setShowDropdown","handleObsoleteClick","showSuccessToast","MassUpdateDropdown","handleMassUpdate","scope","ObsolescenceWidget","_droppedObjectData$in","_droppedObjectData$in2","_droppedObjectData$in3","_droppedObjectData$in4","_droppedObjectData$ca","_droppedObjectData$ca12","_droppedObjectData$ca13","_droppedObjectData$ca14","_droppedObjectData$ca15","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","selectableRows","setSelectableRows","droppedObjectData","selectedTableRows","loadingParentDetails","plantObjectData","bosData","BOSObjectData","bosSpecDocument","specDocument","_state$droppedObject","_state$droppedObject$","obselenceObjectData","initialDraggedData","updateTableData","updatedData","newDataWithChanges","newItem","originalItem","find","oldItem","Title","Revision","_objectSpread","changedCells","Object","keys","key","newTableData","getTableData","Plant","revision","Array","isArray","prev","owner","Owner","Description","imageURL","EIN","getCardData","_droppedObjectData$ca10","_droppedObjectData$ca11","tableColumns","header","Loader","handleHomeClick","setIsDropped","parentDetails","versions","initialAssignedPlants","uniquePlants","productChildren","CardWithDragAndDrop","widgetType","ObsolescenceWidgetToolbarNativeCta","ChildNameKey","ChildRevKey","ChildStateKey","ChildIdKey","parentData","_droppedObjectData$ca2","_droppedObjectData$ca3","_droppedObjectData$ca4","_droppedObjectData$ca5","_droppedObjectData$ca6","_droppedObjectData$ca7","_droppedObjectData$ca8","_droppedObjectData$ca9","SpecName","Name","SpecRevision","SpecState","SpecID","ParentItemName","ParentItemRevision","ItemID","formattedData","match","d","childTitle","childRevision","childName","childState","ID","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","sort","a","b","localeCompare","Number","fetchData","MSG_SAVE_SUCCESS","MSG_SAVE_FAILURE","mergedData","updatedRow","updated","ReusableTable","meta","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}