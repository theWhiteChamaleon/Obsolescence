{"version":3,"file":"static/js/161.7282634f.chunk.js","mappings":"yLAIA,MAAMA,EAAuBA,CAACC,EAAMC,KAClCC,QAAQC,IAAI,mCAAoCH,GAChDE,QAAQC,IAAI,qCAAsCF,GAElD,MAAMG,EAAaJ,EAChBK,KAAKC,IACJ,MAAMC,EAAYD,EAAKE,MAAMC,QAAQ,OAAQ,IAAIA,QAAQ,SAAU,IAE7DC,EAAeT,EAAUU,MAAMC,GAChBA,EAAMJ,MACtBC,QAAQ,OAAQ,IAChBA,QAAQ,SAAU,IACHI,gBAAkBN,EAAUM,gBAGhD,OAAOH,EAAeA,EAAaI,GAAK,QAEzCC,QAAQD,GAAc,OAAPA,IAIlB,OADAZ,QAAQC,IAAI,8BAA+BC,GACpCA,GAGIY,EAAmBC,MAC9BhB,EACAiB,EACAC,EACAC,KAEAlB,QAAQC,IAAI,YAAaF,GACzBC,QAAQC,IAAI,gBAAiBe,GAC7B,MAAMG,EAAetB,EAAqBmB,EAAejB,GAGzD,GAAIoB,EAAaC,OAAS,EAAG,CAC3B,IAAIC,EACF,iGAEEC,EAAe,CACjBV,GAAIK,EACJC,KAAMA,EACNK,QAASJ,GAEX,MAAMK,QAA2BC,EAAAA,EAAAA,IAC9B,OACDJ,EACAC,GAGFtB,QAAQC,IAAI,sBAAuByB,KAAKC,UAAUH,GACpD,GAIWI,EAAgBb,MAC3BjB,EACAC,EACA8B,EACAX,EACAY,EACAC,EACAC,KAEAhC,QAAQC,IAAI,mCAAoCH,GAGhD,MAAMI,EAAaL,EAAqBC,EAAMC,GAC9CC,QAAQC,IAAI,+BAAgCC,GAC5CF,QAAQC,IAAI,gBAAiB8B,GAG7B,MAAME,EAAsBF,EAAclB,QAAQqB,IAChD,GAAsC,aAAlCA,EAAUC,MAAMxB,cAA8B,CAMhD,OALemB,EAAgBrB,MAC5B2B,GACCA,EAAOC,aAAeH,EAAUtB,IACA,WAAhCwB,EAAOE,OAAO3B,eAGpB,CACA,OAAO,KAGTX,QAAQC,IAAI,2BAA4BgC,GAGxC,MAAMM,EAAc,GAEpBrC,EAAWsC,SAASC,IAClB,MAAMC,EAAYT,EAAoBpB,QACnC8B,IAAWA,EAAMpB,QAAQqB,SAASH,KAElCtC,KAAKwC,GAAUA,EAAME,OACrBC,KAAK,MAEU,KAAdJ,GAAkC,cAAdA,GACtBH,EAAYQ,KAAK,CAAEC,QAASP,EAASQ,OAAQP,OAGjD1C,QAAQC,IAAI,yBAA0BsC,GAGtC,IAAIW,EAAe,GACnBX,EAAYC,SAASpC,IAAU,IAAD+C,EAC5B,MAAMC,EAEL,QAFeD,EAAGpD,EAAUU,MAC1BC,GAAUA,EAAME,KAAOR,EAAK4C,iBAC9B,IAAAG,OAAA,EAFkBA,EAEhB7C,MACG+C,EAAO,iCAAAC,OAAoCF,EAAU,sCAAAE,OAAqClD,EAAK6C,QACrGC,GAAY,GAAAI,OAAOD,EAAO,SAG5BrD,QAAQC,IAAI,mBAAoBiD,GAGhC,MAAMK,EAAqBrD,EAAWW,QACnCD,IAAQ2B,EAAYiB,MAAMpD,GAASA,EAAK4C,UAAYpC,MAQvD,GANAZ,QAAQC,IACN,iDACAsD,GAIEA,EAAmBnC,OAAS,EAAG,CACjC,MAAMqC,EACJ,+FAEInC,EAAe,CACnBV,GAAIiB,EACJX,KAAMA,EACNK,QAASgC,EACTG,KAAM,kBAGR1D,QAAQC,IAAI,qBAAsBqB,GAElC,IACE,MAAMqC,QAAyBlC,EAAAA,EAAAA,IAC7B,OACAgC,EACAnC,GAGFtB,QAAQC,IAAI,qBAAsByB,KAAKC,UAAUgC,GACnD,CAAE,MAAOC,GACP5D,QAAQ4D,MAAM,8BAA+BA,EAC/C,CACF,CAEA,GACEL,EAAmBnC,OAAS,GAC5BW,EAAcX,OAAS,GACd,iBAATF,GACAc,EACA,CACA,IAAIyB,EACF,+FAEEnC,EAAe,CACjBV,GAAIiB,EACJX,KAAMA,EACNK,QAASgC,EACTM,OAAQ9B,EACR2B,KAAM,kBAER,MAAMI,QAA8BrC,EAAAA,EAAAA,IACjC,OACDgC,EACAnC,GAGFtB,QAAQC,IACN,0BACAyB,KAAKC,UAAUmC,GAEnB,CAEA,MAAO,CACLC,SAAS,EACTV,QAAS,0BACTd,YAAaA,EACbW,aAAcA,IAILc,EAAWjD,MACtBkD,EACAC,EACAC,EACAC,EACAnD,EACAoD,EACAtC,EACAb,EACAC,EACAmD,EACAxC,KAEA,IACE,MAAMyC,EAAkBC,4DACxBxE,QAAQC,IAAI,+CACZD,QAAQC,IAAI,2BAA4BiB,GACxClB,QAAQC,IAAI,8BAA+BqE,GAC3CtE,QAAQC,IAAI,2BAA4B6B,GACxC,MACM2C,QAAgBC,EAAAA,EAAAA,MAChBC,EAAgB5D,MAAO6D,EAAKC,EAAMC,KACtC9E,QAAQC,IAAI,gBAAiB2E,GAC7B5E,QAAQC,IAAI,gBAAiByB,KAAKC,UAAUkD,EAAM,KAAM,IAEjD,IAAIE,SAAQ,CAACC,EAASC,KAC3BR,EAAQS,qBAAqBN,EAAK,CAChCE,SACAV,SAAOe,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFf,GAAO,IACV,eAAgB,qBAElBtE,KAAM4B,KAAKC,UAAUkD,GACrB3D,KAAM,OACNkE,WAAaC,IACXrF,QAAQC,IAAI,qBAAsBoF,GAClCL,EAAQK,IAEVC,UAAY1B,IACV5D,QAAQ4D,MAAM,kBAAmBA,GACjCqB,EAAOrB,UASf,IAAI3B,EAAsBF,EAAclB,QAAQqB,IAE9C,GADAlC,QAAQC,IAAI,wBAAyBiC,GACC,aAAlCA,EAAUC,MAAMxB,cAA8B,CAChDX,QAAQC,IAAI,sBAAuBiC,GACnC,MAAME,EAASN,EAAgBrB,MAC5B2B,GACCA,EAAOC,aAAeH,EAAUtB,IACA,WAAhCwB,EAAOE,OAAO3B,gBAGlB,OADAX,QAAQC,IAAI,iCAAkCmC,IACtCA,CACV,CAEA,OADApC,QAAQC,IAAI,qCAAsCiC,EAAUC,QACrD,KAETnC,QAAQC,IAAI,4BAA6BgC,GAEzC,IAAIsD,EAAW,GACfjB,EAAW9B,SAASgD,IAElB,GAAIA,EAAUC,UAAW,CACvB,IAAIC,EAAa,GACjBzD,EAAoBO,SAASmD,IACtBA,EAAmBpE,QAAQqB,SAAS4C,EAAU5E,KACjD8E,EAAW3C,KAAK,CACd6C,QAASD,EAAmB/E,GAC5BiF,UAAWF,EAAmB9C,UAIhC6C,EAAWtE,OAAS,GACtBmE,EAASxC,KAAK,CACZnC,GAAI4E,EAAU5E,GACdN,MAAOkF,EAAUlF,MACjBuD,OAAQ6B,EACRxE,KAAMsE,EAAUM,MAGtB,KAEF,IAAI5C,EAAe,GACnBlD,QAAQC,IAAI,cAAesF,GAC3BA,EAAS/C,SAASpC,IAChB,IAAIiD,EAAU,GAGd,GACE0C,MAAMC,QAAQ5F,EAAKyD,SACnBzD,EAAKyD,OAAOoC,OAAOtD,GAAUA,EAAMkD,YACnC,CACA,MAAMK,EAAc9F,EAAKyD,OACtB1D,KAAKwC,GAAUA,EAAMkD,YACrB/C,KAAK,MACR9C,QAAQC,IAAI,oBAAqBiG,GAE/B7C,EAD8B,QAA5BjD,EAAKc,KAAKP,cACL,GAAA2C,OAAMlD,EAAKE,MAAK,yDAAAgD,OAAwD4C,GAExE,8BAAA5C,OAAiClD,EAAKE,MAAK,sCAAAgD,OAAqC4C,GAEzFlG,QAAQC,IAAI,cAAeoD,EAC7B,MAEEA,EAAO,0BAAAC,OAA6BlD,EAAKE,MAAK,KAIhD4C,GAAY,GAAAI,OAAOD,EAAO,SAE5BrD,QAAQC,IAAIsF,GACZvF,QAAQC,IAAI,2BAA4BiD,GAExC,IAAIhD,EAAaoE,EACdzD,QACE2E,GACkC,QAAjCA,EAAUM,KAAKnF,gBACd4E,EAAS/B,MAAM2C,GAAcA,EAAUvF,KAAO4E,EAAU5E,OAE5DT,KAAKqF,GAAcA,EAAU5E,KAChCZ,QAAQC,IAAI,mBAAoBC,GAChC,IAAIkG,EAAa,CAAC,EAClB9B,EAAW9B,SAASgD,KACSD,EAAS/B,MACjC2C,GAAcA,EAAUvF,KAAO4E,EAAU5E,OAIR,WAAjC4E,EAAUM,KAAKnF,eACoB,QAAjC6E,EAAUM,KAAKnF,eAA2B6E,EAAUC,aAEvDW,EAAWZ,EAAUa,UAAYb,EAAUC,cAG/CzF,QAAQC,IAAI,kBAAmBmG,GAE/B,IAAIE,EAAmBhC,EACpBzD,QACE2E,GACCA,EAAUC,YACTF,EAAS/B,MAAM2C,GAAcA,EAAUvF,KAAO4E,EAAU5E,OAE5DT,KAAKqF,GAAcA,EAAU5E,KAIhC,GAFAZ,QAAQC,IAAI,4BAA6BqG,GAErCpG,EAAWkB,OAAS,EAAG,CACzB,IAAIqC,EACF,+FACEnC,EAAe,CACjBV,GAAIK,EACJC,KAAMA,EACNK,QAASrB,EACTwD,KAAM,kBAER,MAAMC,QAAyBlC,EAAAA,EAAAA,IAC7B,OACAgC,EACAnC,GAGFtB,QAAQC,IAAI,oBAAqByB,KAAKC,UAAUgC,GAClD,CAEA,GAAI4C,OAAOC,KAAKJ,GAAYhF,OAAS,EAAG,CAAC,IAADqF,EACtC,MAAMC,EAAU,GAAApD,OAAMiB,EAAe,qDAAAjB,OAAoDrC,GACnFoE,QAAiBV,EAAc+B,EAAY,GAAI,OACrD1G,QAAQC,IAAI,mBAAoBoF,GAChC,IAAIsB,GAA4B,QAAlBF,EAAApB,EAASuB,OAAO,UAAE,IAAAH,OAAA,EAAlBA,EAAoBE,UAAW,GAC7CP,EAAoB,QAAIO,EAExB,MAAME,EAAQ,0GAAAvD,OAA6GrC,SACrHQ,EAAAA,EAAAA,IAAU,QAAQoF,EAAUT,GAClCpG,QAAQC,IAAI,iCACd,CAEA,GACEqG,EAAiBlF,OAAS,GAC1BW,EAAcX,OAAS,GACd,iBAATF,EACA,CACA,IAAIuC,EACF,+FAEEnC,EAAe,CACjBV,GAAIK,EACJC,KAAMA,EACNK,QAAS+E,EACTzC,OAAQ9B,EACR2B,KAAM,kBAER,MAAMI,QAA8BrC,EAAAA,EAAAA,IACjC,OACDgC,EACAnC,GAGFtB,QAAQC,IACN,0BACAyB,KAAKC,UAAUmC,GAEnB,CACA,GAAI3C,EAAaC,OAAS,EAAG,CAC3B,IAAIC,EACF,iGAEEC,EAAe,CACjBV,GAAIK,EACJC,KAAMA,EACNK,QAASJ,GAEX,MAAMK,QAA2BC,EAAAA,EAAAA,IAC/B,OACAJ,EACAC,GAGFtB,QAAQC,IAAI,sBAAuByB,KAAKC,UAAUH,GACpD,CAIA,OAFAxB,QAAQC,IAAI,wDAEL,CACL8D,SAAS,EACTV,QAAS,0BACTkC,SAAUA,EACVrC,aAAcA,EAElB,CAAE,MAAOU,GAEP,OADA5D,QAAQ4D,MAAM,kBAAmBA,GAC1B,CAAEG,SAAS,EAAOV,QAAS,sBAAuBO,QAC3D,E,uFClaF,MAuHA,EAvHmBkD,IAAiB,IAAhB,OAAEC,GAAQD,EAC5B,MAAME,GAAkBC,EAAAA,EAAAA,UAAQ,KAE9B,MAAMC,EAAcH,EAAOI,QAAO,CAACC,EAAQxD,KACzC,MAAMyD,EAAWzD,EAAM0D,MAAM,cACvBC,EAAc3D,EAAM0D,MAAM,mCAC1BE,EAAW5D,EAAM6D,MAAM,MAAMC,MAAM,GAAG5E,KAAK,MAE3C6E,EAAYN,EAAWA,EAAS,GAAK,MACrCO,EAAaL,EACfA,EAAY,GACZ3D,EAAMhB,SAAS,sBAAuB,YACtC,sBACA,MAaJ,OAXKwE,EAAOO,KACVP,EAAOO,GAAa,CAClBA,YACAE,QAAS,GACTd,OAAQ,KAIZK,EAAOO,GAAWE,QAAQ9E,KAAK6E,GAC/BR,EAAOO,GAAWZ,OAAOhE,KAAKyE,GAAY5D,GAEnCwD,IACN,CAAC,GAGJ,OAAOb,OAAOuB,OAAOZ,GAAaa,MAChC,CAACC,EAAGC,IAAMC,OAAOF,EAAEL,WAAaO,OAAOD,EAAEN,eAE1C,CAACZ,IAEEoB,EAAQ,IAAIC,EAAAA,GAAkB,CAClCC,YAAY,EACZC,cAAe,KAGXC,EAAcC,IAAoC,IAAnC,IAAEC,EAAG,MAAEC,EAAK,MAAEC,EAAK,OAAEC,GAAQJ,EAChD,MAAM5E,EAAQoD,EAAgB0B,GAC9B,OACEG,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAEXX,MAAOA,EACPY,YAAa,EACbC,SAAUN,EACVE,OAAQA,EAAOK,UAEfC,EAAAA,EAAAA,MAAA,OAAKP,MAAOA,EAAOQ,UAAU,YAAWF,SAAA,EACtCJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,aAAaR,MAAO,CAAES,MAAO,OAAQH,SACjDrF,EAAM+D,aAETkB,EAAAA,EAAAA,KAAA,OAAKM,UAAU,aAAaR,MAAO,CAAES,MAAO,OAAQH,SACjDrF,EAAMiE,QAAQ1H,KAAI,CAACkJ,EAAQC,KAC1BT,EAAAA,EAAAA,KAAA,OAAAI,SAAcI,GAAJC,QAGdT,EAAAA,EAAAA,KAAA,OAAKM,UAAU,aAAaR,MAAO,CAAES,MAAO,OAAQH,UAClDJ,EAAAA,EAAAA,KAAA,MAAIM,UAAU,aAAYF,SACvBrF,EAAMmD,OAAO5G,KAAI,CAACoJ,EAAKD,KACtBT,EAAAA,EAAAA,KAAA,MAAAI,SAAaM,GAAJD,aAlBZb,IA2BX,OACES,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBF,SAAA,EACpCJ,EAAAA,EAAAA,KAACW,EAAAA,EAAa,CACZC,QAAQ,SACRpG,SACE6F,EAAAA,EAAAA,MAAAQ,EAAAA,SAAA,CAAAT,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,uBAAiB,6HAEIjC,EAAgB5F,OAAO,oBAGxD+H,UAAU,kBAGZD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeF,SAAA,EAE5BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeF,SAAA,EAC5BJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,cAAcR,MAAO,CAAES,MAAO,OAAQH,SAAC,gBAGtDJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,cAAcR,MAAO,CAAES,MAAO,OAAQH,SAAC,iBAGtDJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,cAAcR,MAAO,CAAES,MAAO,OAAQH,SAAC,0BAMxDJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,kBAAiBF,UAC9BJ,EAAAA,EAAAA,KAACc,EAAAA,GAAS,CAAAV,SACPW,IAAA,IAAC,OAAEC,EAAM,MAAET,GAAOQ,EAAA,OACjBf,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CACHV,MAAOA,EACPS,OAAQA,EACRE,SAAU/C,EAAgB5F,OAC1B4I,UAAW7B,EAAM6B,UACjBC,yBAA0B9B,EAC1BI,YAAaA,gBC9F7B,EApB2BzB,IAA+B,IAA9B,KAAEoD,EAAI,OAAEC,EAAM,OAAEpD,GAAQD,EAElD,OADA9G,QAAQC,IAAI,mCAAoC8G,IAE9C8B,EAAAA,EAAAA,KAACuB,EAAAA,EAAW,CACVF,KAAMA,EACNC,OAAQA,EACR7J,MAAM,iBACN+J,cAAe,CACb,CACEC,MAAO,QACPb,QAAS,SACTc,QAASJ,IAEXlB,UAEFJ,EAAAA,EAAAA,KAAC2B,EAAU,CAACzD,OAAQA,M,2MCZ1B,MA8EA,EA9EwB0D,KACtB,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,MACjB,iBAAEC,EAAgB,eAAEC,IAAmBC,EAAAA,EAAAA,MACtCC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GAEvCjL,QAAQC,IAAI,kCAsEZ,OA7DAiL,EAAAA,EAAAA,YAAU,KACR,IAAKC,OAAOC,OAAQ,OAqDpBpL,QAAQqL,MAAM,+DACdF,OAAOC,OAAOE,SAAS,aAlDLvK,UAAa,IAADwK,EAAAC,EAC5B,MAAMH,GAAQ,IAAII,OAAQC,MAAMjE,MAAM,MAGhCkE,EAAqBC,eAAeC,QAAQ,sBAElD,GAlB4BR,IACvBA,EAAM7H,MACVsI,GACCA,EAAKlJ,SAAS,uBAAyBkJ,EAAKlJ,SAAS,mBAenDmJ,CAAuBV,KAAWM,EAIpC,YAHA3L,QAAQgM,KACN,kFAOJJ,eAAeK,WAAW,sBAM1BjB,GAAW,GAEX,MACMkB,EADcC,EAAAA,EAAMC,WAEZC,cAAcC,kBAAkBC,mBAE9C,GAAsB,OAAjBL,QAAiB,IAAjBA,GAAuB,QAANX,EAAjBW,EAAmBpM,YAAI,IAAAyL,GAAO,QAAPC,EAAvBD,EAAyBiB,aAAK,IAAAhB,IAA9BA,EAAgCpK,OAMnC,OALApB,QAAQ4D,MACN,6EACAsI,QAEFlB,GAAW,GAIb,UAIQyB,EAAAA,EAAAA,GAAkBP,EAAkBpM,KAAK0M,MAAO9B,EACxD,CAAE,MAAO9G,GACP5D,QAAQ4D,MAAM,iDAA6CA,GAC3DiH,EAAe6B,EAAAA,GACjB,CAAC,QACC1B,GAAW,GACXJ,EAAiB+B,EAAAA,GACnB,OAOD,IAEI5B,GAAUlC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAM,IAAK,M,sHCpE/B,MA8KA,EA9KwC9F,IAYjC,IAZkC,WACvC+F,EAAU,WACVC,EAAU,OACVC,EAAM,SACNC,EAAQ,WACRC,EAAU,aACVC,EAAY,OACZC,EAAM,MACNhL,EAAK,KACLjB,EAAI,QACJkM,EAAO,OACPC,GACDvG,EACC,MAAM,iBAAEwG,EAAgB,iBAAE1C,IAAqBE,EAAAA,EAAAA,KACzCyC,EAAkBC,GACE,aAAjBA,GAAgD,gBAAjBA,GAAmD,cAAjBA,GAEnEC,EAAeC,IAAoBzC,EAAAA,EAAAA,WAAS,GAC7C0C,GAAoBC,EAAAA,EAAAA,UA6B1B5N,QAAQC,IAAI,uBAAwBgN,GAiCpC,OACE/D,EAAAA,EAAAA,MAAAQ,EAAAA,SAAA,CAAAT,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBF,SAAA,EAChCmE,IACAvE,EAAAA,EAAAA,KAAA,UACEM,UAAU,qCACVoB,QAASA,KACHgD,EAAepL,GACjBmL,EAAiBO,EAAAA,IAIN,kBAAT3M,GAEOiM,EADTO,GAAiB,GAIjBJ,EADmB,aAAVnL,EACQ2L,EAAAA,GAEAC,EAAAA,KAEnB9E,SACH,cAIFmE,IACCvE,EAAAA,EAAAA,KAAA,UACEM,UAAU,qCACVoB,QAASA,KACO,aAAVpI,GAAkC,gBAAVA,GAAqC,cAAVA,EACrDmL,EAAiBO,EAAAA,IAEjBH,GAAiB,IAEnBzE,SACH,sBAKO,kBAAT/H,IACC2H,EAAAA,EAAAA,KAAA,UACEM,UAAU,qCACVoB,QAxGcyD,KAClBT,EAAepL,GACjBmL,EAAiBO,EAAAA,IAIfd,IAAoB,kBAAT7L,GAA4BiM,GACzCJ,IAEAO,EADmB,aAAVnL,EACQ8L,EAAAA,GAEAC,EAAAA,KA6FcjF,SAC1B,UAIDmE,IACFvE,EAAAA,EAAAA,KAAA,UACEM,UAAU,oCACVoB,QA/Fa4D,KACfZ,EAAepL,GACjBmL,EAAiBO,EAAAA,IAGfb,GACFA,KAyF0B/D,SACvB,eAMHJ,EAAAA,EAAAA,KAACuB,EAAAA,EAAW,CACVF,KAAMuD,EACNtD,OAAQA,IAAMuD,GAAiB,GAC/BpN,MAAM,kBACN+J,cAAe,CACb,CACEC,MAAO,MACPb,QAAS,UACTc,QAASA,KAAO,IAAD6D,EACY,QAAzBA,EAAAT,EAAkBU,eAAO,IAAAD,GAAzBA,EAA2BE,WAC3BZ,GAAiB,KAGrB,CACEpD,MAAO,QACPb,QAAS,SACTc,QAASA,IAAMmD,GAAiB,KAElCzE,UAEFJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,aAAYF,UACzBJ,EAAAA,EAAAA,KAAC0F,EAAAA,EAAc,CACbC,IAAKb,EACL7N,KAAMmN,EACNpF,QAASqF,EACTC,OAAQA,EACRsB,UApHU3O,IAElB,GADAE,QAAQC,IAAIH,GACC,kBAAToB,EACEpB,EAAKsB,OAAS,IAChByL,EAAW/M,GACXgN,EAAWhN,SAGb,GAAIA,EAAKsB,OAAS,EAAG,CACnB,MAAMsN,EAAW5O,EAAKK,KAAKG,IAAK,CAC9BA,MAAOA,EACPqO,IAAK,IACLC,OAAQ,UACR,aAAc,MACd,aAAc,MACdC,OAAQxB,EAAOF,OACf,gBAAiBE,EAAOyB,SACxB,kBAAmB,MACnB,aAAc,SACd,aAAc,MACd,aAAc,QACdC,KAAM,MACN,aAAc,OAEhBlC,EAAW6B,GAEX5B,EAAWhN,EACb,GA0FMqC,MAAOA,Y,wEC3KnB,MA4HA,EA5H6B2E,IAOtB,IAPuB,sBAC5BkI,EAAqB,aACrBC,EAAY,oBACZC,EAAmB,aACnBC,EAAY,uBACZC,EAAsB,YACtBC,GACDvI,EACC,MAAM,WAAE4D,IAAeC,EAAAA,EAAAA,MACjB,cAAE2E,IAAkBC,EAAAA,EAAAA,KAyC1B,OACE1G,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAT,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BF,SAAA,EACvCJ,EAAAA,EAAAA,KAAC2G,EAAAA,EAAK,CACJ7G,MAAO,CAAES,MAAO,OAAQS,OAAQ,QAChC4F,IAAI,+DACJC,IAAI,eACJvG,UAAU,iBAEZN,EAAAA,EAAAA,KAAA,QAAMM,UAAU,qBAAoBF,SAAC,mBACrCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBF,SAAA,EAChCJ,EAAAA,EAAAA,KAAA,MAAIM,UAAU,aACdN,EAAAA,EAAAA,KAAA,QAAMM,UAAU,eAAcF,SAAC,QAC/BJ,EAAAA,EAAAA,KAAA,MAAIM,UAAU,gBAEhBN,EAAAA,EAAAA,KAAC8G,EAAAA,EAAW,CAACC,SArDGC,IAmCpBP,EAAcO,EAlCK,CACjBvP,MAAO,SACPwP,KAAM,GACNpM,KAAM,UACNqM,sBAAsB,EACtBC,QACE,+HACFC,cAAc,EACdC,UAAU,EACVC,kBAAkB,EAClBC,0BAA0B,EAC1BC,qBAAsB,GACtBC,kBAAmB,aAGQC,IAC3BvQ,QAAQC,IAAI,oBAAqBsQ,GACjCvQ,QAAQC,IAAI,kCAAmCsQ,EAAgB,GAAG3P,IAEhE2P,GACAA,EAAgBnP,OAAS,GACzBmP,EAAgB,GAAG3P,GAEnB8J,EAAW,CACT,CACE7I,SAAU0O,EAAgB,GAAG3P,GAC7B4P,WAAYD,EAAgB,GAAG,sBAInCvQ,QAAQgM,KAAK,gDAuBbnD,EAAAA,EAAAA,KAAA,OAAK4H,MAAM,OAAMxH,UACfC,EAAAA,EAAAA,MAAA,OAAKuH,MAAM,6BAA4BxH,SAAA,EACrCJ,EAAAA,EAAAA,KAAA,OAAK4H,MAAM,yBAAwBxH,UACjCJ,EAAAA,EAAAA,KAAC6H,EAAAA,EAAM,CACLjH,QAAQ,eACRc,QAASA,KACP,MAAMoG,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KACH,wFACFH,EAAKI,SAAW,iCAChBJ,EAAKK,SACL/H,SACH,yBAIHJ,EAAAA,EAAAA,KAAA,OAAK4H,MAAM,yBAAwBxH,UACjCJ,EAAAA,EAAAA,KAACoI,EAAAA,EAAKC,MAAK,CAACC,UAAU,mBAAkBlI,UACtCJ,EAAAA,EAAAA,KAACoI,EAAAA,EAAKG,QAAO,CACXlQ,KAAK,OACLmQ,UAAQ,EACRC,SAAUtC,EACVuC,SAAUrC,EACVV,IAAKS,SAIXpG,EAAAA,EAAAA,KAAA,OAAK4H,MAAM,yBAAwBxH,UACjCJ,EAAAA,EAAAA,KAAC6H,EAAAA,EAAM,CAACjH,QAAQ,iBAAiBc,QAAS8E,EAAYpG,UACpDJ,EAAAA,EAAAA,KAAC2I,EAAAA,EAAe,CAACC,KAAMC,EAAAA,WAG3B7I,EAAAA,EAAAA,KAAA,OAAK4H,MAAM,yBAAwBxH,UACjCJ,EAAAA,EAAAA,KAAA,OACEF,MAAO,CACLgJ,QAAS,eACTC,OAAQxC,EAAyB,cAAgB,WACjDnG,UAEFJ,EAAAA,EAAAA,KAAC6H,EAAAA,EACC,CACAjH,QACE2F,EAAyB,YAAc,kBAEzC7E,QAAS4E,EACToC,SAAUnC,EAAwBnG,SACnC,2C,+DChHjB,MAgFa4I,EAAyB9Q,UACpC,MAKMsE,QAtFUtE,eAChB6D,GAII,IAHJC,EAAIiN,UAAA1Q,OAAA,QAAA2Q,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACPhN,EAAMgN,UAAA1Q,OAAA,QAAA2Q,IAAAD,UAAA,GAAAA,UAAA,GAAG,MAGT9R,QAAQC,IAAI,gBAAiB2E,GAC7B5E,QAAQC,IAAI,cACZD,QAAQC,IAAI,gBAAiByB,KAAKC,UAAUkD,EAAM,KAAM,IAExD,IACE,MAAMQ,QAAiB2M,EAAAA,EAAAA,GAAM,CAC3BpN,MACAE,SACAV,QAAS,CACP,eAAgB,oBAElBtE,KAAM+E,IAIR,OADA7E,QAAQC,IAAI,qBAAsBoF,EAASvF,MACpCuF,EAASvF,IAClB,CAAE,MAAO8D,GAEP,MADA5D,QAAQ4D,MAAM,kBAAmBA,GAC3BA,CACR,CACF,CA4DyBnC,CAJrB,+EAMAoD,EACA,QAGF,OADA7E,QAAQC,IAAI,6BAA8ByB,KAAKC,UAAU0D,IAClDA,GAoII4M,EAAyBlR,MACpCmR,EACAC,EACAC,EACA/C,KAEA,IAEE,MAAMgD,QAAyBC,EAAAA,EAAAA,KACzBC,GAASpN,EAAAA,EAAAA,GAAA,CACb,eAAgB,oBACbkN,GAEL,IAAIG,EAAcrH,OAAOC,OAAOqH,SAAS,eACzCzS,QAAQC,IAAI,0BAA2BuS,GACvC,MAAME,EAAmBF,EAAY/K,MAAM,KAC3CzH,QAAQC,IAAI,mBAAoByS,GAChC,MAAMC,EAAcD,EAAiB,GACrC1S,QAAQC,IAAI,gBAAiB0S,GAC7B,MAAMC,EAAcF,EAAiB,GAErC1S,QAAQC,IAAI,gBAAiB2S,GAE7B,MAAMC,QAAsBC,EAAAA,EAAAA,GAAa,CAACF,GAAcL,EAAW,IACnEvS,QAAQC,IAAI,yBAA0B4S,GAEtC,MAAME,OA9N+BhS,OACvCiS,EACAH,EACAF,EACAC,KAEA,MAAMpG,EAAQ,GACRyG,EAAoB,IAAIC,IAE9B,IAAK,IAAI5J,EAAI,EAAGA,EAAI0J,EAAU5R,OAAQkI,IAAK,CACzC,MAAM6J,EAAMH,EAAU1J,GACtB,GAAI6J,EAAI/R,QAAU,GAAK+R,EAAI,IAAMA,EAAI,GAAI,CACvC,MAAMC,EAAWD,EAAI,GAAGE,WAAWC,OAC7BC,EAAaJ,EAAI,GAAGE,WAAWzQ,SAAS,KAC1CuQ,EAAI,GACDE,WACA5L,MAAM,KACNtH,KAAKqT,GAAMA,EAAEF,SAChB,CAACH,EAAI,GAAGE,WAAWC,QACvB9G,EAAMzJ,KAAK,CACTF,KAAMuQ,EACNK,OAAQF,IAEVA,EAAW/Q,SAAS9B,GAAUuS,EAAkBS,IAAIhT,IACtD,CACF,CAEA,MAAMiT,EAAe,GAcrB,OAbAV,EAAkBzQ,SAASoR,IACzB,MAAMpT,EAAeqS,EAAcpS,MAAMC,GACfA,EAAMJ,MAAMC,QAAQ,YAAa,MAC9BqT,GAAclT,EAAMJ,QAAUsT,IAEvDpT,GACFmT,EAAa5Q,KAAK,CAChB8Q,UAAWrT,EAAaF,MAAMC,QAAQ,YAAa,IACnDuT,QAAStT,EAAaI,QAKrB,CACLmT,QAAS,iBACTC,eAAgBrB,EAChBsB,cAAerB,EACfsB,QAAS,WACTC,MAAO3H,EACP4H,aAAcT,IA+KoBU,CAChCnC,EACAW,EACAF,EACAC,GAEF5S,QAAQC,IACN,yDACAyB,KAAKC,UAAUoR,EAAqB,KAAM,IAI5C,MAAM1N,QAAiBwM,EACrBkB,GAEF/S,QAAQC,IAAI,0DAA2DoF,GAGvE,MAAM8H,EAAiB,OAAR9H,QAAQ,IAARA,OAAQ,EAARA,EAAU8H,OAEzBgF,GACAjJ,EAAAA,EAAAA,MAAA,OAAKP,MAAO,CAAEgJ,QAAS,OAAQ2C,WAAY,UAAWrL,SAAA,EACtDC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,iDACyCJ,EAAAA,EAAAA,KAAA,UAAAI,SAASkE,QAExDtE,EAAAA,EAAAA,KAAA,UACE0B,QAAUgK,IACRA,EAAMC,kBACNC,UAAUC,UAAUC,UAAUxH,IAEhCxE,MAAO,CACLiM,WAAY,OACZC,OAAQ,OACRjD,OAAQ,UACRkD,WAAY,MACZC,MAAO,QAETzU,MAAM,eAAc2I,UAEpBJ,EAAAA,EAAAA,KAACmM,EAAAA,IAAS,CAACC,KAAM,WAInB5F,GAEF,CAAE,MAAOzL,GACP5D,QAAQ4D,MAAM,mCAAoCA,GAClDwO,EAA2B,uDAC7B,G,4CC2zBF,EApjCwB8C,KACtB,MAAM,6BAAE/C,EAA4B,2BAAEC,IACpC+C,EAAAA,EAAAA,MACKC,EAAeC,IAAoBpK,EAAAA,EAAAA,WAAS,IAC5CiH,EAAeoD,IAAoBrK,EAAAA,EAAAA,UAAS,OAC5CsK,EAAiBC,IAAsBvK,EAAAA,EAAAA,WAAS,IAChDwK,EAAkBC,IAAuBzK,EAAAA,EAAAA,UAAS,KACnD,wBAAE0K,EAAuB,QAAE5K,IAAYJ,EAAAA,EAAAA,MACtCiL,EAAUC,IAAe5K,EAAAA,EAAAA,UAAS,IAClC6K,EAAWC,IAAgB9K,EAAAA,EAAAA,UAAS,KACpC+K,EAAeC,IAAoBhL,EAAAA,EAAAA,UAAS,KAC5CiL,EAAeC,IAAoBlL,EAAAA,EAAAA,UAAS,OAC5CmL,EAAYC,IAAiBpL,EAAAA,EAAAA,UAAS,KACtCqL,EAAoBC,IAAyBtL,EAAAA,EAAAA,UAAS,KACtDiE,EAAqBsH,IAA0BvL,EAAAA,EAAAA,WAAS,IACxDmE,EAAwBqH,IAA6BxL,EAAAA,EAAAA,WAAS,IAC/D,WAAEP,IAAeC,EAAAA,EAAAA,MAGhB+L,GAAgBC,KAAqB1L,EAAAA,EAAAA,WAAS,IAC9C2L,GAAcC,KAAmB5L,EAAAA,EAAAA,WAAS,IAC1C6L,GAAqBC,KAA0B9L,EAAAA,EAAAA,WAAS,IACxD+L,GAAcC,KAAmBhM,EAAAA,EAAAA,WAAS,GAC3CiM,IAAWC,EAAAA,EAAAA,OACX,iBAAEvM,GAAgB,eAAEC,KAAmBC,EAAAA,EAAAA,KAC7C,IAAIsM,GAAmBjM,OAAOC,OAAOqH,SAAS,eAC9CzS,QAAQC,IAAI,wBAAyBmX,IAErC,MAAMnI,IAAerB,EAAAA,EAAAA,QAAO,MAgKtByJ,IAAoBC,EAAAA,EAAAA,cACxB,CAACC,EAAQC,KACPjB,GAAuBT,GACrBA,EAAU3V,KAAKC,GACbA,EAAKqX,SAAWF,GAAMpS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEb/E,GAAI,IACPsX,WAAYtX,EAAKsX,WAAWvX,KAAKO,GAC/BA,EAAMoT,UAAY0D,GAAOrS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEhBzE,GAAK,IACRqU,MAAuB,QAAhBrU,EAAMqU,MAAkB,QAAU,QAE3CrU,MAGRN,QAIV,CAACmW,IAyKGoB,GAAoB7B,IACxB,MAAM8B,EAAY9B,EAAU3V,KAAKgT,IAAG,CAClCC,SAAUD,EAAI0E,SACdC,UAAW3E,EAAI4E,UAGjB,OADA/X,QAAQC,IAAI,wBAAyB2X,GAC9BA,GAGT5X,QAAQC,IAAI,2BAA4B6V,GACxC,MAAMkC,IAAoBC,EAAAA,EAAAA,KACvB9V,GAAUA,EAAMkK,cAAc2L,oBAG3B1L,IAAoB2L,EAAAA,EAAAA,KACvB9V,GAAUA,EAAMkK,cAAcC,oBAEjCtM,QAAQC,IAAI,oBAAqBqM,IAIjC,MAAM4L,IAAgBD,EAAAA,EAAAA,KACnB9V,GAAUA,EAAMkK,cAAc8L,oBAAoBD,gBAErDlY,QAAQC,IAAI,2BAA4BiY,IAExC,MAAME,IAAcH,EAAAA,EAAAA,KACjB9V,GAAUA,EAAMkK,cAAc8L,oBAAoBE,cAErDrY,QAAQC,IAAI,0BAA2BmY,IACvC,MAAM7F,IAAY0F,EAAAA,EAAAA,KACf9V,GAAUA,EAAMkK,cAAc8L,oBAAoBG,YAErDtY,QAAQC,IAAI,yBAA0BsS,IAEtC,MAAMnF,IAAU6K,EAAAA,EAAAA,KACb9V,GAAUA,EAAMkK,cAAc8L,oBAAoBI,YAErDvY,QAAQC,IAAI,oBAAqBmN,IACjC,MAAMoL,IAAuBP,EAAAA,EAAAA,KAC1B9V,GAAUA,EAAMkK,cAAcmM,uBAEjCxY,QAAQC,IAAI,yBAA0BuY,IACtC,MAAM1W,IAAkBmW,EAAAA,EAAAA,KACrB9V,GAAUA,EAAMkK,cAAcoM,gBAAgB3W,kBAEjD9B,QAAQC,IAAI,wBAAyB6B,IAErC,MAAM4W,IAAYT,EAAAA,EAAAA,KAAa9V,GAAUA,EAAMkK,cAAcqM,YAEvD3Y,IAAYkY,EAAAA,EAAAA,KACf9V,GAAUA,EAAMkK,cAAcoM,gBAAgB1Y,YAEjDC,QAAQC,IAAI,wCAAyCF,IAMrD,MAAM4Y,IAAcV,EAAAA,EAAAA,KACjB9V,GAAUA,EAAMkK,cAAcoM,gBAAgBG,eAEjD5Y,QAAQC,IAAI,oCAAqC0Y,IAEjD,MAAME,IAAeZ,EAAAA,EAAAA,KAClB9V,GAAUA,EAAMkK,cAAcoM,gBAAgBK,wBAEjD9Y,QAAQC,IAAI,2BAA4B4Y,IAExC,MAAMxL,IAAS4K,EAAAA,EAAAA,KACZ9V,GAAUA,EAAMkK,cAAcoM,gBAAgBpL,SAEjDrN,QAAQC,IAAI,qBAAsBoN,IAElC,MAAM0L,IAAkBd,EAAAA,EAAAA,KACrB9V,GAAUA,EAAMkK,cAAcoM,gBAAgBM,kBAEjD/Y,QAAQC,IAAI,uCAAwC8Y,IACpD,MAAM5L,IAAS8K,EAAAA,EAAAA,KACZ9V,GAAUA,EAAMkK,cAAcoM,gBAAgBtL,SAEjDnN,QAAQC,IAAI,6BAA8BkN,IAE1C,MAAM/I,IAAU6T,EAAAA,EAAAA,KACb9V,GAAUA,EAAMkK,cAAcoM,gBAAgBrU,UAEjDpE,QAAQC,IAAI,mCAAoCmE,IAEhD,MAAM4U,IAAiB1B,EAAAA,EAAAA,cAAY,KACjC,IAAIvX,EAAYqY,GAAYjY,KAAKC,GAC/BA,EAAKE,MAAMC,QAAQ,UAAW,MAGhC,MAAM0Y,EACyB,IAA7BjB,GAAkB5W,OAAe0U,EAAYkC,GAE/C,IAAIkB,EAAsB,IACrB,IAAIhG,IACL+F,EAAWE,SAAS/Y,IAAI,IAAAgZ,EAAA,OAAe,QAAVA,EAAAhZ,EAAK2X,aAAK,IAAAqB,OAAA,EAAVA,EAAYjZ,KAAKqT,GAAMA,EAAEK,cAAc,QAIpEwF,EAAoBtZ,EACrBc,QAAQH,IAAWwY,EAAoBtW,SAASlC,KAChDP,KAAKO,IAAK,CAAQJ,MAAOI,MAK5B,OAHAV,QAAQC,IAAI,4BAA6BoZ,GAGlCtZ,EAAUI,KAAKO,IAAK,CAAQJ,MAAOI,QACzC,CAAC0X,GAAatC,EAAWkC,GAAmB5K,KAGzCkM,GAAmBC,IACvBxD,EAAawD,IAUf,GAPAvZ,QAAQC,IAAI,kBAAmB6V,IAE/B5K,EAAAA,EAAAA,YAAU,KACJ4K,EAAU1U,QAAU,GACtByU,GAAa2D,GAAYA,EAAU,MAEpC,CAAC1D,IACAxJ,GAAkBmN,UAAYnN,GAAkBC,mBAAqB,IAADmN,GAAAC,GAClExX,GAAQmK,GAAkBmN,SAAS,kBACnCzX,GAAUsK,GAAkBmN,SAAkB,QAC9CvY,GAA2C,QAAvCwY,GAAGpN,GAAkBC,0BAAkB,IAAAmN,IAAM,QAANC,GAApCD,GAAsC5Z,YAAI,IAAA6Z,QAAN,EAApCA,GAA4CnN,MAAM,GAAGgE,WAGlE,MAAOoJ,GAA2BC,KAChC5O,EAAAA,EAAAA,UAAS4N,IACX7Y,QAAQC,IACN,0CACA2Z,KAEF1O,EAAAA,EAAAA,YAAU,KACR2O,GAA6BhB,IAChB,kBAAT3X,GACFqV,EAAsB2B,IAEtBjC,EAAiB4C,MAElB,CAACA,GAAc3X,GAAMgX,MAExBhN,EAAAA,EAAAA,YAAU,KACK,kBAAThK,IACFmV,EAAc2C,QAEf,CAACA,GAAgB9X,MAmBpBgK,EAAAA,EAAAA,YAAU,KACK,kBAAThK,IACFmV,EAAcsC,MAEf,CAACA,GAAazX,KACjB,MAAM6L,GAAShM,UAAsB,IAAD+Y,EAAAC,EAClC,IAAI9V,EAAe,CAAC,EAEpB,MAAMC,EAAwB,GAE9BlE,QAAQC,IAAI,aAAc6V,GAC1B9V,QAAQC,IAAI,oCAAqC2Z,IACjD,IAAItV,EAAa,GAEb0V,EAAyBJ,GAA0BzZ,KAAK8Z,IAC1D,IAAIC,GAAY/U,EAAAA,EAAAA,GAAA,GAAQ8U,GAsCxB,OApCAnE,EAAUtT,SAAS2X,IAAe,IAADC,EAC/B,IAAIC,EAAW,CAAC,EAChB,MAAMvC,EAAYqC,EAAUpC,MAAMxX,QAAQ,QAAS,IAAIA,QACrD,OACA,IAGI+Z,EAEL,QAFYF,EAAGra,GAAUU,MACvB8Z,GAAcA,EAAUja,QAAU6Z,EAAUpC,eAC9C,IAAAqC,OAAA,EAFeA,EAEbxZ,GAEH,GAAIsZ,EAAa5Z,QAAU6Z,EAAUpC,MAAO,EACxBmC,EAAaM,KAAO,OAAS,SAG7BL,EAAUpL,OACtB,MAAM0L,KAAK3C,IACb7T,EAAa,OAADX,OAAQwU,IAAkC,SAAnBqC,EAAUpL,KAC7CsL,EAAShU,SAAQ,OAAA/C,OAAUwU,GAC3BuC,EAAS5U,UAA+B,SAAnB0U,EAAUpL,OAE/B9K,EAAa,GAADX,OAAIwU,EAAS,SAA6B,SAAnBqC,EAAUpL,KAC7CsL,EAAShU,SAAQ,GAAA/C,OAAMwU,EAAS,QAChCuC,EAAS5U,UAA+B,SAAnB0U,EAAUpL,MAEjCmL,EAAaM,KAA0B,SAAnBL,EAAUpL,KAC9BsL,GAAQlV,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHkV,GAAQ,IACXzZ,GAAI0Z,EACJha,MAAO6Z,EAAUpC,MACjBjS,KAAM,WAERxB,EAAWvB,KAAKsX,GAEpB,KAEKH,KAITpE,EAAUtT,SAAS2X,IAKjB,IAJqBP,GAA0BnZ,MAC5Cia,GAAiBA,EAAapa,QAAU6Z,EAAUpC,QAGlC,CAAC,IAAD4C,EACjB,MAAM7C,EAAYqC,EAAUpC,MAAMxX,QAAQ,QAAS,IAAIA,QACrD,OACA,IAEI+Z,EAEL,QAFYK,EAAG5a,GAAUU,MACvB8Z,GAAcA,EAAUja,QAAU6Z,EAAUpC,eAC9C,IAAA4C,OAAA,EAFeA,EAEb/Z,GAEH,GAAI0Z,EAAS,CACX,IAAIM,EAAc,CAAEha,GAAI0Z,EAASha,MAAO6Z,EAAUpC,OAC9CsC,EAAW,CAAC,EAChBnW,EAAsBnB,KAAKuX,GAEJ,SAAnBH,EAAUpL,MACR,MAAM0L,KAAK3C,IACb7T,EAAa,OAADX,OAAQwU,KAAe,EACnCuC,EAAShU,SAAQ,OAAA/C,OAAUwU,KAE3B7T,EAAa,GAADX,OAAIwU,EAAS,UAAU,EACnCuC,EAAShU,SAAQ,GAAA/C,OAAMwU,EAAS,SAElC8C,EAAYJ,MAAO,EACnBH,EAAS5U,WAAY,IAErBmV,EAAYJ,MAAO,EACnBH,EAAS5U,WAAY,GAGvBuU,EAAuBjX,KAAK6X,GAC5BP,GAAQlV,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHkV,GAAQ,IACXzZ,GAAI0Z,EACJha,MAAO6Z,EAAUpC,MACjBjS,KAAM,QAERxB,EAAWvB,KAAKsX,EAClB,CACF,KAGF,IAAIlZ,EAAe,GACnByY,GAA0BpX,SAASkY,IAIjC,IAH0B5E,EAAUtS,MACjC2W,GAAcA,EAAUpC,QAAU2C,EAAapa,QAE5B,CAAC,IAADua,EACpB,MAAMP,EAEL,QAFYO,EAAG9a,GAAUU,MACvB+E,GAAcA,EAAUlF,QAAUoa,EAAapa,eACjD,IAAAua,OAAA,EAFeA,EAEbja,GACC0Z,GACFnZ,EAAa4B,KAAKuX,EAEtB,KAGFN,EAAyBA,EAAuBnZ,QAC7C2E,IAAerE,EAAayB,SAAS4C,EAAU5E,MAGlDZ,QAAQC,IAAI,qCAAsCkB,GAIlDnB,QAAQC,IAAI,mCAAoC+Z,GAChDha,QAAQC,IAAI,4BAA6BiE,GACzClE,QAAQC,IAAI,iBAAkBgE,GAC9BjE,QAAQC,MAGR,MAAM6a,QAAe9W,EAAAA,EAAAA,IACnBC,EACAC,EACA8V,EACA5V,GACoC,QAD7B0V,EACPxN,GAAkBC,0BAAkB,IAAAuN,GAAM,QAANC,EAApCD,EAAsCha,YAAI,IAAAia,OAAN,EAApCA,EAA4CvN,MAAM,GAAG3K,SACrD9B,GACAgZ,GACA7X,GACAC,EACAmD,EACAxC,IAGF,GAAIgZ,EAAO/W,QAAS,CAClB8S,IAAgB,GAChB7W,QAAQC,IAAI,eAAgB6a,GACA,KAAxBA,EAAO5X,cAA8C,MAAvB4X,EAAO5X,aACvC0H,GAAiBmQ,EAAAA,IAGjBlQ,IAAemQ,EAAAA,EAAAA,IAAsBF,EAAO5X,cAAe,CACzD+X,WAAW,IAGf,IAAIC,EAAW,GACf,GAAIJ,EAAOvV,UAAYgB,OAAOC,KAAKsU,EAAOvV,UAAUnE,OAAS,EAAG,CAC9D,IAAIiE,GAAW8V,EAAAA,EAAAA,IACbL,EAAOvV,SACPyQ,EACAgE,EACArB,IAEF3Y,QAAQC,IAAI,eAAgBoF,GACxBA,IACFgR,EAAchR,EAASsT,aAEvBuC,EAAW7V,EAAS2U,uBAExB,MACEkB,EAAWlB,EAGTkB,IAEFjF,EAAiBiF,GACjBrB,GAA6BqB,GAEjC,MACErE,IAAgB,GAChBhM,GAAeuQ,EAAAA,MAQnBlQ,EAAAA,EAAAA,YAAU,KACHwN,IACH/C,MAED,CAAC+C,GAAW/C,KAGfzK,EAAAA,EAAAA,YAAU,KACRyL,GAAkB6B,MACjB,CAACA,KAGJ,MAAM6C,IAAepU,EAAAA,EAAAA,UAAQ,IACX,kBAAT/F,IACHoa,EAAAA,EAAAA,IAAahF,EAAoBpV,GAAMmM,KACvCiO,EAAAA,EAAAA,IAAatF,EAAe9U,GAAMmM,KACrC,CAACiJ,EAAoBN,EAAe9U,GAAMmM,KAEvCkO,IAAkBtU,EAAAA,EAAAA,UACtB,KAAMuU,EAAAA,EAAAA,GAAmBpF,IACzB,CAACA,IAEHpW,QAAQC,IAAI,wCAAyCsb,IAGrD,MAAM9B,IAAWxS,EAAAA,EAAAA,UACf,KAAMwU,EAAAA,EAAAA,IAAYnP,KAClB,CAACA,KAEHtM,QAAQC,IAAIwZ,KAsBZvO,EAAAA,EAAAA,YAAU,KACJmQ,GAAaja,QAAU,IACzBpB,QAAQC,IAAI,kBAAmBob,IAC/BtF,EAAasF,IACbxF,GAAa2D,GAAYA,EAAU,OAEpC,CAAC6B,MAEJnQ,EAAAA,EAAAA,YAAU,KACR6L,KAAyB0C,MACxB,CAACA,KAGJ,MAAM5R,IAAUZ,EAAAA,EAAAA,UACd,KAAMyU,EAAAA,EAAAA,IAAavO,GAAQjM,GAAM8V,GAAcK,KAC/C,CAAClK,GAAQjM,GAAM8V,GAAcK,KAGzBnK,IAAejG,EAAAA,EAAAA,UAAQ,IAAM0U,EAAAA,IAAe,KAuClDzQ,EAAAA,EAAAA,YAAU,KACRlL,QAAQC,IAAI,mCAAoC,CAC9C8K,UACAyN,wBACAE,iBAED,CAAC3N,EAASyN,GAAsBE,KAEnC,MAAMrJ,GAAcA,KAElBiG,EAAiB,MACjBa,EAAiB,MACjBT,EAAoB,IACpBF,GAAmB,GACnBO,EAAa,IACbM,EAAc,IACdE,EAAsB,IACtBN,EAAiB,IACjB4D,GAA6B,IAC7BhE,EAAY,GAEZW,GAAuB,GAGnBvH,GAAaZ,UACfY,GAAaZ,QAAQuN,MAAQ,IAI/BnF,GAA0B,IAgC5B,OACEvN,EAAAA,EAAAA,MAAAQ,EAAAA,SAAA,CAAAT,SAAA,CAGG2N,KAAgB/N,EAAAA,EAAAA,KAAC+D,EAAAA,EAAM,KAEtB8L,KAAc3N,IAAY2L,KAC1B7N,EAAAA,EAAAA,KAAA,OACEF,MAAO,CACLkB,OAAQ,OACR8H,QAAS,OACTkK,cAAe,SACfC,eAAgB,gBAChBC,SAAU,YACV9S,UAEFJ,EAAAA,EAAAA,KAACmT,EAAoB,CACnBhN,sBA33BsBuF,IDiBFxT,OAC9BwT,EACAmB,EACAF,EACA3K,EACAD,EACA0K,EACAa,EACAM,KAGAzW,QAAQC,IAAI,yCAEZ,MAAMgc,EAAQ1H,EAAM2H,OAAOD,MACrBE,EAAkB,CACtB,2BACA,qEAWF,GAPqBpW,MAAMqW,KAAKH,GAAOpb,QACpCwb,IACEF,EAAgBvZ,SAASyZ,EAAKnb,QAC9Bmb,EAAKxZ,KAAKlC,cAAc2b,SAAS,UACjCD,EAAKxZ,KAAKlC,cAAc2b,SAAS,WAGrBlb,OAAS,EAIxB,OAHAyJ,EAAe,kDACf0J,EAAM2H,OAAON,MAAQ,QACrBnF,GAA0B,GAI5B,MAAM4F,EAAOJ,EAAM,GACbM,EAAS,IAAIC,WAEnBD,EAAOE,OAAS1b,UACd,MAAMjB,EAAO,IAAI4c,WAAWC,EAAET,OAAOpB,QAC/B8B,EAAWC,EAAAA,GAAU/c,EAAM,CAAEoB,KAAM,UACnC4b,EAAYF,EAASG,WAAW,GAChCC,EAAQJ,EAASK,OAAOH,GACxBI,EAAWL,EAAAA,GAAWM,cAAcH,EAAO,CAAEI,OAAQ,IAK3D,GAHApd,QAAQC,IAAI,qBAAsBid,GAGV,IAApBA,EAAS9b,OAGX,OAFAyJ,EAAe,sBACf4L,GAA0B,GAO5B,MAAM4G,EAAoBH,EAAS,GAAG/c,KAAKid,GACnC,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQ/J,WAAWC,OAAO3S,gBAI5B,GAFAX,QAAQC,IAAI,sBAAuBod,GAEN,SAAzBA,EAAkB,IAA0C,WAAzBA,EAAkB,GAKvD,OAJAxS,EACE,0EAEF4L,GAA0B,GAK5B,GAAwB,IAApByG,EAAS9b,OAEX,YADAyJ,EAAe,0DAIjB,MAAM9D,EAAS,GACf,IAAK,IAAIuC,EAAI,EAAGA,EAAI4T,EAAS9b,OAAQkI,IAAK,CACxC,MAAM6J,EAAM+J,EAAS5T,GACflJ,EAAO+S,EAAI,GACXM,EAASN,EAAI,IAEd/S,GAAQqT,GACX1M,EAAOhE,KAAK,CACV4E,UAAW2B,EAAI,EACf1B,WAAY,OACZ0V,iBAAkB,yBAIlBld,IAASqT,GACX1M,EAAOhE,KAAK,CACV4E,UAAW2B,EAAI,EACf1B,WAAY,SACZ0V,iBAAkB,2BAGxB,CAIA,GAFAtd,QAAQC,IAAI,qBAAsB8G,GAE9BA,EAAO3F,OAAS,EAAG,CACrB,MAAMmc,EAAkBxW,EAAO5G,KAC5ByD,GAAK,OAAAN,OACGM,EAAM+D,UAAS,OAAArE,OAAMM,EAAMgE,WAAU,YAAAtE,OAAWM,EAAM0Z,oBAGjEtd,QAAQC,IAAI,qCAAsCsd,GAElD7H,EAAoB6H,GACpB/H,GAAmB,GACnBiB,GAA0B,EAC5B,MACE7L,EAAiB,6CACjB0K,EAAiB4H,GACjB/G,EAAiBkG,GACjB5F,GAA0B,IAI9B8F,EAAOiB,QAAU,KACf3S,EAAe,8CACf4L,GAA0B,IAG5B8F,EAAOkB,kBAAkBpB,IC5ItBqB,CACCnJ,EACAmB,EACAF,EACA3K,GACAD,GACA0K,EACAa,EACAM,GACAkH,SAAQ,KACR9G,IAAgB,MAKlBL,GAAuB,IA42BfvH,aAAcA,GACdC,oBAAqBA,EACrBC,aA9CWpO,UACnB,GAAKmR,EAAL,CAKA2E,IAAgB,GAGhB,UACQ5E,EACJC,EACAC,EACAC,EACA/C,GAEJ,CAAE,MAAOzL,GACP5D,QAAQ4D,MAAM,yBAA0BA,EAC1C,CAAC,QACCiT,IAAgB,EAClB,CAGAJ,GAA0B,EAnB1B,MAFE5L,GAAe,yDA6CTuE,uBAAwBA,EACxBC,YAAaA,OA+ElBqJ,KACCxP,EAAAA,EAAAA,MAAAQ,EAAAA,SAAA,CAAAT,SAAA,CAEG8B,IAAWlC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAM,KACnB/D,EAAAA,EAAAA,KAAA,OAAKM,UAAU,qCAAoCF,UACjDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASF,SAAA,EACtBJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,YAAWF,UACxBJ,EAAAA,EAAAA,KAAC2G,EAAAA,EAAK,CACJC,IAAI,+DACJC,IAAI,YACJvG,UAAU,YACVoB,QAlNQqT,KACtBjI,IAEAuB,IAAS2G,EAAAA,EAAAA,KAAa,IACtB3G,IACE4G,EAAAA,EAAAA,IAAqB,CACnBrE,SAAU,CAAC,EACXsE,cAAe,GACfC,SAAU,GACVzR,mBAAoB,MAGxB2K,IACE+G,EAAAA,EAAAA,IAAmB,CACjBle,UAAW,GACX+Y,sBAAuB,GACvBF,aAAc,GACdG,gBAAiB,GACjB5L,QAAQ,EACR/I,QAAS,CAAC,EACVtC,gBAAiB,GACjBuL,OAAQ,CAAC,KAGb6J,IACEgH,EAAAA,EAAAA,IAAuB,CACrBhG,cAAe,GACfG,YAAa,GACbE,WAAW,EACXD,UAAW,CAAC,KAIhBvC,EAAa,IACbgB,IAAuB,QAoLZ0C,KACC5Q,EAAAA,EAAAA,KAACsV,EAAAA,EAAmB,CAClBre,KAAM2Z,GACN2E,WAAW,yBAOlB1H,IACC7N,EAAAA,EAAAA,KAAA,OAAKM,UAAU,yBAAwBF,UACrCJ,EAAAA,EAAAA,KAAC+D,EAAAA,EAAM,OAGT/D,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAT,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EAC1BJ,EAAAA,EAAAA,KAACwV,EAA+B,CAC9BpR,WAAYsO,GACZrO,aAAcA,GACdC,OAAQA,GACRN,WA9zBI9L,UASlB,GARAsU,GAAiB,GACjBrV,QAAQC,IAAI,gBAAiBH,GAC7BE,QAAQC,IAAI,gCAAiC6V,GAC7C9V,QAAQC,IAAI,0BAA2BH,GACvCE,QAAQC,IAAI,mBAAoBiY,IAEhCrC,GAAa2D,GAAYA,EAAU,IAEtB,kBAATtY,GACFlB,QAAQC,IAAI,gCAEZsW,GAAuB+H,GACdA,EAAKne,KAAKgT,IAKf,KAH+B,IAA7B6E,GAAkB5W,QAClB4W,GAAkBxU,MAAM+a,GAAMA,EAAE9G,SAAWtE,EAAIsE,UAE9B,OAAOtE,EAE1B,MAAMqL,EAAWtG,GAAczX,MAAM8d,GAAMA,EAAE9G,SAAWtE,EAAIsE,SACtDgH,GAAsB,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAU9G,aAAc,GACtCgH,EAAiBvL,EAAIuE,YAAc,GAEnCiH,EAAwBD,EAAeve,KAAKye,GAE9CxR,IACAtN,EAAK8C,SAASgc,EAAG/K,UAAUP,SAC3BmL,EAAYjb,MACTqb,GAAOA,EAAGhL,UAAUP,SAAWsL,EAAG/K,UAAUP,UAGzBnO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQyZ,GAAE,IAAE7J,MAAO,QAAU6J,IAGjDE,EAAiB,GA+BvB,OA7BAhf,EAAK0C,SAASsV,IACZ,MAAMtX,EAAe4X,GAAY3X,MAAMC,GACdA,EAAMJ,MAC1BC,QAAQ,YAAa,IACrB+S,SACuBwE,EAAUxE,SAGtC,IAAK9S,EAAc,OAEnB,MAAMue,EAAgBN,EAAYjb,MAC/Bqb,GAAOA,EAAGhL,UAAUP,SAAWwE,EAAUxE,SAGtBoL,EAAelb,MAClCob,GAAOA,EAAG/K,UAAUP,SAAWwE,EAAUxE,UAI1CwL,EAAe/b,MAAIoC,EAAAA,EAAAA,GAAC,CAClB0O,UAAWiE,EACXhE,QAAStT,EAAaI,GACtBoe,eAAgB,WAEZD,EAAgB,CAAEhK,MAAO,OAAU,CAAEA,MAAO,eAKtD5P,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKgO,GAAG,IACNuE,WAAY,IAAIiH,KAA0BG,cAI3C,CACLjI,IAAgB,GAChB7W,QAAQC,IAAI,yCAIZ,IAAK,IAADgf,EAAAC,EACF,MAAM,YAAE3c,EAAW,aAAEW,SAAuBtB,EAAAA,EAAAA,IAC1C9B,EACAC,GACoC,QAD3Bkf,EACT3S,GAAkBC,0BAAkB,IAAA0S,GAAM,QAANC,EAApCD,EAAsCnf,YAAI,IAAAof,OAAN,EAApCA,EAA4C1S,MAAM,GAAG3K,SACrDX,GACAY,GACAiX,GACA/W,IAEFhC,QAAQC,IAAI,kCAAmCsC,GAC/CvC,QAAQC,IAAI,mCAAoCiD,GAGhD,MAAMic,EAAgB5c,EAAYpC,KAC/BC,IAAI,IAAA+C,EAAA,OAAyD,QAAzDA,EAAKpD,GAAUU,MAAMC,GAAUA,EAAME,KAAOR,EAAK4C,iBAAQ,IAAAG,OAAA,EAApDA,EAAsD7C,SAElEN,QAAQC,IAAI,kBAAmBkf,GAG/B,MAAMC,EAActf,EAAKe,QACtBH,IAAWye,EAAcvc,SAASlC,EAAMJ,SAErC+e,EAAgBvf,EAAKe,QAAQH,GACjCye,EAAcvc,SAASlC,EAAMJ,SAE/BN,QAAQC,IAAI,gBAAiBmf,GAC7Bpf,QAAQC,IAAI,kBAAmBof,GAG3BA,EAAcje,OAAS,IAErB8B,GACFkP,EAA2BlP,EAAc,CAEvC,GAIJlD,QAAQC,IAAI,mCAAoCiD,IAIlDmT,GAAeiJ,GAAmB,IAC7BA,KACAD,EAAclf,KAAKO,IAAK,CAAQJ,MAAOI,EAAMJ,aAI9C8e,EAAYhe,OAAS,IACvB2U,GAAcuI,GAAS,IAClBc,EAAYjf,KAAIyJ,IAAA,IAAC,MAAEtJ,GAAgBsJ,EAAN2V,GAAIC,EAAAA,EAAAA,GAAA5V,EAAA6V,GAAA,OAAAta,EAAAA,EAAAA,GAAA,CAClC4S,MAAOzX,GACJif,SAEFjB,KAELzI,GAAa2D,GAAYA,EAAU,IACnCrH,EAA6B,8BAEjC,CAAE,MAAOvO,GACP5D,QAAQ4D,MAAM,6BAA8BA,GAC5CwO,EAA2B,0CAC7B,CAAC,QAECyE,IAAgB,EAClB,CACF,GA8qBc/J,WA3qBMhN,IACpBE,QAAQC,IAAI,mCAAoCH,GAChD,MAAM4f,EAAmBnE,GAAgB1a,QACtCsS,IACErT,EAAKW,MAAMkf,GAAgBA,IAAgBxM,EAAI,uBAGpD,GADAnT,QAAQC,IAAI,mCAAoCyf,GAC5CA,EAAkB,CACpB,MAAME,EAAkBF,EAAiBvf,KAAKC,IAAI,CAChDE,MAAOF,EAAK,uBAGdJ,QAAQC,IAAI2f,GACZvJ,EAAcuJ,EAChB,GA8pBc7S,OAj+BGhM,UAMjB,GALAf,QAAQC,IAAI,sCAAuC6V,GAEnD6B,GAAiB7B,GACjBe,IAAgB,GAEH,kBAAT3V,GACF,IAAgB,IAAZkM,GAAkB,CACpBpN,QAAQC,IAAI,gCACZ,MAAMoF,QAAiBwa,EACrB/J,EACAxJ,GACA4L,IAIF,GADAlY,QAAQC,IAAI,8BAA+BoF,GACvCA,EAAU,CACZ,MAAMya,EAAmBhK,EAAU3V,KAAKga,IACtC,MAAM4F,EAAe7H,GAAczX,MAChCL,GAASA,EAAKqX,SAAW0C,EAAU1C,SAGtC,MAAO,CACLA,OAAQ0C,EAAU1C,OAClBuI,SAAsB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcC,SACxBC,UAAuB,OAAZF,QAAY,IAAZA,OAAY,EAAZA,EAAcE,UACzBC,UAAW/F,EAAUtC,SACrBH,WAAYyC,EAAUpC,MAAM5X,KAAI2G,IAAA,IAAC,UAAE+M,EAAS,QAAEC,GAAShN,EAAA,MAAM,CAC3D+M,YACAC,kBAKNoD,IAASiJ,EAAAA,EAAAA,IAAiBL,IAE1BjJ,IAAgB,EAClB,MACE7W,QAAQgM,KAAK,2BACb6K,IAAgB,EAEpB,KAAO,CACL7W,QAAQC,IAAI,8BAEZ,MAAMoF,QAAiB+a,EACrBtK,EACAxJ,GACA4L,IAIF,GADAlY,QAAQC,IAAI,8BAA+BoF,GACvCA,EAAU,CAAC,IAADgb,EAAAC,EACZ,MAAMR,EAAmBhK,EAAU3V,KAAKga,IACtC,MAAM4F,EAAe7H,GAAczX,MAChCL,GAASA,EAAKqX,SAAW0C,EAAU1C,SAGtC,MAAO,CACLA,OAAQ0C,EAAU1C,OAClBuI,SAAsB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcC,SACxBC,UAAuB,OAAZF,QAAY,IAAZA,OAAY,EAAZA,EAAcE,UACzBC,UAAW/F,EAAUtC,SACrBH,WAAYyC,EAAUpC,MAAM5X,KAAIqI,IAAA,IAAC,UAAEqL,EAAS,QAAEC,GAAStL,EAAA,MAAM,CAC3DqL,YACAC,kBAKNoD,IAASiJ,EAAAA,EAAAA,IAAiBL,IAG1B,MAAMS,EAC+D,QADnDF,EAChBlU,EAAAA,EAAMC,WAAWC,cAAcC,kBAAkBC,0BAAkB,IAAA8T,GAC3D,QAD2DC,EAAnED,EACIvgB,YAAI,IAAAwgB,OAD2D,EAAnEA,EACU9T,MACI,OAAZ+T,QAAY,IAAZA,GAAAA,EAAcnf,cACVqL,EAAAA,EAAAA,GAAkB8T,EAAc7V,GAGxCmM,IAAgB,EAClB,MACE7W,QAAQgM,KAAK,2BACb6K,IAAgB,EAEpB,YAEM9J,GAAO+I,IA44BD9I,SAz4BKjM,UACnB,GAAa,kBAATG,GACFlB,QAAQC,IAAI,uCACZgX,IAAiBqH,IAAUA,SAK3B,GAHAte,QAAQC,IAAI,uBAAwB+X,IACpChY,QAAQC,IAAI,4CAA6C6V,GAErDkC,GAAkB5W,OAAS,EAAG,CAAC,IAADof,EAAAC,EAEhC,MAAMC,EAAiB1I,GAAkB7X,KAAKgT,GAAQA,EAAI4E,QAC1D/X,QAAQC,IAAI,mBAAoBygB,GAChC,MAAM1f,EAAgB0f,EAAevgB,KAAKG,IAAK,CAC7CA,MAAOA,MAETN,QAAQC,IAAI,kBAAmBe,GAC/B,MAAM0e,EAAmB5J,EAAUjV,QAChCsS,IAASuN,EAAe9d,SAASuQ,EAAI4E,SAExC/X,QAAQC,IAAI,kBAAmBqZ,IAC3BA,KACFvD,EAAa2J,GACb7J,GAAa2D,GAAYA,EAAU,KAKrCnD,GAAesK,GAAqB,IAC/BA,KACA3f,KAGLmR,EACE,qDAEIrR,EAAAA,EAAAA,IACJf,GACAiB,EACoC,QADvBwf,EACblU,GAAkBC,0BAAkB,IAAAiU,GAAM,QAANC,EAApCD,EAAsC1gB,YAAI,IAAA2gB,OAAN,EAApCA,EAA4CjU,MAAM,GAAG3K,SACrDX,GAEJ,MACEkR,EAA2B,8CAg2BjBjQ,MAAOA,GACPjB,KAAMA,GACNkM,QAASA,GACTC,OAAQA,MAEVxE,EAAAA,EAAAA,KAAC+X,EAAAA,EAAa,CAEZ9gB,KAAMgW,EACNjO,QAASA,GAETuW,WAAW,2BAJNxI,YAgBjB/M,EAAAA,EAAAA,KAACgY,EAAAA,EAAkB,CACjB3W,KAAMqL,EACNpL,OAAQA,IAAMqL,GAAmB,GACjCzO,OAAQ0O,QAQHoK,EAAgC9e,MAC3C+U,EACAxJ,EACA4L,KACI,IAAD4I,EAAAC,EAAAC,EACH,MAAMC,GACgC,QAApCH,EAAAxU,EAAkBC,0BAAkB,IAAAuU,GAAM,QAANC,EAApCD,EAAsChhB,YAAI,IAAAihB,GAAO,QAAPC,EAA1CD,EAA4CvU,aAAK,IAAAwU,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvDvH,EAAWnN,EAAkBmN,UAAY,CAAC,EAE1CyH,EAAU,CACdnN,QAAS0F,EAAS0H,MAClBC,KAAMH,EAAWpf,SACjBmS,eAAgByF,EAAS4H,aACzBpN,cAAewF,EAAS,uBACxBvF,QAAS,WACTC,MAAO2B,EAAU3V,KAAKC,IACpB,MAAMkhB,EAAYpJ,EAAczX,MAAM8gB,GAAOA,EAAG9J,SAAWrX,EAAKqX,SAEhE,MAAO,CACLA,OAAQrX,EAAKqX,OACbuI,UAAmB,OAATsB,QAAS,IAATA,OAAS,EAATA,EAAWtB,WAAY,eACjCC,WAAoB,OAATqB,QAAS,IAATA,OAAS,EAATA,EAAWrB,YAAa,UACnCC,UAAW9f,EAAKyX,SAChBH,WAAYtX,EAAK2X,MAAMlX,QAAQH,GAAUA,EAAMqU,QAC5C5U,KAAKO,IACJ,MAAM,MAAEqU,GAAmBrU,EAAT6e,GAAIC,EAAAA,EAAAA,GAAK9e,EAAK8gB,GAChC,OAAArc,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKoa,GAAI,IACPkC,UAAqB,UAAV1M,EAAoB,MAAQ,gBAMnD/U,QAAQC,IAAI,4BAA6BihB,GAIzC,IAEE,aADuBzf,EAAAA,EAAAA,IAAU,OAHjC,gFAGkDyf,EAEpD,CAAE,MAAOtd,GAEP,MADA5D,QAAQ4D,MAAM,+BAAgCA,GACxCA,CACR,GAGWwc,EAAmBrf,MAC9B+U,EACAxJ,EACA4L,KACI,IAADwJ,EAAAC,EAAAC,EACH,MAAMX,GACgC,QAApCS,EAAApV,EAAkBC,0BAAkB,IAAAmV,GAAM,QAANC,EAApCD,EAAsC5hB,YAAI,IAAA6hB,GAAO,QAAPC,EAA1CD,EAA4CnV,aAAK,IAAAoV,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvDnI,EAAWnN,EAAkBmN,UAAY,CAAC,EAE1CyH,EAAU,CACdnN,QAAS0F,EAAS0H,MAClBC,KAAMH,EAAWpf,SACjBmS,eAAgByF,EAAS4H,aACzBpN,cAAewF,EAAS,uBACxBvF,QAAS,WACTC,MAAO2B,EAAU3V,KAAKC,IACpB,MAAMkhB,EAAYpJ,EAAczX,MAAM8gB,GAAOA,EAAG9J,SAAWrX,EAAKqX,SAEhE,MAAO,CACLA,OAAQrX,EAAKqX,OACbuI,UAAmB,OAATsB,QAAS,IAATA,OAAS,EAATA,EAAWtB,WAAY,eACjCC,WAAoB,OAATqB,QAAS,IAATA,OAAS,EAATA,EAAWrB,YAAa,UACnCC,UAAW9f,EAAKyX,SAChBgK,UAAmB,OAATP,QAAS,IAATA,OAAS,EAATA,EAAWO,WAAY,MACjCnK,WAAYtX,EAAK2X,MAAM5X,KAAKO,IAAW,IAADohB,EACpC,MAAM/B,EAAe7H,EAAczX,MAChCshB,GAAOA,EAAGtK,SAAWrX,EAAKqX,SAEvBuK,EAA4B,OAAZjC,QAAY,IAAZA,GAAwB,QAAZ+B,EAAZ/B,EAAcrI,kBAAU,IAAAoK,OAAZ,EAAZA,EAA0Bte,MAC7CgQ,GAAMA,EAAEM,UAAYpT,EAAMoT,UAGvBmO,EAA8B,UAAhBvhB,EAAMqU,MACpBmN,EAAiC,QAAhBxhB,EAAMqU,MAG7B,OAAIiN,GAAiBE,EACZ,CACLrO,UAAWnT,EAAMmT,UACjBC,QAASpT,EAAMoT,QACf2N,UAAW,UAKXO,IAAkBE,EACb,CACLrO,UAAWnT,EAAMmT,UACjBC,QAASpT,EAAMoT,QACf2N,UAAW,KAKVO,GAAiBE,EACb,MAIJF,GAAiBC,EACb,CACLpO,UAAWnT,EAAMmT,UACjBC,QAASpT,EAAMoT,QACf2N,UAAW,OAIR,QACN5gB,OAAOshB,cAKhBniB,QAAQC,IAAI,sCAAuCihB,GAKnD,IAEE,aADuBzf,EAAAA,EAAAA,IAAU,OAHjC,qFAGkDyf,EAEpD,CAAE,MAAOtd,GAEP,MADA5D,QAAQ4D,MAAM,+BAAgCA,GACxCA,CACR,GCruCF,IAAIwe,EAAO,KAuFI,SAAS,IAGtB,GAAIjX,OAAOC,OAAQ,CAGjB,IAAIiX,GAAe,EAEnBlX,OAAOC,OAAOE,SAAS,UAAU,KAC3B+W,EACFriB,QAAQgM,KACN,+EAIJqW,GAAe,EArGrB,WAAkB,IAADC,EAAAC,EACfC,UAAU,CAAC,+BAAgCC,IACzCtX,OAAOsX,YAAcA,KAIvB,IAAIC,GACW,QAAbJ,EAAAnX,OAAOC,cAAM,IAAAkX,GAAM,QAANC,EAAbD,EAAezd,YAAI,IAAA0d,OAAN,EAAbA,EAAqBI,cAAc,WACnC/R,SAASgS,eAAe,QAGrBF,IACHA,EAAc9R,SAASC,cAAc,OACrC6R,EAAY9hB,GAAK,OACbuK,OAAOC,QAAUD,OAAOC,OAAOvG,KACjCsG,OAAOC,OAAOvG,KAAKge,YAAYH,GAG/B9R,SAAS/L,KAAKge,YAAYH,IAOzBN,IAEHA,EAAOU,EAAAA,WAAoBJ,IAK7BN,EAAKW,QACH7Z,EAAAA,EAAAA,MAAC8Z,EAAAA,GAAQ,CAAC7W,MAAOA,EAAAA,EAAMlD,SAAA,EACrBJ,EAAAA,EAAAA,KAAC4B,EAAe,KAChB5B,EAAAA,EAAAA,KAACqM,EAAe,KAChBrM,EAAAA,EAAAA,KAACoa,EAAAA,GAAc,OAMrB,CAiEMC,MAEJ,MACEljB,QAAQ4D,MACN,sEAGN,EArEA,WA2BE,GAAIuH,OAAOvC,QAAUuC,OAAOvC,OAAOgI,SAAU,CAC3C,IAAIuS,EAAiBhY,OAAOvC,OAAOgI,SAASC,cAAc,UAC1DsS,EAAeC,YA1BE,y1BA2BjBjY,OAAOvC,OAAOgI,SAAS/L,KAAKge,YAAYM,EAE1C,MACEnjB,QAAQgM,KAAK,qFAEjB,CAGAqX,E,iGC/EA,MA4GA,GA5GuBC,EAAAA,EAAAA,aACrB,CAAAxc,EAA8C0H,KAAS,IAAtD,KAAE1O,EAAI,QAAE+H,EAAO,UAAE4G,EAAS,OAAEtB,EAAM,MAAEhL,GAAO2E,EAC1C,MAAM,iBAAEwG,IAAqBxC,EAAAA,EAAAA,MACtByY,EAAcC,IAAmBvY,EAAAA,EAAAA,UAAS,CAAC,IAElDC,EAAAA,EAAAA,YAAU,KACRsY,EAAgB,CAAC,KAChB,CAAC1jB,IAEJ,MAAMwO,EAAWA,KACf,MACMmV,EADeC,EAAMC,sBAAsBC,KACdzjB,KAChCC,GAASA,EAAKyjB,SAAS,qBAGG,IAAzBJ,EAAcriB,QAKlBqN,EAAUgV,GACVD,EAAgB,CAAC,IALflW,EAAiBwW,EAAAA,MASrBC,EAAAA,EAAAA,qBAAoBvV,GAAK,MACvBF,eAGF,MAAM0V,GAAkB/c,EAAAA,EAAAA,UAAQ,IAYvB,CAXiB,CACtBrG,GAAI,SACJqjB,KAAMzb,IAAA,IAAC,IAAE2K,GAAK3K,EAAA,OACZK,EAAAA,EAAAA,KAAA,SACE3H,KAAK,WACLiI,UAAU,mBACV+a,QAAS/Q,EAAIgR,gBACb7S,SAAU6B,EAAIiR,kCAIQvc,IAC3B,CAACA,IAEE6b,GAAQW,EAAAA,EAAAA,IAAc,CAC1BvkB,OACA+H,QAASmc,EACT7hB,MAAO,CAAEohB,gBACTe,oBAAoB,EACpBC,qBAAsBf,EACtBgB,iBAAiBA,EAAAA,EAAAA,QAGnB,OACEtb,EAAAA,EAAAA,MAAAQ,EAAAA,SAAA,CAAAT,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UACE3H,KAAK,SACLiI,UAAU,+BACVoB,QAASA,KACPmZ,EACGe,cACAb,KAAKphB,SAAS2Q,GAAQA,EAAIuR,gBAAe,MAC5Czb,SACH,gBAGDJ,EAAAA,EAAAA,KAAA,UACE3H,KAAK,SACLiI,UAAU,4BACVoB,QAASA,KACPmZ,EACGe,cACAb,KAAKphB,SAAS2Q,GAAQA,EAAIuR,gBAAe,MAC5Czb,SACH,oBAKFya,EAAMe,cAAcb,KAAKxiB,OAAS,GACjCyH,EAAAA,EAAAA,KAAA,OAAKM,UAAU,gBAAgBR,MAAO,CAAEgc,UAAW,QAAS1b,SACzDya,EAAMe,cAAcb,KAAKzjB,KAAKgT,IAC7BjK,EAAAA,EAAAA,MAAA,OAEEC,UAAU,8CACVR,MAAO,CACLic,gBAAiBzR,EAAIgR,gBAAkB,UAAY,WACnDlb,SAAA,EAEFJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,OAAMF,UAClB4b,EAAAA,EAAAA,IACC1R,EAAI2R,kBAAkB,GAAGzb,OAAO0b,UAAUd,KAC1C9Q,EAAI2R,kBAAkB,GAAGE,iBAG7Bnc,EAAAA,EAAAA,KAAA,OAAAI,SAAMkK,EAAI0Q,SAAShc,EAAQ,GAAGod,iBAZzB9R,EAAIvS,SAiBfiI,EAAAA,EAAAA,KAAA,KAAGM,UAAU,iBAAgBF,SAAC,2B,iECtHxC,MAeA,EAfsBnC,IAKf,IALgB,QACrB2C,EAAU,OAAM,QAChBpG,EAAO,KACP6G,GAAO,EAAI,UACXf,EAAY,IACbrC,EACC,OAAKoD,GAGHrB,EAAAA,EAAAA,KAACqc,EAAAA,EAAK,CAACzb,QAASA,EAASN,UAAWA,EAAUF,SACb5F,IAJjB,K,2ECNpB,MA4BA,EA5BoByD,IAAuD,IAAtD,KAAEoD,EAAI,OAAEC,EAAM,MAAE7J,EAAK,SAAE2I,EAAQ,cAAEoB,GAAevD,EACnE,OACEoC,EAAAA,EAAAA,MAACic,EAAAA,EAAK,CAACjb,KAAMA,EAAMC,OAAQA,EAAQ8K,KAAK,KAAKmQ,UAAQ,EAAAnc,SAAA,EACnDJ,EAAAA,EAAAA,KAACsc,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAArc,UACvBJ,EAAAA,EAAAA,KAACsc,EAAAA,EAAMhE,MAAK,CAAAlY,SAAE3I,GAAS,mBAEzBuI,EAAAA,EAAAA,KAACsc,EAAAA,EAAMI,KAAI,CAAAtc,SAAEA,KACbJ,EAAAA,EAAAA,KAACsc,EAAAA,EAAMK,OAAM,CAAAvc,SACVoB,EACCA,EAAclK,KAAI,CAACslB,EAAK/c,KACtBG,EAAAA,EAAAA,KAAC6H,EAAAA,EAAM,CAELjH,QAASgc,EAAIhc,SAAW,YACxBc,QAASkb,EAAIlb,QAAQtB,SAEpBwc,EAAInb,OAJA5B,MAQTG,EAAAA,EAAAA,KAAC6H,EAAAA,EAAM,CAACjH,QAAQ,YAAYc,QAASJ,EAAOlB,SAAC,e","sources":["services/api/PlantAssignment/saveTableDataService.js","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","services/api/PlantAssignment/createMFGCA.js","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js","components/Popup/Popup.jsx","components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n        {!isMFGCA && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n        )}\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./plantAssignment.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n        <div class=\"mt-3\">\r\n          <div class=\"row justify-content-center\">\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                  link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef} // Attach the ref to the file input\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n                }}\r\n              >\r\n                <Button\r\n                  // variant=\"outline-primary\"\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled} // Disable the button\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\n// Import useToastWithProgress\r\n \r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n \r\n \r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n \r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n \r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n \r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n \r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\",\r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n \r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/createMFGCA\";\r\n \r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n \r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n \r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled\r\n) => {\r\n \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n \r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n \r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n \r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    return;\r\n  }\r\n \r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n \r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n \r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n \r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n   \r\n \r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n \r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n \r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n \r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n \r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n \r\n    console.log(\"Validation Errors:\", errors);\r\n \r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n \r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n \r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n    }\r\n  };\r\n \r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n \r\n  reader.readAsArrayBuffer(file);\r\n};\r\n \r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress,\r\n  handleReset\r\n) => {\r\n  try {\r\n \r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n \r\n    console.log(\"Collab Space:\", collabSpace);\r\n \r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n \r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n \r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n \r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    //showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    showSuccessToastWithProgress(\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n    <span>\r\n      Manufacturing CA created successfully! Name: <strong>{CAName}</strong>\r\n    </span>\r\n    <button\r\n      onClick={(event) => {\r\n        event.stopPropagation(); // Prevent the toast from closing\r\n        navigator.clipboard.writeText(CAName); // Copy the CAName to clipboard\r\n      }}\r\n      style={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        cursor: \"pointer\",\r\n        marginLeft: \"8px\",\r\n        color: \"grey\",\r\n      }}\r\n      title=\"Copy CA Name\"\r\n    >\r\n      <FaRegCopy size={14} />\r\n    </button>\r\n  </div>\r\n    );\r\n    handleReset();\r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = usePlantDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        showSuccessToastWithProgress(\r\n          \"Plants removed successfully from the table.\"\r\n        );\r\n        await handleRemoveData(\r\n          allPlants,\r\n          removedTitles,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type\r\n        );\r\n      } else {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable || CAItemDetailsTable.length === 0) return;\r\n\r\n  //   // ✅ Always derive MFGCA from item MBOM, even if type is not \"Change Action\"\r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n\r\n  //   if (type === \"Change Action\") {\r\n  //     const isAnyMFGCA = CAItemDetailsTable.some(\r\n  //       (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //     );\r\n\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFGCA,\r\n  //     }));\r\n\r\n  //     if (isAnyMFGCA) {\r\n  //       setIsRemoveMode(false); // 🚀 Immediately set RemoveMode false after confirming MFGCA\r\n  //     }\r\n  //   }\r\n  // }, [CAItemDetailsTable, type, dispatch]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress,\r\n        handleReset\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n"],"names":["extractIdsFromTitles","data","allPlants","console","log","newClasses","map","item","itemTitle","title","replace","matchedPlant","find","plant","toLowerCase","id","filter","handleRemoveData","async","removedTitles","productId","type","rowstoDelete","length","declassifyUrl","classifybody","classes","declassifyResponse","fetchData","JSON","stringify","handleAddData","objectId","proposedChanges","productChilds","hasMBOM","NotPropagableChilds","prodChild","state","change","identifier","action","ErrorObject","forEach","classId","missingIn","child","includes","name","join","push","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","message","concat","filteredNewClasses","some","classifyUrl","mode","classifyResponse","error","childs","childclassifyResponse","success","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","headers","AllClasses","finalArray","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","url","body","method","Promise","resolve","reject","authenticatedRequest","_objectSpread","onComplete","response","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","childName","Type","Array","isArray","every","childTitles","errorItem","updateBody","MBOMName","propagateClasses","Object","keys","_response$member$","nextApiUrl","cestamp","member","patchUrl","_ref","errors","processedErrors","useMemo","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","split","slice","rowNumber","columnName","columns","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","index","style","parent","_jsx","CellMeasurer","columnIndex","rowIndex","children","_jsxs","className","width","column","i","err","ReusableAlert","variant","_Fragment","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","show","onHide","CustomModal","footerButtons","label","onClick","ErrorPopup","WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","useToast","loading","setLoading","useState","useEffect","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","warn","removeItem","latestDraggedData","store","getState","droppedObject","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","CAName","isMFGCA","CAData","showWarningToast","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","addedItem","newItems","Seq","Status","Change","CAStatus","MBom","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","src","alt","SearchInput","onSearch","searchText","role","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","objectType","class","Button","link","document","createElement","href","download","click","Form","Group","controlId","Control","multiple","onChange","disabled","FontAwesomeIcon","icon","faRotateLeft","display","cursor","callManufacturingCAApi","arguments","undefined","axios","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","csrfTokenHeaders","fetchCsrfToken","CAHeaders","credentials","getValue","credentialsParts","companyName","collabSpace","allPlantsData","getAllPlants","manufacturingCABody","excelData","uniquePlantTitles","Set","row","itemName","toString","trim","plantsList","p","plants","add","parentPlants","plantTitle","PlantName","PlantID","CATitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","alignItems","event","stopPropagation","navigator","clipboard","writeText","background","border","marginLeft","color","FaRegCopy","size","PlantAssignment","useToastWithProgress","isAddingPlant","setIsAddingPlant","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","tableData","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","isRemoveMode","setIsRemoveMode","dispatch","useDispatch","securityContext1","handleRemovePlant","useCallback","itemId","plantId","ItemId","ItemPlants","extractPlantData","plantData","ItemName","plantName","Plant","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAheaders","CAisMFGCA","loadingParentDetails","plantObjectData","isDropped","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","sourceData","assignedTablePlants","flatMap","_item$Plant","uniqueTablePlants","updateTableData","updatedData","prevKey","cardData","_droppedObjectData$in5","_droppedObjectData$in6","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in7","_droppedObjectData$in8","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","classitem","MBOM","test","initialClass","_allPlants$find3","classObject","_allPlants$find4","result","MSG_SAVE_SUCCESS","formattedFinalMessage","autoClose","finalobj","processErrorObj","MSG_SAVE_FAILURE","newTableData","getTableData","uniqueTableData","getUniqueTableData","getCardData","tableColumns","uniqueColumns","value","flexDirection","justifyContent","position","DragAndDropComponent","files","target","validExtensions","from","file","endsWith","reader","FileReader","onload","Uint8Array","e","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","header","normalizedHeaders","errorDescription","formattedErrors","onerror","readAsArrayBuffer","handleFileChange","finally","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","PlantAssignmentToolbarNativeCta","prev","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","existsInRedux","PlantERPStatus","_droppedObjectData$in3","_droppedObjectData$in4","erroredPlants","validPlants","invalidPlants","prevUniqueData","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","ItemTitle","setCAItemDetails","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","selectedTitles","prevUniquePlants","ReusableTable","ContentErrorsModal","_droppedObjectData$in9","_droppedObjectData$in0","_droppedObjectData$in1","objectData","payload","Title","CAId","organization","caDetails","ca","_excluded2","PlantType","_droppedObjectData$in10","_droppedObjectData$in11","_droppedObjectData$in12","ItemMBOM","_originalItem$ItemPla","ci","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener","forwardRef","rowSelection","setRowSelection","selectedItems","table","getSelectedRowModel","rows","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","cell","checked","getIsSelected","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","accessorKey","Alert","Modal","centered","Header","closeButton","Body","Footer","btn"],"sourceRoot":""}