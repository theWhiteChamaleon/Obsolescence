{"version":3,"file":"static/js/580.2f3dbf84.chunk.js","mappings":"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","sources":["pages/ObsolescenceWidget/ObsolescencedataHelper.js","hooks/useObsolescenceWidget.js","hooks/useObsolescenceDropableArea.js","pages/ObsolescenceWidget/ObsolescenceWidgetToolbarNativeCta.jsx","pages/ObsolescenceWidget/DragAndDrop.jsx","pages/ObsolescenceWidget/ObsolescenceWidget.jsx","pages/ObsolescenceWidget/WidgetLifecycle.jsx","pages/ObsolescenceWidget/ObsolescenceIndex.js"],"sourcesContent":["// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useObsolescenceWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useObsolescenceWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleObsolescenceWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useObsolescenceWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useObsolescenceWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source: `${ENOVIA_BASE_URL}`,\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          response.output.results.forEach((item) => {\r\n            // Find the latest version based on the 'revision' key\r\n            const latestVersion = item.versions.reduce((latest, current) => {\r\n              return convertRevisionToNumber(current.revision) >\r\n                convertRevisionToNumber(latest.revision)\r\n                ? current\r\n                : latest;\r\n            });\r\n\r\n            // Update 'isLatestRevision' for only the matching document\r\n            ChildObjectDocument = ChildObjectDocument.map((doc) => {\r\n              if (item.versions.some((version) => version.id === doc.id)) {\r\n                return {\r\n                  ...doc,\r\n                  isLatestRevision:\r\n                    doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n                };\r\n              }\r\n              return doc;\r\n            });\r\n          });\r\n\r\n          // Function to convert revision to a comparable numeric value\r\n          function convertRevisionToNumber(rev) {\r\n            if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n            let number = 0;\r\n            for (let i = 0; i < rev.length; i++) {\r\n              number =\r\n                number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n            }\r\n            return number; // Handles A-Z, AA-ZZ revisions\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useObsolescenceWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useObsolescenceWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useObsolescenceWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useObsolescenceWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleObsolescenceWidget };\r\n};\r\n\r\nexport default useObsolescenceWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n\r\nconst useObsolescenceDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleObsolescenceWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleObsolescenceWidget]\r\n  );\r\n\r\n  // const handleDrop = useCallback(\r\n  //   async (dataItems) => {\r\n  //     setLoading(true); // Start loading state\r\n  //     console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n  //     try {\r\n  //       if (dataItems && dataItems.length > 0) {\r\n  //         await fetchObjectDetails(dataItems);\r\n  //       } else {\r\n  //         console.warn(\"[handleDrop] No data items to process.\");\r\n  //       }\r\n  //     } catch (error) {\r\n  //       setLoading(false);\r\n  //       console.error(\"[Drop] Error in handleDrop:\", error);\r\n  //       console.log(\r\n  //         \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n  //       );\r\n  //       showErrorToast(MSG_UNEXPECTED_ERROR);\r\n  //     }\r\n  //   },\r\n  //   [fetchObjectDetails, showErrorToast]\r\n  // );\r\n\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n  \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // ✅ Validate item types: only allow \"Eng\" or \"CA\"\r\n          const allowedItemTypes = [\"Eng\", \"CA\"];\r\n          const invalidItems = dataItems.filter(\r\n            (item) => !allowedItemTypes.includes(item.type)\r\n          );\r\n  \r\n          if (invalidItems.length > 0) {\r\n            console.warn(\"[handleDrop] ❌ Invalid item types dropped:\", invalidItems);\r\n            showErrorToast(\"Only 'Eng' or 'CA' items can be dropped.\");\r\n            setLoading(false);\r\n            return;\r\n          }\r\n  \r\n          // ✅ Proceed with valid items\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\"[handleDrop] Error in handleDrop, setting loading to false\");\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  \r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useObsolescenceDropableArea;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst ObsolescenceWidgetToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            // onClick={() => {\r\n            //   if (isStateBlocked(state)) {\r\n            //     showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n            //     return;\r\n            //   }\r\n\r\n            //   if (type === \"Change Action\") {\r\n            //     setAddPlantPopup(true);\r\n            //   } else if (CAName) {\r\n            //     setAddPlantPopup(true); // Open the modal if CAName is present\r\n            //   } else if (state === \"RELEASED\") {\r\n            //     showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n            //   } else {\r\n            //     showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n            //   }\r\n            // }}\r\n          >\r\n            Obsolete\r\n          </button>\r\n        )}\r\n        {/* {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )} */}\r\n\r\n        {/* {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n        {!isMFGCA && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n        )} */}\r\n      </div>\r\n\r\n      {/* <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidgetToolbarNativeCta;\r\n\r\n\r\n\r\n\r\n\r\n// import { useState } from \"react\";\r\n// import Popup from \"../../components/Popup/Popup\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\n// import MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\n// const ObsolescenceWidgetToolbarNativeCta = ({\r\n//   onSave,\r\n//   state,\r\n//   selectedRows,\r\n//   tableData,\r\n//   onMassUpdate,\r\n//   type,\r\n//   latestRevision,\r\n//   droppedRevision,\r\n// }) => {\r\n//   const { showWarningToast } = useToast();\r\n//   const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n//   const handleSaveClick = () => {\r\n//     if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n//       showWarningToast(MSG_BOS_SAVE);\r\n//     } else {\r\n//       onSave();\r\n//     }\r\n//     // When save button is clicked, call onSave passed as prop\r\n//     // onSave is passed with tableData from parent\r\n//   };\r\n//   const handleMassUpdate = (column, value, scope) => {\r\n//     if (scope === \"selected\") {\r\n//       onMassUpdate(selectedRows, column, value);\r\n//     } else {\r\n//       onMassUpdate(tableData, column, value);\r\n//     }\r\n//   };\r\n//   const editableColumns = [\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column cta-absolute\">\r\n//       <div className=\"d-flex\">\r\n//         {/* <button\r\n//           className=\"btn btn-outline-success btn-lg m-2\"\r\n//           onClick={handleSaveClick}\r\n//         >\r\n//           Save\r\n//         </button> */}\r\n//         <button\r\n//           className=\"btn btn-outline-primary btn-lg m-2\"\r\n//           // onClick={() =>\r\n//           //   type !== \"Document\" && latestRevision !== droppedRevision\r\n//           //     ? showWarningToast(MSG_BOS_SAVE)\r\n//           //     : setShowDropdown((prev) => !prev)\r\n//           // }\r\n//         >\r\n//           Obsolete\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Dropdown appears below */}\r\n//       {showDropdown && (\r\n//         <div className=\"mt-2\">\r\n//           <MassUpdateDropdown\r\n//             editableColumns={editableColumns}\r\n//             selectedRows={selectedRows}\r\n//             onApplyUpdate={handleMassUpdate}\r\n//             valueOptions={[\"Yes\", \"No\"]}\r\n//             onClose={() => setShowDropdown(false)}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ObsolescenceWidgetToolbarNativeCta;\r\n\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const { handleDrop } = useObsolescenceDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./ObsolescenceWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setObsolescenceData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./ObsolescencedataHelper\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\nimport useObsolescenceWidget from \"../../hooks/useObsolescenceWidget\";\r\n\r\nconst ObsolescenceWidget = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = useObsolescenceDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        showSuccessToastWithProgress(\r\n          \"Job has been initiated\"\r\n        );\r\n        await handleRemoveData(\r\n          allPlants,\r\n          removedTitles,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type\r\n        );\r\n      } else {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable || CAItemDetailsTable.length === 0) return;\r\n\r\n  //   // ✅ Always derive MFGCA from item MBOM, even if type is not \"Change Action\"\r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n\r\n  //   if (type === \"Change Action\") {\r\n  //     const isAnyMFGCA = CAItemDetailsTable.some(\r\n  //       (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //     );\r\n\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFGCA,\r\n  //     }));\r\n\r\n  //     if (isAnyMFGCA) {\r\n  //       setIsRemoveMode(false); // 🚀 Immediately set RemoveMode false after confirming MFGCA\r\n  //     }\r\n  //   }\r\n  // }, [CAItemDetailsTable, type, dispatch]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setObsolescenceData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress,\r\n        handleReset\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"ObsolescenceWidget\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <ObsolescenceWidgetToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Obsolescence_Attribute_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidget;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useMemo, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\n// import { Image } from \"react-bootstrap\";\r\n// import \"./ObsolescenceWidget.css\";\r\n// import Loader from \"../../components/Loader/Loader\";\r\n// import ReusableTable from \"../../components/Table/Table\";\r\n// import CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setIsDropped,\r\n//   setPlantObjectData,\r\n// } from \"../../store/droppedObjectSlice\";\r\n// import { getCardData, getTableData, tableColumns } from \"./ObsolescencedataHelper\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\n// import { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\n// import useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n// import ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\n// import { fetchData } from \"../../utils/helpers\";\r\n\r\n// const ObsolescenceWidget = () => {\r\n//   const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n//   const [tableKey, setTableKey] = useState(0);\r\n//   const [tableData, setTableData] = useState([]);\r\n//   const [isTableLoading, setIsTableLoading] = useState(false);\r\n//   const [screenLoader, setScreenLoader] = useState(false);\r\n//   const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n//   const [specData, setSpecData] = useState([]);\r\n//   const [selectableRows, setSelectableRows] = useState([]);\r\n//   const dispatch = useDispatch();\r\n//   const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n//   useEffect(() => {\r\n//     if (specData.length) {\r\n//       setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n//     }\r\n//   }, [specData]);\r\n\r\n//   const handleSave = async () => {\r\n//     console.log(\"Table Data is:\", tableData);\r\n//     setScreenLoader(true);\r\n//     console.log(\"Type of Parent:\", type);\r\n//     let parentData = [];\r\n//     let ChildNameKey;\r\n//     let ChildRevKey;\r\n//     let ChildStateKey;\r\n//     let ChildIdKey;\r\n//     if (type === \"Document\") {\r\n//       parentData = {\r\n//         SpecName: droppedObjectData.cardData.Name,\r\n//         SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n//         SpecState: droppedObjectData.cardData[\"Maturity State\"],\r\n//         SpecID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK CARD DATA\r\n//         // SpecState need to be added.\r\n//       };\r\n//       ChildNameKey = \"ItemName\";\r\n//       ChildRevKey = \"ItemRevision\";\r\n//       ChildStateKey = \"ItemState\";\r\n//       ChildIdKey = \"ItemID\";\r\n//     } else {\r\n//       console.log(\"It's a physical Product\");\r\n//       parentData = {\r\n//         ItemName: droppedObjectData.cardData.Name,\r\n//         ItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n//         ItemState: droppedObjectData.cardData[\"Maturity State\"],\r\n//         ItemID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK THIS\r\n//         // need to add Maturity State as Item State and ItemId is Dropped Revision Id.\r\n//       };\r\n//       ChildNameKey = \"SpecName\";\r\n//       ChildRevKey = \"SpecRevision\";\r\n//       ChildStateKey = \"SpecState\";\r\n//       ChildIdKey = \"SpecID\";\r\n//     }\r\n\r\n//     const formattedData = tableData.map((item) => {\r\n//       // Find matching data in bosSpecDocument\r\n//       let matchingData = bosSpecDocument.find(\r\n//         (data) =>\r\n//           data.childTitle === item.Title && data.childRevision === item.Revision\r\n//       );\r\n\r\n//       return {\r\n//         [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n//         [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n//         [ChildStateKey]: matchingData ? matchingData.childState : null, // need to check this\r\n//         [ChildIdKey]: matchingData ? matchingData.ID : null, //\r\n//         // something needs to be done here\r\n//         // [ChildStateKey]:\r\n//         ...parentData, // Merge Parent Data\r\n//         PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n//         PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n//         WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n//         PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n//         \"SAP/JDE\": item[\"SAP/JDE\"],\r\n//       };\r\n//     });\r\n\r\n//     formattedData.sort((a, b) => {\r\n//       if (a.SpecName !== b.SpecName) {\r\n//         return a.SpecName.localeCompare(b.SpecName);\r\n//       }\r\n//       return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n//     });\r\n\r\n//     console.log(\"Formatted Data:\", formattedData);\r\n//     const saveURL =\r\n//       \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n//     const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n//     console.log(\"the response from node API is:\", response);\r\n//     if (response.status === 200) {\r\n//       showSuccessToast(MSG_SAVE_SUCCESS);\r\n//       setSpecData(tableData);\r\n//       setScreenLoader(false);\r\n//     } else {\r\n//       showErrorToast(MSG_SAVE_FAILURE);\r\n//       setScreenLoader(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleMassUpdate = async (data, column, value) => {\r\n//     console.log(\"Data when the Mass Update is Clicked:\", data);\r\n//     console.log(\"Columns to Change:\", column);\r\n//     console.log(\"Value after change:\", value);\r\n\r\n//     const updatedData = data.map((row) => ({\r\n//       ...row,\r\n//       [column]: value, // Update the specified column with the new value\r\n//     }));\r\n\r\n//     console.log(\"Updated Data is:\", updatedData);\r\n//     console.log(\"Table Data is:\", tableData);\r\n\r\n//     // Merge updatedData into tableData based on matching Title & Revision\r\n//     const mergedData = tableData.map((row) => {\r\n//       const updatedRow = updatedData.find(\r\n//         (updated) =>\r\n//           updated.Title === row.Title && updated.Revision === row.Revision\r\n//       );\r\n\r\n//       return updatedRow ? updatedRow : row; // Use updated row if found, else keep original row\r\n//     });\r\n\r\n//     console.log(\"Merged Data:\", mergedData);\r\n//     updateTableData(mergedData);\r\n//   };\r\n\r\n//   console.log(\"Table Data after Adding:\", tableData);\r\n//   const selectedTableRows = useSelector(\r\n//     (state) => state.droppedObject.selectedTableRows\r\n//   );\r\n//   // Access Redux store\r\n//   const droppedObjectData = useSelector(\r\n//     (state) => state.droppedObject.droppedObjectData\r\n//   );\r\n//   console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n//   const loadingParentDetails = useSelector(\r\n//     (state) => state.droppedObject.loadingParentDetails\r\n//   );\r\n//   console.log(\"Parents Loading State:\", loadingParentDetails);\r\n//   const proposedChanges = useSelector(\r\n//     (state) => state.droppedObject.plantObjectData.proposedChanges\r\n//   );\r\n//   console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n//   console.log(\"Bos data in BOS Widget is:\", bosData);\r\n//   const bosSpecDocument = useSelector(\r\n//     (state) => state.droppedObject.BOSObjectData.specDocument\r\n//   );\r\n//   console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n//   const updateTableData = (updatedData) => {\r\n//     const newDataWithChanges = updatedData.map((newItem) => {\r\n//       const originalItem = specData.find(\r\n//         (oldItem) =>\r\n//           oldItem.Title === newItem.Title &&\r\n//           oldItem.Revision === newItem.Revision\r\n//       );\r\n\r\n//       if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n//       // Track changed cells\r\n//       const changedCells = {};\r\n//       Object.keys(newItem).forEach((key) => {\r\n//         if (newItem[key] !== originalItem[key]) {\r\n//           changedCells[key] = true; // Mark this cell as changed\r\n//         }\r\n//       });\r\n\r\n//       return { ...newItem, changedCells };\r\n//     });\r\n\r\n//     setTableData(newDataWithChanges);\r\n//   };\r\n\r\n//   console.log(\"Table Data is:\", tableData);\r\n//   useEffect(() => {\r\n//     if (tableData.length >= 0) {\r\n//       setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n//     }\r\n//   }, [tableData]); // Runs whenever tableData changes\r\n//   if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n//     var state = droppedObjectData.cardData[\"Maturity State\"];\r\n//     var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     if (!isDropped) {\r\n//       initializeDroppableArea();\r\n//     }\r\n//   }, [isDropped, initializeDroppableArea]);\r\n//   useEffect(() => {\r\n//     setIsTableLoading(loadingParentDetails);\r\n//   }, [loadingParentDetails]);\r\n\r\n//   const newTableData = useMemo(\r\n//     () => getTableData(bosSpecDocument, type),\r\n//     [bosSpecDocument, type]\r\n//   );\r\n//   useEffect(() => {\r\n//     setSpecData(newTableData);\r\n//   }, [newTableData]);\r\n\r\n//   useEffect(() => {\r\n//     if (newTableData.length >= 0) {\r\n//       console.log(\"New Table Data:\", newTableData);\r\n//       setTableData(newTableData);\r\n//       setTableKey((prevKey) => prevKey + 1); // Update table key\r\n//     }\r\n//   }, [newTableData]);\r\n//   const cardData = useMemo(\r\n//     () => getCardData(droppedObjectData),\r\n//     [droppedObjectData]\r\n//   );\r\n//   console.log(cardData);\r\n//   useEffect(() => {\r\n//     setIsCardDataAvailable(!!cardData);\r\n//   }, [cardData]);\r\n//   const columns = useMemo(\r\n//     () =>\r\n//       tableColumns(\r\n//         type,\r\n//         droppedObjectData?.cardData[\"Latest Revision\"],\r\n//         droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//       ),\r\n//     [type, droppedObjectData?.cardData]\r\n//   );\r\n\r\n//   const handleHomeClick = () => {\r\n//     initializeDroppableArea(); // Reset the droppable area\r\n//     dispatch(setIsDropped(false));\r\n//     dispatch(\r\n//       setDroppedObjectData({\r\n//         cardData: {},\r\n//         parentDetails: [],\r\n//         versions: [],\r\n//         initialDraggedData: [],\r\n//       })\r\n//     ); // Clear Redux state\r\n//     dispatch(\r\n//       setPlantObjectData({\r\n//         allPlants: [],\r\n//         initialAssignedPlants: [],\r\n//         uniquePlants: [],\r\n//         productChildren: [],\r\n//         CAName: false,\r\n//         headers: {},\r\n//       })\r\n//     );\r\n//     setTableData([]); // Clear local table data\r\n//     setIsCardDataAvailable(false);\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {screenLoader && (\r\n//         <div className=\"loading-overlay\">\r\n//           <Loader />\r\n//           <p>Saving...</p>\r\n//         </div>\r\n//       )}\r\n//       {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n//       {loading && <Loader />}\r\n//       {isDropped && (\r\n\r\n//         <>\r\n//          {/* Show initial loader when loading is true */}\r\n//          {loading && <Loader />}\r\n//           <div className=\"content-wrapper py-3 border-bottom\">\r\n//             <div className=\"d-flex \">\r\n//               <div className=\" p-0 pt-4\">\r\n//                 <Image\r\n//                   src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n//                   alt=\"home-icon\"\r\n//                   className=\"home-icon\"\r\n//                   onClick={handleHomeClick}\r\n//                 />\r\n//               </div>\r\n//               {cardData && (\r\n//                 <CardWithDragAndDrop data={cardData} widgetType=\"ObsolescenceWidget\" />\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {isTableLoading ? (\r\n//             <div className=\"loading-indicator mt-5\">\r\n//               <Loader />\r\n//             </div>\r\n//           ) : (\r\n//             <>\r\n//               <div className=\"wrapper-cta\">\r\n//                 <ObsolescenceWidgetToolbarNativeCta\r\n//                   onSave={handleSave}\r\n//                   type={type}\r\n//                   latestRevision={\r\n//                     droppedObjectData?.cardData[\"Latest Revision\"]\r\n//                   }\r\n//                   droppedRevision={\r\n//                     droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//                   }\r\n//                   selectedRows={selectedTableRows}\r\n//                   state={state}\r\n//                   tableData={selectableRows}\r\n//                   onMassUpdate={handleMassUpdate}\r\n//                 />\r\n//                 <ReusableTable\r\n//                   key={tableKey}\r\n//                   data={tableData}\r\n//                   columns={columns}\r\n//                   meta={{ updateTableData }}\r\n//                   type={type}\r\n//                   latestRevision={\r\n//                     droppedObjectData?.cardData[\"Latest Revision\"]\r\n//                   }\r\n//                   droppedRevision={\r\n//                     droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//                   }\r\n//                   widgetType=\"Obsolescence_Attribute_Widget\"\r\n//                   onSelectableRowsChange={setSelectableRows}\r\n//                 />\r\n//               </div>\r\n//             </>\r\n//           )}\r\n//         </>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n// export default ObsolescenceWidget;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useObsolescenceDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport ObsolescenceWidget from \"./ObsolescenceWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <ObsolescenceWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["PlantRenderer","_ref","plants","itemId","isRemoveMode","handleRemovePlant","console","log","length","_jsx","_Fragment","children","map","plant","_jsxs","style","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","size","cursor","marginLeft","onClick","PlantID","getTableData","tableData","type","CAData","data","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Change","CAName","title","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","uniqueColumns","accessorKey","header","useObsolescenceWidget","showErrorToast","useToast","dispatch","useDispatch","ENOVIA_BASE_URL","process","email","window","widget","getValue","handleObsolescenceWidget","async","collabSpace","state","objectId","parentName","parentRevision","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","concat","parentDirection","urlObjWAF","ChildObject","callEnoviaWebService","status","output","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","sSpec","id","dataelements","trim","secondaryTitle","revision","stateNLS","name","revisionBody","forEach","child","body","identifier","source","relativePath","push","RevisionUrl","response","convertRevisionToNumber","rev","test","parseInt","number","i","charCodeAt","results","item","latestVersion","versions","reduce","latest","current","doc","some","version","_objectSpread","isLatestRevision","SpecName","SpecRevision","Items","obj","ItemRevision","Specifications","fetchData","mergedData","spec","matchingDoc","find","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","warn","setSpecDocument","error","useObsolescenceDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","allowedItemTypes","invalidItems","filter","includes","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","isMFGCA","showWarningToast","showSuccessToast","addPlantPopup","setAddPlantPopup","useState","useRef","className","DragAndDropComponent","performSearch","useInterComSearch","Image","width","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","ObsolescenceWidget","showSuccessToastWithProgress","showErrorToastWithProgress","useToastWithProgress","isAddingPlant","setIsAddingPlant","validatedData","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","isFileInputDisabled","setIsFileInputDisabled","isCreateButtonDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","securityContext1","fileInputRef","plantId","extractPlantData","plantData","row","itemName","plantName","selectedTableRows","droppedObjectData","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAHeaders","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","replace","sourceData","assignedTablePlants","Set","flatMap","_item$Plant","p","uniqueTablePlants","updateTableData","updatedData","useEffect","prevKey","initialDraggedData","_droppedObjectData$in5","_droppedObjectData$in6","hasMBOM","items","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in7","_droppedObjectData$in8","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","classitem","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","result","saveData","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","split","msg","userSelect","position","paddingRight","handleCopy","textToCopy","join","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","index","formattedFinalMessage","autoClose","finalobj","ErrorObj","Object","keys","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","useMemo","uniqueTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","EIN","getCardData","columns","tableColumns","cell","_ref2","original","handleReset","value","Loader","flexDirection","justifyContent","handleFileInputChange","event","handleFileChange","finally","handleSubmit","processManufacturingCA","handleHomeClick","setIsDropped","parentDetails","setObsolescenceData","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","ObsolescenceWidgetToolbarNativeCta","prev","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","matchedPlant","existsInRedux","_droppedObjectData$in3","_droppedObjectData$in4","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","_ref3","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","setCAItemDetails","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","store","getState","refreshWidgetData","_droppedObjectData$in","_droppedObjectData$in2","selectedTitles","removedTitles","prevUniquePlants","handleRemoveData","ReusableTable","ContentErrorsModal","show","onHide","errors","_droppedObjectData$in9","_droppedObjectData$in10","_droppedObjectData$in11","objectData","payload","CATitle","CAId","CAOrganization","organization","CACollabSpace","CAOwner","caDetails","ca","_excluded2","PlantType","_droppedObjectData$in12","_droppedObjectData$in13","_droppedObjectData$in14","ItemMBOM","_originalItem$ItemPla","ci","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}