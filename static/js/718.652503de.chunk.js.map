{"version":3,"file":"static/js/718.652503de.chunk.js","mappings":"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","sources":["services/api/refreshService.js","hooks/useRevisions.js","components/DragAndDrop/DragAndDropStandAlone.jsx","components/Card/cardwithdraganddrop.jsx","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","components/SearchInput/SearchInput.jsx","services/api/PlantAssignment/fetchCsrfService.js","hooks/usePlantAssignment.js","hooks/useToast.js","components/Button/Button.jsx","pages/plantAssignment/dataHelpers.js","services/api/PlantAssignment/searchCAService.js","services/api/PlantAssignment/getRouteDetails.js","services/api/PlantAssignment/assignedPlantService.js","hooks/useBOSWidget.js","hooks/useBOSDropableArea.js","hooks/useInterComSearch.js","components/List/List.jsx","components/Card/Card.jsx","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/userGroupService.js","components/Loader/Loader.js","hooks/usePlantDropableArea.js","hooks/useDroppableArea.js","services/api/PlantAssignment/CADetailService.js","services/api/PlantAssignment/allPlantSevice.js"],"sourcesContent":["export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n","import useToast from \"../hooks/useToast\";\r\n\r\nimport api from \"../utils/api\"; // Import axios instance\r\nimport { MSG_REPLACE_SUCCESS, MSG_REPLACE_ERROR } from \"../utils/toastMessages\";\r\n\r\nconst useRevisions = () => {\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const fetchRevisionsAndParents = async (\r\n    objectId,\r\n    objectType,\r\n    relativePath\r\n  ) => {\r\n    if (!relativePath) {\r\n      console.error(\"[Fetch Revisions] ❌ Missing relative path.\");\r\n      return;\r\n    }\r\n\r\n    const parentURL = `/revFloat/getParents`;\r\n\r\n    try {\r\n      // Use the axios instance to make the POST request\r\n      const response = await api.post(parentURL, {\r\n        data: {\r\n          id: objectId,\r\n          type: objectType,\r\n          relativePath: relativePath,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const parentDetails = response.data;\r\n\r\n        // 🚀 Return data instead of dispatching\r\n        return parentDetails;\r\n      } else {\r\n        throw new Error(\r\n          `[Fetch Revisions] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Fetch Revisions] ❌ Error occurred:\", error);\r\n      return null; // Ensure it returns null on error\r\n    }\r\n  };\r\n\r\n  const replaceRevisions = async (selectedParents, droppedData, userEmail) => {\r\n    const parentURL = `/revFloat/floatRevisions`; // Use relative path for axios\r\n\r\n    try {\r\n      // Make the POST request to the replacement API\r\n      const response = await api.post(parentURL, {\r\n        SelectedParents: selectedParents,\r\n        DroppedData: droppedData,\r\n        userEmail: userEmail,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful replacement\r\n        console.log(\"Replacement successful:\", response.data);\r\n        showSuccessToast(MSG_REPLACE_SUCCESS); // Show success toast\r\n        // You might want to update the Redux store or refetch data here\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(\r\n          `[Replacement API] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during replacement:\", error);\r\n      showErrorToast(MSG_REPLACE_ERROR); // Show error toast\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return { fetchRevisionsAndParents, replaceRevisions };\r\n};\r\n\r\nexport default useRevisions;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropStandAlone = ({ widgetType }) => {\r\n  const plantDroppable = usePlantDropableArea();\r\n  const bosDropable = useBOSDropableArea();\r\n  const defaultDroppable = useDroppableArea();\r\n\r\n  const { initializeDroppableArea } =\r\n    widgetType === \"PlantAssignment\"\r\n      ? plantDroppable\r\n      : widgetType === \"bosWidget\"\r\n      ? bosDropable\r\n      : defaultDroppable;\r\n  const hasInitializedDroppable = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!hasInitializedDroppable.current) {\r\n      // console.log(\"[DragAndDrop] 🔄 Initializing droppable area...\");\r\n      initializeDroppableArea();\r\n      hasInitializedDroppable.current = true; // ✅ Prevent multiple calls\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropStandAlone;\r\n","import React, { useState } from \"react\";\r\nimport DragAndDropStandAlone from \"../DragAndDrop/DragAndDropStandAlone\";\r\nimport CardComponent from \"./Card\";\r\n\r\nconst CardWithDragAndDrop = ({ data, widgetType }) => {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const handleDragStart = () => {\r\n    // console.log(\"handleDragStart called\");\r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleDragEnd = () => {\r\n    // console.log(\"handleDragEnd called\");\r\n    // console.log(\"Before setIsDragging(false) - isDragging:\", isDragging);\r\n    setIsDragging(false);\r\n    // console.log(\"After setIsDragging(false) - isDragging:\", isDragging);\r\n  };\r\n  return (\r\n    <div className={`card-with-drag-and-drop ${isDragging ? \"dragging\" : \"\"}`}>\r\n      <DragAndDropStandAlone widgetType={widgetType} />\r\n      <CardComponent\r\n        data={data}\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardWithDragAndDrop;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  type,\r\n  widgetType,\r\n  latestRevision,\r\n  droppedRevision,\r\n  onSelectableRowsChange,\r\n  disableSelection = false, // New prop to disable selection\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n    \r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\" && widgetType !== \"Plant_Assignment_Widget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => {\r\n        const isSelectable = enableRowSelection(row.original); // Get row's selectability status\r\n\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            disabled={!isSelectable} // Disable non-selectable rows\r\n            style={{\r\n              cursor: isSelectable ? \"pointer\" : \"not-allowed\", // Block cursor for non-selectable rows\r\n              opacity: isSelectable ? 1 : 0.5, // Make disabled checkboxes faded\r\n            }}\r\n            {...{\r\n              checked: row.getIsSelected(),\r\n              onChange: row.getToggleSelectedHandler(),\r\n            }}\r\n          />\r\n        );\r\n      },\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Jatin added this for testing, if needs to change and make it work in the parent component, then will change this.\r\n  useEffect(() => {\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      const selectableRows = tableData.filter(enableRowSelection);\r\n      onSelectableRowsChange(selectableRows); // Notify parent\r\n    }\r\n  }, [widgetType, tableData, onSelectableRowsChange]);\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const enableRowSelection = (row) => {\r\n    if (widgetType === \"Bos_Attribute_Widget\" && type === \"Document\") {\r\n      return row.IsLatest === \"TRUE\";\r\n    }\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      return !latestRevision || latestRevision === droppedRevision;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange:setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n\r\n    // Earlier it was\r\n    //  enableRowSelection: true,\r\n\r\n    enableRowSelection: (row) => enableRowSelection(row.original),\r\n\r\n    defaultColumn: {\r\n      size: 170,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } \r\n    else if (widgetType === \"Obsolescence_Attribute_Widget\") {\r\n      console.log(\"Exporting for Obsolescence_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    }else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nimport { getAssignedClasses, getItemDetails, getLatestRevision, getScopedItms } from \"../pages/plantAssignment/dataHelpers\";\r\n\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async () => {\r\n          const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    const [ItemPlants, Iteminfo] = await Promise.all([\r\n                      getAssignedClasses(ItemId, headers),\r\n                      getItemDetails(ItemId, ItemType, headers),\r\n                    ]);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n        };\r\n\r\n        // Run both functions in parallel\r\n        await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n\r\n\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../../utils/helpers\";\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport async function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nexport async function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nexport async function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nexport async function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const SearchCA = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const caID = searchResponse.changeAction[0]?.identifier;\r\n\r\n    console.log(\"Response From 1st Call\", caID);\r\n\r\n    if (caID) {\r\n      // 2nd API call to fetch Change Action details\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${caID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n\r\n      console.log(\"Response From 2nd Call\", CAresponse);\r\n\r\n      if (CAresponse) {\r\n        // Use for...of for async handling in loop\r\n        for (const item of CAresponse.isFlowDownOf || []) {\r\n          if (item.type === \"Change Action\") {\r\n            const parentCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}?$fields=proposedChanges,flowDown`;\r\n\r\n            try {\r\n              // 3rd API call to fetch Parent Change Action details\r\n              const parentCAResponse = await fetchData(parentCAUrl);\r\n\r\n              console.log(\"Response From 3rd Call\", parentCAResponse);\r\n\r\n              if (parentCAResponse) {\r\n                CADetails.CAAtt.push({\r\n                  CATitle: parentCAResponse.title,\r\n                  CAState: parentCAResponse.state,\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error fetching parent CA data:\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        CADetails[\"MCOState\"] = CAresponse.state;\r\n        CADetails[\"MCOTitle\"] = CAresponse.title;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }    \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useBOSWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useBOSWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleBOSWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useBOSWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useBOSWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source: `${ENOVIA_BASE_URL}`,\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          response.output.results.forEach((item) => {\r\n            // Find the latest version based on the 'revision' key\r\n            const latestVersion = item.versions.reduce((latest, current) => {\r\n              return convertRevisionToNumber(current.revision) >\r\n                convertRevisionToNumber(latest.revision)\r\n                ? current\r\n                : latest;\r\n            });\r\n\r\n            // Update 'isLatestRevision' for only the matching document\r\n            ChildObjectDocument = ChildObjectDocument.map((doc) => {\r\n              if (item.versions.some((version) => version.id === doc.id)) {\r\n                return {\r\n                  ...doc,\r\n                  isLatestRevision:\r\n                    doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n                };\r\n              }\r\n              return doc;\r\n            });\r\n          });\r\n\r\n          // Function to convert revision to a comparable numeric value\r\n          function convertRevisionToNumber(rev) {\r\n            if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n            let number = 0;\r\n            for (let i = 0; i < rev.length; i++) {\r\n              number =\r\n                number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n            }\r\n            return number; // Handles A-Z, AA-ZZ revisions\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useBOSWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useBOSWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useBOSWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useBOSWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleBOSWidget };\r\n};\r\n\r\nexport default useBOSWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useBOSWidget from \"./useBOSWidget\";\r\n\r\nconst useBOSDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleBOSWidget } = useBOSWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleBOSWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleBOSWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useBOSDropableArea;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./List.css\";\r\nimport { makeDraggable } from \"../../utils/helpers\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst List = ({ data, isColumn, onDragStart, onDragEnd }) => {\r\n  const titleRef = useRef(null);\r\n  const initialDraggedData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData.initialDraggedData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (titleRef.current && initialDraggedData) {\r\n      makeDraggable(\r\n        titleRef.current,\r\n        initialDraggedData,\r\n        onDragStart,\r\n        onDragEnd\r\n      );\r\n    }\r\n  }, [data, initialDraggedData, onDragStart, onDragEnd]);\r\n\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className={`d-flex ${isColumn ? \"flex-column\" : \"flex-row\"}`}>\r\n      <h5\r\n        ref={titleRef}\r\n        className={`mb-1 text-start title ${!isColumn ? \"me-2\" : \"\"}`}\r\n      >\r\n        {data.title}\r\n      </h5>\r\n      <ul\r\n        className={`list-group d-flex flex-row flex-sm-row flex-wrap justify-content-between pb-3 pb-md-0 ${\r\n          !isColumn ? \"w-75\" : \"\"\r\n        }`}\r\n      >\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ps-0 pb-0 ${\r\n            !isColumn ? \"d-flex flex-row justify-content-around\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p>\r\n            <b>Type:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.type}>\r\n              {data.type}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <b>Owner:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.owner}>\r\n              {data.owner}\r\n            </span>\r\n          </p>\r\n          {isColumn && (\r\n            <p>\r\n              <b>Maturity State:</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Maturity State\"]}>\r\n                {data[\"Maturity State\"]}\r\n              </span>\r\n            </p>\r\n          )}\r\n        </li>\r\n        {isColumn && (\r\n          <li\r\n            className=\"list-group-item flex-grow-1 text-start mx-0 pt-0\"\r\n            style={{ border: \"0\", paddingLeft: \"0\" }}\r\n          >\r\n            <p>\r\n              <b>Dropped Revision :</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Dropped Revision\"]}>\r\n                {data[\"Dropped Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Latest Released Revision:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Latest Released Revision\"]}\r\n              >\r\n                {data[\"Latest Released Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Collabspace:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Collaborative Space Title\"]}\r\n              >\r\n                {data[\"Collaborative Space Title\"]}\r\n              </span>\r\n            </p>\r\n          </li>\r\n        )}\r\n\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ${\r\n            !isColumn ? \"d-flex flex-row\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\", paddingLeft: \"0\" }}\r\n        >\r\n          {data.type !== \"Document\" && (\r\n            <>\r\n              <p>\r\n                <b>CAD Format:</b>{\" \"}\r\n                <span className=\"list-text\" title={data[\"CAD Format\"]}>\r\n                  {data[\"CAD Format\"]}\r\n                </span>\r\n              </p>\r\n              <p>\r\n                <b>EIN:</b>{\" \"}\r\n                <span className=\"list-text\" title={data.EIN}>\r\n                  {data.EIN}\r\n                </span>\r\n              </p>\r\n            </>\r\n          )}\r\n        </li>\r\n\r\n        <div className=\"d-none d-md-flex align-items-stretch\">\r\n          <div className=\"vr\"></div>\r\n        </div>\r\n\r\n        {/* Horizontal divider after third li on small screens */}\r\n        <div className=\"d-flex d-md-none w-100\">\r\n          <hr className=\"w-100\" />\r\n        </div>\r\n\r\n        <li\r\n          className=\"list-group-item flex-grow-1 text-start mx-0\"\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p className=\"description-container\" title={data.Description}>\r\n            {data.Description}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { Image, Card, CardBody } from \"react-bootstrap\";\r\nimport List from \"../List/List\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CardComponent = ({ data, onDragStart, onDragEnd }) => {\r\n  const [isColumn, setIsColumn] = useState(true);\r\n\r\n  const toggleFlexDirection = () => {\r\n    setIsColumn(!isColumn);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"d-flex flex-row mt-4 border-0 \" style={{ width: \"100%\" }}>\r\n      <div className=\"pb-3 d-none d-md-block me-5 ms-4\">\r\n        <Card.Img\r\n          className={`${\r\n            !isColumn ? \"image-resize img-thumbnail\" : \"img-thumbnail\"\r\n          } `}\r\n          src={data.imageURL} // Use dynamic image URL from data\r\n          alt=\"Card image\"\r\n        />\r\n      </div>\r\n      <CardBody className={`${!isColumn ? \"p-0 layout-change\" : \"p-0\"} `}>\r\n        <List\r\n          data={data}\r\n          isColumn={isColumn}\r\n          onDragStart={onDragStart}\r\n          onDragEnd={onDragEnd}\r\n        />\r\n      </CardBody>\r\n      <button\r\n        className=\"me-2 p-0 btn btn-link accordion-toggle\"\r\n        onClick={toggleFlexDirection}\r\n      >\r\n        {/* <FontAwesomeIcon\r\n          icon={faAngleUp}\r\n          size=\"xs\"\r\n          style={{ color: \"#212121\" }}\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        /> */}\r\n\r\n        <Image\r\n          src=\"https://khanfarzan17.github.io/tedting-revision-float/images/arrow.png\"\r\n          alt=\"downArrow\"\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        />\r\n      </button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default usePlantDropableArea;","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction, setLoading } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useRevisions from \"./useRevisions\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useDroppableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Fetch Revisions and Parents in parallel\r\n          const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n          const [revisionParentData] = await Promise.all([\r\n            fetchRevisionsAndParents(\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              relativePath\r\n            ),\r\n          ]);\r\n          // Dispatch all updates together (batching updates)\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n              parentDetails: revisionParentData || [],\r\n            })\r\n          );\r\n          console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useDroppableArea;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n            const CAName = itm[\"ds6w:label\"];\r\n            if (status !== \"Complete\") {\r\n              let url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n \r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n \r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n \r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n \r\n              if(resObejct){\r\n                CADetails[\"CAName\"] = CAName;\r\n                CADetails[\"CAStatus\"] = status;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n"],"names":["refreshWidgetData","async","dataItems","handleDrop","console","log","length","Error","error","warn","useRevisions","showSuccessToast","showErrorToast","useToast","fetchRevisionsAndParents","objectId","objectType","relativePath","response","api","post","data","id","type","status","concat","replaceRevisions","selectedParents","droppedData","userEmail","SelectedParents","DroppedData","MSG_REPLACE_SUCCESS","success","MSG_REPLACE_ERROR","message","_ref","widgetType","plantDroppable","usePlantDropableArea","bosDropable","useBOSDropableArea","defaultDroppable","useDroppableArea","initializeDroppableArea","hasInitializedDroppable","useRef","useEffect","current","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","isDragging","setIsDragging","useState","DragAndDropStandAlone","CardComponent","onDragStart","handleDragStart","onDragEnd","handleDragEnd","header","columns","table","isFixed","column","isPinned","getState","columnPinning","left","includes","sortable","useSortable","disabled","attributes","listeners","setNodeRef","transform","opacity","position","top","CSS","Transform","toString","transition","getSize","zIndex","cursor","backgroundColor","ref","_objectSpread","onClick","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","title","getValue","color","fontWeight","getWidgetStorageKey","editable","meta","latestRevision","droppedRevision","onSelectableRowsChange","disableSelection","dispatch","useDispatch","tableData","setTableData","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","isScrolled","setIsScrolled","handleScroll","e","target","scrollTop","tableContainer","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","onChange","getToggleAllRowsSelectedHandler","_ref3","row","isSelectable","enableRowSelection","original","getIsSelected","getToggleSelectedHandler","_ref4","value","handleEditCell","rowIndex","columnId","updatedData","index","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","selectableRows","filter","IsLatest","useReactTable","state","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","defaultColumn","size","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","columnSizingInfo","columnSizing","CustomButton","variant","handleSelectAll","text","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","event","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","onSearch","searchText","setSearchText","inputRef","FontAwesomeIcon","icon","faMagnifyingGlass","handleSearchIconClick","trim","InputGroup","Form","Control","newSearchText","onKeyDown","key","placeholder","Button","handleClearClick","focus","fetchCsrfToken","securityContext1","window","widget","WAFData","loadWAFData","csrfURL","process","Promise","resolve","reject","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","name","csrfValue","securityContextHeader","securityContextValue","usePlantAssignment","email","handlePlantAssignment","collabSpace","setParentDetailsLoading","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","isMFGCA","fetchChangeActionData","CAURL","callEnoviaWebService","output","realizedChanges","realizedChange","where","identifier","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","sLatestID","getLatestRevision","mfgDetails","getScopedItms","undefined","_Iteminfo$member$","_Iteminfo$member$$dse","ItemPlants","Iteminfo","all","getAssignedClasses","getItemDetails","ItemState","member","ItemTitle","ItemMBOM","EMR_hasMBOM","err","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","getUserGroupCollab","allCollabSpaces","plants","fetchAssignedPlants","setPlantObjectData","plantData","setHeaders","getProductChildren","fetchProductChildren","setProductChildren","getCaDetails","fetchCADetails","setCAName","setProposedChanges","setCAData","CAData","showToast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","Bounce","progress","otherOptions","_objectWithoutProperties","_excluded","toast","options","arguments","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","imageSrc","props","marginRight","PlantRenderer","itemId","isRemoveMode","handleRemovePlant","plant","display","alignItems","PlantName","PlantERPStatus","AiOutlineClose","marginLeft","PlantID","getCardData","droppedObjectData","cardData","item","Title","Type","owner","Owner","Description","imageURL","EIN","getTableData","ItemName","Plant","Change","CAName","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","getUniqueTableData","uniqueData","tableColumns","uniqueColumns","processErrorObj","errorObj","assignedPlant","updatedAssignedClasses","uniquePlant","formattedFinalMessage","finalMessage","messageList","msg","userSelect","paddingRight","handleCopy","textToCopy","navigator","clipboard","writeText","right","background","border","fontSize","FaRegCopy","plantIdData","url","itemResponse","ClassificationAttributes","classification","classId","ClassID","plantName","erpStatus","Attributes","attribute","Body","source","result","results","ancestors","ancestor","ScopeEngItem","GetFlowDownCADetails","flowDownCA","CADetails","CAAtt","ENOVIA_BASE_URL","fetchData","urlObjWAF","searchResponse","routeData","find","RouteID","RouteStatus","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","CATitle","CAState","libraryDataURL","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","classItem","parentClass","replace","obj","promiseArray","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","allClass","assigned","initialAssignedPlants","uniquePlants","useBOSWidget","handleBOSWidget","parentName","parentRevision","baseURL","parentDirection","ChildObject","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","sSpec","dataelements","secondaryTitle","revision","stateNLS","revisionBody","child","body","RevisionUrl","convertRevisionToNumber","rev","test","parseInt","number","charCodeAt","latestVersion","versions","reduce","latest","doc","version","isLatestRevision","SpecName","SpecRevision","Items","ItemRevision","Specifications","mergedData","spec","matchingDoc","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","setSpecDocument","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","setDroppedObjectData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","MSG_UNEXPECTED_ERROR","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","useInterComSearch","socket","setSocket","InterCom","setInterCom","interComInstance","loadInterCom","loadData","disconnect","performSearch","searchOpts","onObjectsSelected","_window$widget","socketName","Date","toISOString","newSocket","Socket","dispatchRetryInternal","subscribeServer","widgetId","finalSearchOpts","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","isColumn","titleRef","initialDraggedData","makeDraggable","paddingLeft","setIsColumn","Card","Img","CardBody","List","toggleFlexDirection","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","toLowerCase","classesurl","classResponse","classIds","flatMap","_member$Classificatio","classes","objectID","userGroup","userGroupBody","groups","sharings","userGroups","group","access","uri","userGroupID","grpUrl","grpresponse","members","Loader","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","revisionParentData","parentDetails","resObejct","proposedChangesArray","URLCADetails","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","objectsByPatterns","caproposedwhere_from","itm","url3","response3","Array","isArray","proposedChange","action","whats","what","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","userClass"],"sourceRoot":""}