{"version":3,"file":"static/js/91.7db7f61d.chunk.js","mappings":"oNAQA,MAiEA,EAjE6BA,KAC3B,MAAM,WAAGC,IAAeC,EAAAA,EAAAA,MAClB,cAAEC,IAAkBC,EAAAA,EAAAA,KAwC1B,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OACEC,UAAU,2BAA0BF,SAAA,EAEpCF,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACJC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,IAAI,+DACJC,IAAI,eACJN,UAAU,iBAEZJ,EAAAA,EAAAA,KAAA,QAAMI,UAAU,qBAAoBF,SAAC,mBACrCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBF,SAAA,EAChCF,EAAAA,EAAAA,KAAA,MAAII,UAAU,aACdJ,EAAAA,EAAAA,KAAA,QAAMI,UAAU,eAAcF,SAAC,QAC/BF,EAAAA,EAAAA,KAAA,MAAII,UAAU,gBAEhBJ,EAAAA,EAAAA,KAACW,EAAAA,EAAW,CAACC,SAvDGC,IAmCpBf,EAAce,EAlCK,CACjBC,MAAO,SACPC,KAAM,GACNC,KAAM,UACNC,sBAAsB,EACtBC,QACE,+HACFC,cAAc,EACdC,UAAU,EACVC,kBAAkB,EAClBC,0BAA0B,EAC1BC,qBAAsB,GACtBC,kBAAmB,aAGQC,IAIzBA,GACAA,EAAgBC,OAAS,GACzBD,EAAgB,GAAGE,GAEnB/B,EAAW,CACT,CACEgC,SAAUH,EAAgB,GAAGE,GAC7BE,WAAYJ,EAAgB,GAAG,sBAInCK,QAAQC,KAAK,wCACf,GAGwD,QAsBvD,C,iGCjDP,MA4GA,GA5GuBC,EAAAA,EAAAA,aACrB,CAAAC,EAA8CC,KAAS,IAAtD,KAAEC,EAAI,QAAEC,EAAO,UAAEC,EAAS,OAAEC,EAAM,MAAEC,GAAON,EAC1C,MAAM,iBAAEO,IAAqBC,EAAAA,EAAAA,MACtBC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,CAAC,IAElDC,EAAAA,EAAAA,YAAU,KACRF,EAAgB,CAAC,EAAE,GAClB,CAACR,IAEJ,MAAMW,EAAWA,KACf,MACMC,EADeC,EAAMC,sBAAsBC,KACdC,KAChCC,GAASA,EAAKC,SAAS,qBAGG,IAAzBN,EAAcrB,QAKlBW,EAAUU,GACVJ,EAAgB,CAAC,IALfH,EAAiBc,EAAAA,GAKA,GAIrBC,EAAAA,EAAAA,qBAAoBrB,GAAK,MACvBY,eAGF,MAAMU,GAAkBC,EAAAA,EAAAA,UAAQ,IAYvB,CAXiB,CACtB9B,GAAI,SACJ+B,KAAMC,IAAA,IAAC,IAAEC,GAAKD,EAAA,OACZ3D,EAAAA,EAAAA,KAAA,SACE6D,KAAK,WACLzD,UAAU,mBACV0D,QAASF,EAAIG,gBACbC,SAAUJ,EAAIK,4BACd,MAGsB7B,IAC3B,CAACA,IAEEY,GAAQkB,EAAAA,EAAAA,IAAc,CAC1B/B,OACAC,QAASoB,EACTjB,MAAO,CAAEG,gBACTyB,oBAAoB,EACpBC,qBAAsBzB,EACtB0B,iBAAiBA,EAAAA,EAAAA,QAGnB,OACElE,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UACE6D,KAAK,SACLzD,UAAU,+BACVkE,QAASA,KACPtB,EACGuB,cACArB,KAAKsB,SAASZ,GAAQA,EAAIa,gBAAe,IAAM,EAClDvE,SACH,gBAGDF,EAAAA,EAAAA,KAAA,UACE6D,KAAK,SACLzD,UAAU,4BACVkE,QAASA,KACPtB,EACGuB,cACArB,KAAKsB,SAASZ,GAAQA,EAAIa,gBAAe,IAAO,EACnDvE,SACH,oBAKF8C,EAAMuB,cAAcrB,KAAKxB,OAAS,GACjC1B,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gBAAgBE,MAAO,CAAEoE,UAAW,QAASxE,SACzD8C,EAAMuB,cAAcrB,KAAKC,KAAKS,IAC7BzD,EAAAA,EAAAA,MAAA,OAEEC,UAAU,8CACVE,MAAO,CACLqE,gBAAiBf,EAAIG,gBAAkB,UAAY,WACnD7D,SAAA,EAEFF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,OAAMF,UAClB0E,EAAAA,EAAAA,IACChB,EAAIiB,kBAAkB,GAAGC,OAAOC,UAAUrB,KAC1CE,EAAIiB,kBAAkB,GAAGG,iBAG7BhF,EAAAA,EAAAA,KAAA,OAAAE,SAAM0D,EAAIP,SAASjB,EAAQ,GAAG6C,iBAZzBrB,EAAIjC,SAiBf3B,EAAAA,EAAAA,KAAA,KAAGI,UAAU,iBAAgBF,SAAC,wBAE/B,G,mRC/GT,MAiOA,EAjO8BgF,KAC5B,MAAM,eAAEC,IAAmB1C,EAAAA,EAAAA,KACrB2C,GAAWC,EAAAA,EAAAA,MACXC,EAAkBC,4DACxB,IAAIC,EAAQC,OAAOC,OAAOC,SAAS,SAEnC7D,QAAQ8D,IAAI,kCAAmCJ,GAwN/C,MAAO,CAAEK,yBArNwBC,MAC/BC,EACAxD,EACAX,EACAiC,EACAmC,EACAC,KAEA,IACEnE,QAAQ8D,IAAI,gBAAiBhE,GAC7BE,QAAQ8D,IAAI,kBAAmB/B,GAC/BuB,GAASc,EAAAA,EAAAA,KAAwB,IAEjC,MAAMC,QAAgBC,EAAAA,EAAAA,KACtB,IAAKD,EAEH,YADAhB,EAAekB,EAAAA,IAIjBvE,QAAQ8D,IAAI,wCAAyCO,GAGrD,IAAIG,EAAO,GAAAC,OAAMjB,EAAe,6CAAAiB,OAA4C3E,EAAQ,wCAEhF4E,EAA2B,aAAT3C,EAAsB,KAAO,OAE/C4C,EAAS,GAAAF,OAAMD,EAAO,qBAAAC,OAAoBC,GAC1CE,QAAoBC,EAAAA,EAAAA,IACtB,MACAF,EACA,GACAN,GAIF,GAFArE,QAAQ8D,IAAI,wBAAyBc,GAGnCA,GACAA,EAAYE,QACZF,EAAYG,OAAO1E,KAAKT,OAAS,EACjC,CAAC,IAADoF,EAAAC,EAAAC,EAAAC,EACA,IA0EIC,EACAC,EA3EAC,EAAsBV,EAAYG,OAAO1E,KAAKgB,KAAKkE,IAAK,CAC1D1F,GAAI0F,EAAM1F,GACVb,MACEuG,EAAMC,aAAaxG,OAA6C,KAApCuG,EAAMC,aAAaxG,MAAMyG,OACjDF,EAAMC,aAAaxG,MACnBuG,EAAMC,aAAaE,eACzBC,SAAUJ,EAAMC,aAAaG,SAC7BlF,MAAO8E,EAAMC,aAAaI,SAC1BC,KAAMN,EAAMC,aAAaK,SAQ3B,GALA7F,QAAQ8D,IACN,oDACAwB,GAGW,aAATvD,EAAqB,CACvB,MAAM+D,EAAe,CACnBzF,KAAM,IAERiF,EAAoB5C,SAASqD,IAC3B,MAAMC,EAAO,CACXnG,GAAIkG,EAAMlG,GACVoG,WAAYF,EAAMlG,GAClBkC,KAAM,eACNmE,OAAO,GAADzB,OAAKjB,GACX2C,aAAa,6CAAD1B,OAA+CsB,EAAMlG,KAEnEiG,EAAazF,KAAK+F,KAAKJ,EAAK,IAE9B,MAAMK,EAAW,GAAA5B,OAAMjB,EAAe,+CAChC8C,QAAiBzB,EAAAA,EAAAA,IACrB,OACAwB,EACAP,EACAzB,GA0BF,SAASkC,EAAwBC,GAC/B,GAAI,QAAQC,KAAKD,GAAM,OAAOE,SAASF,EAAK,IAE5C,IAAIG,EAAS,EACb,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAI5G,OAAQgH,IAC9BD,EACW,GAATA,GAAeH,EAAIK,WAAWD,GAAK,IAAIC,WAAW,GAAK,GAE3D,OAAOF,CACT,CAjCA3G,QAAQ8D,IAAI,eAAgBwC,GAC5BA,EAASvB,OAAO+B,QAAQpE,SAASpB,IAE/B,MAAMyF,EAAgBzF,EAAK0F,SAASC,QAAO,CAACC,EAAQC,IAC3CZ,EAAwBY,EAAQxB,UACrCY,EAAwBW,EAAOvB,UAC7BwB,EACAD,IAIN5B,EAAsBA,EAAoBjE,KAAK+F,GACzC9F,EAAK0F,SAASK,MAAMC,GAAYA,EAAQzH,KAAOuH,EAAIvH,MACrD0H,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKH,GAAG,IACNI,iBACEJ,EAAIvH,KAAOkH,EAAclH,GAAK,OAAS,UAGtCuH,GACP,IAeJpH,QAAQ8D,IAAI,0BAA2BwB,EACzC,CAGa,aAATvD,GACFsD,EACE,8FACFD,EAAc,CACZqC,SAAUvD,EACVwD,aAAcvD,EACdwD,MAAOrC,EAAoBjE,KAAKuG,IAAG,CACjCC,SAAUD,EAAI/B,KACdiC,aAAcF,EAAIjC,gBAItBN,EACE,8FACFD,EAAc,CACZyC,SAAU3D,EACV4D,aAAc3D,EACd4D,eAAgBzC,EAAoBjE,KAAKuG,IAAG,CAC1CH,SAAUG,EAAI/B,KACd6B,aAAcE,EAAIjC,eAKxB3F,QAAQ8D,IAAI,qBAAsBsB,GAElC,MAAMkB,QAAiB0B,EAAAA,EAAAA,IAAU,OAAQ3C,EAAQD,GAEjDpF,QAAQ8D,IAAI,iCAAkCwC,GAE9C,IAAI2B,EAAa,GACL,OAAR3B,QAAQ,IAARA,GAAc,QAANtB,EAARsB,EAAUjG,YAAI,IAAA2E,GAAM,QAANC,EAAdD,EAAgB3E,YAAI,IAAA4E,GAApBA,EAAsB8C,eAExBzB,EAASjG,KAAKA,KAAK0H,eAAerF,SAASwF,IACzC,IAAIC,EAAc7C,EAAoB8C,MACnCR,GACCA,EAAI/B,OAASqC,EAAKT,UAAYG,EAAIjC,WAAauC,EAAKR,eAGxDO,EAAW7B,KAAK,CACdiC,YAAuB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAa1H,QAAS,GAClC6H,YAAuB,OAAXH,QAAW,IAAXA,OAAW,EAAXA,EAAanJ,QAAS,GAClCuJ,aAAwB,OAAXJ,QAAW,IAAXA,OAAW,EAAXA,EAAaX,mBAAoB,QAC9CgB,UAAWN,EAAKT,SAChBgB,cAAeP,EAAKR,aACpBgB,6BAA8BR,EAAKQ,6BACnCC,yBAA0BT,EAAKS,yBAC/BC,0BAA2BV,EAAKU,0BAChCC,2BAA4BX,EAAKW,2BACjC,UAAWX,EAAK,YAChB,IAEa,OAAR5B,QAAQ,IAARA,GAAc,QAANpB,EAARoB,EAAUjG,YAAI,IAAA6E,GAAM,QAANC,EAAdD,EAAgB7E,YAAI,IAAA8E,GAApBA,EAAsBwC,MAI/BrB,EAASjG,KAAKA,KAAKsH,MAAMjF,SAASpB,IAChC,IAAI6G,EAAc7C,EAAoB8C,MACnChB,GACCA,EAAIvB,OAASvE,EAAKuG,UAAYT,EAAIzB,WAAarE,EAAKwG,eAGxDG,EAAW7B,KAAK,CACdiC,YAAuB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAa1H,QAAS,GAClC6H,YAAuB,OAAXH,QAAW,IAAXA,OAAW,EAAXA,EAAanJ,QAAS,GAClCwJ,UAAWlH,EAAKuG,SAChBY,cAAenH,EAAKwG,aACpBS,aAAwB,OAAXJ,QAAW,IAAXA,OAAW,EAAXA,EAAaX,mBAAoB,QAC9CkB,6BAA8BpH,EAAKoH,6BACnCC,yBAA0BrH,EAAKqH,yBAC/BC,0BAA2BtH,EAAKsH,0BAChCC,2BAA4BvH,EAAKuH,2BACjC,UAAWvH,EAAK,YAChB,IAGJtB,QAAQC,KAAK,2DAEfD,QAAQ8D,IACN,0DACAmE,GAGF3E,GAASwF,EAAAA,EAAAA,IAAgBb,GAE3B,MACEjI,QAAQC,KAAK,gDACbqD,GAASwF,EAAAA,EAAAA,IAAgB,IAE7B,CAAE,MAAOC,GAEP,MADA/I,QAAQ+I,MAAM,iCAAkCA,GAC1CA,CACR,CAAC,QACCzF,GAASc,EAAAA,EAAAA,KAAwB,GACnC,GAGiC,E,aC+JrC,MAiHA,EAjHoC4E,KAClC,MAAM,eAAE3F,IAAmB1C,EAAAA,EAAAA,MACrB,yBAAEoD,GAA6BX,IAC/B6F,GAAYC,EAAAA,EAAAA,KAAazI,GAAUA,EAAM0I,cAAcF,YACvDG,GAAUF,EAAAA,EAAAA,KAAazI,GAAUA,EAAM0I,cAAcC,UACrD9F,GAAWC,EAAAA,EAAAA,MAGX8F,EAAa,CACjB,eACA,YACA,mBACA,iBAGIC,GAAqBC,EAAAA,EAAAA,cACzBvF,UACE,IACE,MAAMwF,QAA4BC,EAAAA,EAAAA,IAAwB,CAAEC,cAE5D,GAAIF,EAAoBG,QAAS,CAAC,IAADC,EAAAC,EAC/B,MAAMC,EAAoBN,EAAoBnJ,KAAK0J,SACnD/J,QAAQ8D,IAAI,sBAAuBgG,GAGnC,MAAM/J,EAA8B,OAAjB+J,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBE,KAGtC,IAAKX,EAAWY,SAASlK,GAGvB,OAFAsD,EAAe,yCACfC,GAAS4G,EAAAA,EAAAA,KAAW,IAMtB,GAAsB,cADiB,OAAjBJ,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAoB,mBAIxC,OAFAzG,EAAe,iCACfC,GAAS4G,EAAAA,EAAAA,KAAW,IAKtB5G,GAAS6G,EAAAA,EAAAA,IAAqB,CAAEJ,SAAUD,KAC1CxG,GAAS8G,EAAAA,EAAAA,KAAmB,UAGtBrG,EACJ+F,EAAkB,uBAClBA,EAAkB,kBACN,QADuBF,EACnCF,EAAU,UAAE,IAAAE,OAAA,EAAZA,EAAc9J,SACF,QADU+J,EACtBH,EAAU,UAAE,IAAAG,OAAA,EAAZA,EAAc9J,WACd+J,EAAkBO,KAClBP,EAAkB,oBAEtB,MACEzG,EAAeiH,EAAAA,GAEnB,CAAE,MAAOvB,GACP/I,QAAQ+I,MAAM,+CAAgDA,GAC9D1F,EAAeiH,EAAAA,GACjB,CAAC,QACChH,GAAS4G,EAAAA,EAAAA,KAAW,GACtB,IAEF,CAAC5G,EAAUS,EAA0BV,IAGjCvF,GAAayL,EAAAA,EAAAA,cACjBvF,UACEV,GAAS4G,EAAAA,EAAAA,KAAW,IACpBlK,QAAQ8D,IAAI,iDAAkD4F,GAC9D,IACMA,GAAaA,EAAU9J,OAAS,QAC5B0J,EAAmBI,GAEzB1J,QAAQC,KAAK,yCAEjB,CAAE,MAAO8I,GACPzF,GAAS4G,EAAAA,EAAAA,KAAW,IACpBlK,QAAQ+I,MAAM,8BAA+BA,GAC7C1F,EAAekH,EAAAA,GACjB,IAEF,CAACjB,EAAoBjG,EAAgBC,IAsBvC,MAAO,CACLkH,yBApB8BjB,EAAAA,EAAAA,cAAY,KACrCN,EAIHjJ,QAAQ8D,IAAI,gFAHZ9D,QAAQ8D,IAAI,0EACZR,GAAS8G,EAAAA,EAAAA,KAAmB,KAK9B,MAAMK,EAAWC,aAAY,KAC3B,MAAMC,EAAqBC,SAASC,cAAc,wBAC9CF,IACFG,cAAcL,IACdM,EAAAA,EAAAA,IAAcJ,EAAoB7M,EAAYwF,EAAUD,GAC1D,GACC,KAEH,MAAO,IAAMyH,cAAcL,EAAS,GACnC,CAAC3M,EAAYwF,EAAU2F,EAAW5F,IAInC+F,UACAtL,aACD,E,QCrfH,MAiFA,EAjF2BqC,IAMpB,IANqB,gBAC1B6K,EAAe,aACfC,EAAY,cACZC,EAAa,aACbC,EAAY,QACZC,GACDjL,EACC,MAAOkL,EAAgBC,IAAqBxK,EAAAA,EAAAA,UAAS,KAC9CyK,EAAeC,IAAoB1K,EAAAA,EAAAA,UAAS,IAE7C2K,EAAqBC,IACpBL,GAAmBE,GAKxBL,EACEG,EACAE,EACAG,EAAa,MAAQ,YAEvBN,KATEO,MAAM,sCASC,EAGX,OACEtN,EAAAA,EAAAA,MAAA,OACEC,UAAU,qBACVE,MAAO,CAAEC,MAAO,QAASmN,QAAS,SAAUxN,SAAA,EAE5CF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPC,EAAAA,EAAAA,MAAA,UACEC,UAAU,mBACV4D,SAAW2J,GAAMP,EAAkBO,EAAEC,OAAOC,OAC5CA,MAAOV,EAAejN,SAAA,EAEtBF,EAAAA,EAAAA,KAAA,UAAQ6N,MAAM,GAAE3N,SAAC,wBAChB4M,EAAgB3J,KAAK2K,IACpB9N,EAAAA,EAAAA,KAAA,UAAkB6N,MAAOC,EAAI5N,SAC1B4N,GADUA,SAMjB9N,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPC,EAAAA,EAAAA,MAAA,UACEC,UAAU,mBACVyN,MAAOR,EACPrJ,SAAW2J,GAAML,EAAiBK,EAAEC,OAAOC,OAC3CE,UAAWZ,EAAejN,SAAA,EAE1BF,EAAAA,EAAAA,KAAA,UAAQ6N,MAAM,GAAE3N,SAAC,uBAChB+M,EAAa9J,KAAK6K,IACjBhO,EAAAA,EAAAA,KAAA,UAAkB6N,MAAOG,EAAI9N,SAC1B8N,GADUA,SAMjBhO,EAAAA,EAAAA,KAAA,UACEI,UAAU,oCACVkE,QAASA,IAAMiJ,GAAkB,GACjCQ,UAAWhB,EAAarL,OACxBpB,MAAO,CAAE2N,OAASlB,EAAarL,OAAyB,UAAhB,eAA4BxB,SACrE,uBAGDF,EAAAA,EAAAA,KAAA,UACEI,UAAU,oCACVkE,QAASA,IAAMiJ,GAAkB,GAAMrN,SACxC,kBAKDF,EAAAA,EAAAA,KAAA,UAAQI,UAAU,mCAAmCkE,QAAS4I,EAAQhN,SAAC,YAGnE,ECqLV,EAhF2C+B,IAUpC,IAVqC,OAC1CiM,EAAM,MACN3L,EAAK,aACLwK,EAAY,UACZoB,EAAS,aACTC,EAAY,KACZvK,EAAI,eACJwK,EAAc,gBACdC,EAAe,gBACfC,GACDtM,EACC,MAAM,iBAAEO,IAAqBC,EAAAA,EAAAA,MACtB+L,EAAcC,IAAmB7L,EAAAA,EAAAA,WAAS,GAgCjD,OACEzC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kCAAiCF,SAAA,EAC9CF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,SAAQF,UACrBF,EAAAA,EAAAA,KAAA,UACEI,UAAU,qCACVkE,QA1BoBoK,KAE1BH,GAAiB,EAwBmBrO,SAC/B,eAeFsO,IACCxO,EAAAA,EAAAA,KAAA,OAAKI,UAAU,OAAMF,UACnBF,EAAAA,EAAAA,KAAC2O,EAAkB,CACjB7B,gBAhCc,CACtB,mCACA,+BACA,+BACA,iCACA,WA4BQC,aAAcA,EACdC,cA1Ce4B,CAAC9J,EAAQ+I,EAAOgB,KAErCT,EADY,aAAVS,EACW9B,EAEAoB,EAFcrJ,EAAQ+I,EAGrC,EAsCQZ,aAAc,CAAC,MAAO,MACtBC,QAASA,IAAMuB,GAAgB,SAIjC,ECoaV,EA1S2BK,KACzB,MAAM,wBAAExC,EAAuB,QAAEpB,GAAYJ,KACtCiE,EAAUC,IAAepM,EAAAA,EAAAA,UAAS,IAClCuL,EAAWc,IAAgBrM,EAAAA,EAAAA,UAAS,KACpCsM,EAAgBC,IAAqBvM,EAAAA,EAAAA,WAAS,IAC9CwM,EAAcC,IAAmBzM,EAAAA,EAAAA,WAAS,IAC1C0M,EAAqBC,IAA0B3M,EAAAA,EAAAA,WAAS,IACxD4M,EAAUC,IAAe7M,EAAAA,EAAAA,UAAS,KAClC8M,EAAgBC,IAAqB/M,EAAAA,EAAAA,UAAS,KAC9CgN,EAAmBC,IAAwBjN,EAAAA,EAAAA,WAAS,GACrDwC,GAAWC,EAAAA,EAAAA,OACX,iBAAEyK,EAAgB,eAAE3K,IAAmB1C,EAAAA,EAAAA,MAE7CI,EAAAA,EAAAA,YAAU,KACJ2M,EAAS9N,QACXuN,EAAaO,EAASrM,KAAKC,IAAIiG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWjG,GAAI,IAAE2M,aAAc,CAAC,MACjE,GACC,CAACP,IAEJ,MA4FMQ,GAAoBhF,EAAAA,EAAAA,KACvBzI,GAAUA,EAAM0I,cAAc+E,oBAG3BC,GAAoBjF,EAAAA,EAAAA,KACvBzI,GAAUA,EAAM0I,cAAcgF,oBAG3BC,GAAuBlF,EAAAA,EAAAA,KAC1BzI,GAAUA,EAAM0I,cAAciF,uBAO3BnF,IAJkBC,EAAAA,EAAAA,KACrBzI,GAAUA,EAAM0I,cAAckF,gBAAgBC,mBAG/BpF,EAAAA,EAAAA,KAAazI,GAAUA,EAAM0I,cAAcF,aAEvDsF,IADUrF,EAAAA,EAAAA,KAAazI,GAAUA,EAAM0I,cAAcqF,iBACnCtF,EAAAA,EAAAA,KACrBzI,GAAUA,EAAM0I,cAAcqF,cAAcC,gBAGzCC,EAAmBC,IACvB,MAAMC,EAAqBD,EAAYtN,KAAKwN,IAC1C,MAAMC,EAAepB,EAAStF,MAC3B2G,GACCA,EAAQC,QAAUH,EAAQG,OAC1BD,EAAQE,WAAaJ,EAAQI,WAGjC,IAAKH,EAAc,OAAAvH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYsH,GAAO,IAAEZ,aAAc,CAAC,IAEvD,MAAMA,EAAe,CAAC,EAOtB,OANAiB,OAAOC,KAAKN,GAASnM,SAAS0M,IACxBP,EAAQO,KAASN,EAAaM,KAChCnB,EAAamB,IAAO,EACtB,KAGF7H,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYsH,GAAO,IAAEZ,gBAAY,IAGnCd,EAAayB,EAAmB,GAGlC7N,EAAAA,EAAAA,YAAU,KACJsL,EAAUzM,QAAU,GACtBsN,GAAamC,GAAYA,EAAU,GACrC,GACC,CAAChD,KAEJtL,EAAAA,EAAAA,YAAU,KACHkI,GACHuB,GACF,GACC,CAACvB,EAAWuB,KAEfzJ,EAAAA,EAAAA,YAAU,KACRsM,EAAkBe,EAAqB,GACtC,CAACA,IAEJ,MAAMkB,GAAe3N,EAAAA,EAAAA,UACnB,ICxgBwB4N,EAACC,EAAkBzN,IACxCyN,EAEEA,EAAiBnO,KAAKhB,IAC3B,IAAIoP,EAAU,CACZT,OAAW,OAAJ3O,QAAI,IAAJA,OAAI,EAAJA,EAAMiI,aAAc,MAC3B2G,UAAc,OAAJ5O,QAAI,IAAJA,OAAI,EAAJA,EAAMoI,gBAAiB,IACjCiH,OAAW,OAAJrP,QAAI,IAAJA,OAAI,EAAJA,EAAMgI,aAAc,MAC3B,mCACEhI,EAAKqI,8BAAgC,KACvC,+BAAgCrI,EAAKsI,0BAA4B,KACjE,+BAAgCtI,EAAKuI,2BAA6B,KAClE,iCAAkCvI,EAAKwI,4BAA8B,KACrE,UAAWxI,EAAK,YAAc,MAQhC,MAJa,aAAT0B,IACF0N,EAAQE,UAAe,OAAJtP,QAAI,IAAJA,OAAI,EAAJA,EAAMkI,cAAe,SAGnCkH,CAAO,IApBc,GDugBtBF,CAAahB,EAAiBxM,OACpC,CAACwM,EAAiBxM,QAEpBhB,EAAAA,EAAAA,YAAU,KACR4M,EAAY2B,EAAa,GACxB,CAACA,KAEJvO,EAAAA,EAAAA,YAAU,KACJuO,EAAa1P,QAAU,IACzBuN,EAAamC,GACbpC,GAAamC,GAAYA,EAAU,IACrC,GACC,CAACC,IAEJ,MAAMvF,GAAWpI,EAAAA,EAAAA,UACf,ICpjBwBwM,KAC1B,IAAKA,IAAsBA,EAAkBpE,SAC3C,OAAO,KAGT,MAAMzI,EAAO6M,EAAkBpE,SAE/B,IAAIA,EAAW,CACb/K,MAAOsC,EAAK0N,OAAS,MACrBjN,KAAMT,EAAK0I,MAAQ,MACnB,iBAAkB1I,EAAK,mBAAqB,MAC5CsO,MAAOtO,EAAKuO,OAAS,MACrB,4BAA6BvO,EAAK,8BAAgC,MAClEwO,YAAaxO,EAAKwO,aAAe,MACjC,mBAAoBxO,EAAK,qBAAuB,MAChD,2BAA4BA,EAAK,6BAA+B,MAChE,aAAcA,EAAK,eAAiB,MACpCyO,SACEzO,EAAKyO,UACL,uHAOJ,MAJkB,aAAdzO,EAAK0I,OACPD,EAASiG,IAAM1O,EAAK0O,KAAO,MAC3BjG,EAAS,cAAgBzI,EAAK,eAAiB,OAE1CyI,CAAQ,ED0hBPkG,CAAY9B,IAClB,CAACA,KAGHpN,EAAAA,EAAAA,YAAU,KACR0M,IAAyB1D,EAAS,GACjC,CAACA,IAEJ,MAAMzJ,GAAUqB,EAAAA,EAAAA,UACd,ICvgBwBuO,EAACnO,EAAMwK,EAAgBC,KACjD,MAAM2D,EAAc,CAClB,CAAEhN,YAAa,QAASiN,OAAQ,SAChC,CAAEjN,YAAa,WAAYiN,OAAQ,YACnC,CAAEjN,YAAa,QAASiN,OAAQ,UAGrB,aAATrO,GACFoO,EAAY/J,KAAK,CAAEjD,YAAa,WAAYiN,OAAQ,cAGtD,MAAMpF,EAAkB,CACtB,mCACA,+BACA,+BACA,iCACA,WACA3J,KAAKgP,IAAS,CACdlN,YAAakN,EACbD,OAAQC,EACRzO,KAAMzB,IAA+B,IAA9B,IAAE2B,EAAG,SAAE+B,EAAQ,MAAE3C,GAAOf,EAoB7B,OAjBW,aAAT4B,EAC8B,UAA1BD,EAAIP,SAASoO,SACZpD,GAAkBA,IAAmBC,IAmC1CtO,EAAAA,EAAAA,KAAA,QAAAE,SAAOyF,OAnBPxF,EAAAA,EAAAA,MAAA,UACE0N,MAAOlI,IACP3B,SAhB0B2J,IAAO,IAADyE,EAClC,MAAMC,EAAe1E,EAAEC,OAAOC,MACxB4C,EAAczN,EACjBuB,cACArB,KAAKC,KAAKmP,GACTA,EAAE3Q,KAAOiC,EAAIjC,IAAE0H,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNiJ,EAAEjP,UAAQ,IAAE,CAAC8O,GAAYE,IAC9BC,EAAEjP,WAGQ,QAAlB+O,EAAApP,EAAMuP,QAAQC,YAAI,IAAAJ,GAAlBA,EAAoB5B,gBAAgBC,EAAY,EAO9CrQ,UAAU,+EACVE,MAAO,CACLC,MAAO,MACPkS,QAAS,QACTC,SAAU,OACVC,WAAY,OACZC,OAAQ,OACRC,UAAW,QAEbC,YAAcnF,GAAOA,EAAEC,OAAOtN,MAAMsS,OAAS,iBAC7CG,WAAapF,GAAOA,EAAEC,OAAOtN,MAAMsS,OAAS,OAAQ1S,SAAA,EAEpDF,EAAAA,EAAAA,KAAA,UAAQ6N,MAAM,MAAK3N,SAAC,SACpBF,EAAAA,EAAAA,KAAA,UAAQ6N,MAAM,KAAI3N,SAAC,SAItB,MAIL,MAAO,IAAI+R,KAAgBnF,EAAgB,EDucvCkF,CACEnO,KACiB,OAAjBoM,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBpE,SAAS,mBACX,OAAjBoE,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBpE,SAAS,sBAEhC,CAAChI,KAAuB,OAAjBoM,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBpE,WA4B5B,OACE1L,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CACGkP,IACCjP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBF,SAAA,EAC9BF,EAAAA,EAAAA,KAACgT,EAAAA,EAAM,KACPhT,EAAAA,EAAAA,KAAA,KAAAE,SAAG,kBAGL6K,IAAcG,IAAYgE,IAAkBlP,EAAAA,EAAAA,KAACL,EAAAA,EAAoB,IAClEuL,IAAWlL,EAAAA,EAAAA,KAACgT,EAAAA,EAAM,IAClBjI,IACC5K,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CACGgL,IAAWlL,EAAAA,EAAAA,KAACgT,EAAAA,EAAM,KACnBhT,EAAAA,EAAAA,KAAA,OAAKI,UAAU,qCAAoCF,UACjDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASF,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,YAAWF,UACxBF,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACJI,IAAI,+DACJC,IAAI,YACJN,UAAU,YACVkE,QA7CQ2O,KACtB3G,IACAlH,GAAS8N,EAAAA,EAAAA,KAAa,IACtB9N,GACE6G,EAAAA,EAAAA,IAAqB,CACnBJ,SAAU,CAAC,EACXsH,cAAe,GACfrK,SAAU,GACVsK,mBAAoB,MAGxBhO,GACEiO,EAAAA,EAAAA,IAAmB,CACjBC,UAAW,GACXC,sBAAuB,GACvBC,aAAc,GACdC,gBAAiB,GACjBnR,QAAQ,EACR6D,QAAS,CAAC,KAGd8I,EAAa,IACbM,GAAuB,EAAM,MA0BlB1D,IACC7L,EAAAA,EAAAA,KAAC0T,EAAAA,EAAmB,CAACvR,KAAM0J,EAAU8H,WAAW,4BAKrDzE,GACClP,EAAAA,EAAAA,KAAA,OAAKI,UAAU,yBAAwBF,UACrCF,EAAAA,EAAAA,KAACgT,EAAAA,EAAM,OAGThT,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EAC1BF,EAAAA,EAAAA,KAAC4T,EAAkC,CACjC1F,OAzPGpI,UACjBhE,QAAQ8D,IAAI,iBAAkBuI,GAC9BkB,GAAgB,GAChB,IACIwE,EACAC,EACAC,EACAC,EAJAC,EAAa,GAMJ,aAATpQ,MACFoQ,EAAa,CACX1K,SAAU0G,EAAkBpE,SAASM,KACrC3C,aAAcyG,EAAkBpE,SAAS,oBACzCqI,UAAWjE,EAAkBpE,SAAS,kBACtCsI,OAAQlE,EAAkBpE,SAAa,IAEzCgI,EAAe,WACfC,EAAc,eACdC,EAAgB,YAChBC,EAAa,WAEbC,EAAa,CACXtK,SAAUsG,EAAkBpE,SAASM,KACrCvC,aAAcqG,EAAkBpE,SAAS,oBACzCuI,UAAWnE,EAAkBpE,SAAS,kBACtCwI,OAAQpE,EAAkBpE,SAAa,IAEzCgI,EAAe,WACfC,EAAc,eACdC,EAAgB,YAChBC,EAAa,UAGf,MAAMM,EAAgBnG,EAAUhL,KAAKC,IACnC,IAAImR,EAAelE,EAAgBnG,MAChC/H,GACCA,EAAKiI,aAAehH,EAAK0N,OAAS3O,EAAKoI,gBAAkBnH,EAAK2N,WAGlE,OAAA1H,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE,CAACwK,GAAeU,EAAeA,EAAajK,UAAY,KACxD,CAACwJ,GAAc1Q,EAAK2N,SACpB,CAACgD,GAAgBQ,EAAeA,EAAapK,WAAa,KAC1D,CAAC6J,GAAaO,EAAeA,EAAaC,GAAK,MAC5CP,GAAU,IACbzJ,6BAA8BpH,EAAK,oCACnCqH,yBAA0BrH,EAAK,gCAC/BsH,0BAA2BtH,EAAK,gCAChCuH,2BAA4BvH,EAAK,kCACjC,UAAWA,EAAK,YAAU,IAI9BkR,EAAcG,MAAK,CAACC,EAAGC,IACjBD,EAAEnL,WAAaoL,EAAEpL,SACZmL,EAAEnL,SAASqL,cAAcD,EAAEpL,UAE7BsL,OAAOH,EAAElL,cAAgBqL,OAAOF,EAAEnL,gBAOnB,aAFDM,EAAAA,EAAAA,IAAU,OAD/B,2FACgDwK,IAErC1N,QACXkJ,EAAiBgF,EAAAA,IACjBrF,EAAYtB,GACZkB,GAAgB,KAEhBlK,EAAe4P,EAAAA,IACf1F,GAAgB,GAClB,EAmLcxL,KAAMA,KACNwK,eAAiC,OAAjB4B,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBpE,SAAS,mBAC5CyC,gBAAkC,OAAjB2B,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBpE,SAAS,oBAC7CkB,aAAciD,EACdzN,MAAOA,MACP4L,UAAWuB,EACXtB,aAtLStI,MAAO3D,EAAM2C,EAAQ+I,KAC5C,MAAM4C,EAActO,EAAKgB,KAAKS,IAAGyF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC5BzF,GAAG,IACN,CAACkB,GAAS+I,MAGN9D,EAAaoE,EAAUhL,KAAKS,IAChC,MAAMoR,EAAavE,EAAYvG,MAC5B+K,GACCA,EAAQnE,QAAUlN,EAAIkN,OAASmE,EAAQlE,WAAanN,EAAImN,WAG5D,OAAOiE,GAA0BpR,CAAG,IAGtC4M,EAAgBzG,EAAW,EAwKbwE,gBAAiBA,IAAMsB,GAAqB,MAE9C7P,EAAAA,EAAAA,KAACkV,EAAAA,EAAa,CAEZ/S,KAAMgM,EACN/L,QAASA,EACToQ,KAAM,CAAEhC,mBACR3M,KAAMA,KACNwK,eAAiC,OAAjB4B,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBpE,SAAS,mBAC5CyC,gBAAkC,OAAjB2B,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBpE,SAAS,oBAC7C8H,WAAW,gCACXwB,uBAAwBxF,GARnBZ,aAehB,E,aEppBP,MA8EA,EA9EwBqG,KACtB,MAAM,WAAExV,GAAekL,KACjB,iBAAEgF,EAAgB,eAAE3K,IAAmB1C,EAAAA,EAAAA,MACtCyI,EAASc,IAAcpJ,EAAAA,EAAAA,WAAS,GAEvCd,QAAQ8D,IAAI,kCAsEZ,OA7DA/C,EAAAA,EAAAA,YAAU,KACR,IAAK4C,OAAOC,OAAQ,OAqDpB5D,QAAQuT,MAAM,+DACd5P,OAAOC,OAAO4P,SAAS,aAlDLxP,UAAa,IAADyP,EAAAC,EAC5B,MAAMH,GAAQ,IAAII,OAAQC,MAAMC,MAAM,MAGhCC,EAAqBC,eAAeC,QAAQ,sBAElD,GAlB4BT,IACvBA,EAAMlM,MACV4M,GACCA,EAAKhK,SAAS,uBAAyBgK,EAAKhK,SAAS,mBAenDiK,CAAuBX,KAAWO,EAIpC,YAHA9T,QAAQC,KACN,kFAOJ8T,eAAeI,WAAW,sBAM1BjK,GAAW,GAEX,MACMkK,EADcC,EAAAA,EAAMC,WAEZnL,cAAcgF,kBAAkBmD,mBAE9C,GAAsB,OAAjB8C,QAAiB,IAAjBA,GAAuB,QAANX,EAAjBW,EAAmB/T,YAAI,IAAAoT,GAAO,QAAPC,EAAvBD,EAAyBc,aAAK,IAAAb,IAA9BA,EAAgC9T,OAMnC,OALAI,QAAQ+I,MACN,6EACAqL,QAEFlK,GAAW,GAIb,UAIQsK,EAAAA,EAAAA,GAAkBJ,EAAkB/T,KAAKkU,MAAOzW,EACxD,CAAE,MAAOiL,GACP/I,QAAQ+I,MAAM,iDAA6CA,GAC3D1F,EAAeoR,EAAAA,GACjB,CAAC,QACCvK,GAAW,GACX8D,EAAiB0G,EAAAA,GACnB,IAG4C,GAI7C,IAEItL,GAAUlL,EAAAA,EAAAA,KAACgT,EAAAA,EAAM,IAAM,IAAI,E,QCrEpC,IAAIyD,EAAO,KAwFI,SAAS,IAGtB,GAAIhR,OAAOC,OAAQ,CAGjB,IAAIgR,GAAe,EAEnBjR,OAAOC,OAAO4P,SAAS,UAAU,KAC3BoB,EACF5U,QAAQC,KACN,+EAIJ2U,GAAe,EAtGrB,WAAkB,IAADC,EAAAC,EACfC,UAAU,CAAC,+BAAgCC,IACzCrR,OAAOqR,YAAcA,CAAW,IAIlC,IAAIC,GACW,QAAbJ,EAAAlR,OAAOC,cAAM,IAAAiR,GAAM,QAANC,EAAbD,EAAe7O,YAAI,IAAA8O,OAAN,EAAbA,EAAqBjK,cAAc,WACnCD,SAASsK,eAAe,QAGrBD,IACHA,EAAcrK,SAASuK,cAAc,OACrCF,EAAYpV,GAAK,OACb8D,OAAOC,QAAUD,OAAOC,OAAOoC,KACjCrC,OAAOC,OAAOoC,KAAKoP,YAAYH,GAG/BrK,SAAS5E,KAAKoP,YAAYH,IAOzBN,IAEHA,EAAOU,EAAAA,WAAoBJ,IAK7BN,EAAKW,QACHjX,EAAAA,EAAAA,MAACkX,EAAAA,GAAQ,CAAClB,MAAOA,EAAAA,EAAMjW,SAAA,EACrBF,EAAAA,EAAAA,KAACoV,EAAe,KAChBpV,EAAAA,EAAAA,KAAC8O,EAAkB,KACnB9O,EAAAA,EAAAA,KAACsX,EAAAA,GAAc,OAMrB,CAkEMC,GAAO,GAEX,MACEzV,QAAQ+I,MACN,sEAGN,EAtEA,WA2BE,GAAIpF,OAAO+R,QAAU/R,OAAO+R,OAAO9K,SAAU,CAC3C,IAAI+K,EAAiBhS,OAAO+R,OAAO9K,SAASuK,cAAc,UAC1DQ,EAAeC,YA1BE,y1BA2BjBjS,OAAO+R,OAAO9K,SAAS5E,KAAKoP,YAAYO,EAE1C,MACE3V,QAAQC,KACN,qFAGN,CAGA4V,E,6ECpGA,MAAMC,EAAuBA,CAACzV,EAAMmR,KAClCxR,QAAQ8D,IAAI,mCAAoCzD,GAChDL,QAAQ8D,IAAI,qCAAsC0N,GAElD,MAAMuE,EAAa1V,EAChBgB,KAAKC,IACJ,MAAM0U,EAAY1U,EAAKtC,MAAMiX,QAAQ,OAAQ,IAAIA,QAAQ,SAAU,IAE7DC,EAAe1E,EAAUpJ,MAAM+N,GAChBA,EAAMnX,MACtBiX,QAAQ,OAAQ,IAChBA,QAAQ,SAAU,IACHG,gBAAkBJ,EAAUI,gBAGhD,OAAOF,EAAeA,EAAarW,GAAK,IAAI,IAE7CwW,QAAQxW,GAAc,OAAPA,IAIlB,OADAG,QAAQ8D,IAAI,8BAA+BiS,GACpCA,CAAU,EAGNO,EAAmBtS,MAC9BwN,EACA+E,EACAC,EACAzU,KAEA/B,QAAQ8D,IAAI,YAAa0N,GACzBxR,QAAQ8D,IAAI,gBAAiByS,GAC7B,MAAME,EAAeX,EAAqBS,EAAe/E,GAGzD,GAAIiF,EAAa7W,OAAS,EAAG,CAC3B,IAAI8W,EACF,iGAEEC,EAAe,CACjB9W,GAAI2W,EACJzU,KAAMA,EACN6U,QAASH,GAEX,MAAMI,QAA2B7O,EAAAA,EAAAA,IAC9B,OACD0O,EACAC,GAGF3W,QAAQ8D,IAAI,sBAAuBgT,KAAKC,UAAUF,GACpD,GAIWG,EAAgBhT,MAC3B3D,EACAmR,EACA1R,EACAiC,EACAuM,EACA2I,EACAC,KAEAlX,QAAQ8D,IAAI,mCAAoCzD,GAGhD,MAAM0V,EAAaD,EAAqBzV,EAAMmR,GAC9CxR,QAAQ8D,IAAI,+BAAgCiS,GAC5C/V,QAAQ8D,IAAI,gBAAiBmT,GAG7B,MAAME,EAAsBF,EAAcZ,QAAQe,IAChD,GAAsC,aAAlCA,EAAU3W,MAAM2V,cAA8B,CAMhD,OALe9H,EAAgBlG,MAC5BiP,GACCA,EAAOpR,aAAemR,EAAUvX,IACA,WAAhCwX,EAAOC,OAAOlB,eAGpB,CACA,OAAO,CAAK,IAGdpW,QAAQ8D,IAAI,2BAA4BqT,GAGxC,MAAMI,EAAc,GAEpBxB,EAAWrT,SAAS8U,IAClB,MAAMC,EAAYN,EAAoBd,QACnCtQ,IAAWA,EAAM6Q,QAAQ3M,SAASuN,KAElCnW,KAAK0E,GAAUA,EAAMF,OACrB6R,KAAK,MAEU,KAAdD,GAAkC,cAAdA,GACtBF,EAAYnR,KAAK,CAAEuR,QAASH,EAASI,OAAQH,GAC/C,IAEFzX,QAAQ8D,IAAI,yBAA0ByT,GAGtC,IAAIM,EAAe,GACnBN,EAAY7U,SAASpB,IAAU,IAADwW,EAC5B,MAAMC,EAEL,QAFeD,EAAGtG,EAAUpJ,MAC1B+N,GAAUA,EAAMtW,KAAOyB,EAAKqW,iBAC9B,IAAAG,OAAA,EAFkBA,EAEhB9Y,MACGgZ,EAAO,iCAAAvT,OAAoCsT,EAAU,sCAAAtT,OAAqCnD,EAAKsW,QACrGC,GAAY,GAAApT,OAAOuT,EAAO,KAAI,IAGhChY,QAAQ8D,IAAI,mBAAoB+T,GAGhC,MAAMI,EAAqBlC,EAAWM,QACnCxW,IAAQ0X,EAAYlQ,MAAM/F,GAASA,EAAKqW,UAAY9X,MAQvD,GANAG,QAAQ8D,IACN,iDACAmU,GAIEA,EAAmBrY,OAAS,EAAG,CACjC,MAAMsY,EACJ,+FAEIvB,EAAe,CACnB9W,GAAIC,EACJiC,KAAMA,EACN6U,QAASqB,EACT/Y,KAAM,kBAGRc,QAAQ8D,IAAI,qBAAsB6S,GAElC,IACE,MAAMwB,QAAyBnQ,EAAAA,EAAAA,IAC7B,OACAkQ,EACAvB,GAGF3W,QAAQ8D,IAAI,qBAAsBgT,KAAKC,UAAUoB,GACnD,CAAE,MAAOpP,GACP/I,QAAQ+I,MAAM,8BAA+BA,EAC/C,CACF,CAEA,GACEkP,EAAmBrY,OAAS,GAC5BqX,EAAcrX,OAAS,GACd,iBAATmC,GACAmV,EACA,CACA,IAAIgB,EACF,+FAEEvB,EAAe,CACjB9W,GAAIC,EACJiC,KAAMA,EACN6U,QAASqB,EACTG,OAAQnB,EACR/X,KAAM,kBAER,MAAMmZ,QAA8BrQ,EAAAA,EAAAA,IACjC,OACDkQ,EACAvB,GAGF3W,QAAQ8D,IACN,0BACAgT,KAAKC,UAAUsB,GAEnB,CAEA,MAAO,CACL1O,SAAS,EACTqO,QAAS,0BACTT,YAAaA,EACbM,aAAcA,EACf,EAGUS,EAAWtU,MACtBuU,EACAC,EACAC,EACApU,EACAmS,EACAkC,EACAzB,EACAlV,EACA0U,EACAkC,EACArK,KAEA,IACE,MAAM9K,EAAkBC,4DACxBzD,QAAQ8D,IAAI,+CACZ9D,QAAQ8D,IAAI,2BAA4B/B,GACxC/B,QAAQ8D,IAAI,8BAA+B6U,GAC3C3Y,QAAQ8D,IAAI,2BAA4BwK,GACxC,MACMsK,QAAgBC,EAAAA,EAAAA,MAChBC,EAAgB9U,MAAO+U,EAAK/S,EAAMgT,KACtChZ,QAAQ8D,IAAI,gBAAiBiV,GAC7B/Y,QAAQ8D,IAAI,gBAAiBgT,KAAKC,UAAU/Q,EAAM,KAAM,IAEjD,IAAIiT,SAAQ,CAACC,EAASC,KAC3BP,EAAQQ,qBAAqBL,EAAK,CAChCC,SACA3U,SAAOkD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFlD,GAAO,IACV,eAAgB,qBAElBhE,KAAMyW,KAAKC,UAAU/Q,GACrBjE,KAAM,OACNsX,WAAa/S,IACXtG,QAAQ8D,IAAI,qBAAsBwC,GAClC4S,EAAQ5S,EAAS,EAEnBgT,UAAYvQ,IACV/I,QAAQ+I,MAAM,kBAAmBA,GACjCoQ,EAAOpQ,EAAM,GAEf,KAON,IAAIoO,EAAsBF,EAAcZ,QAAQe,IAE9C,GADApX,QAAQ8D,IAAI,wBAAyBsT,GACC,aAAlCA,EAAU3W,MAAM2V,cAA8B,CAChDpW,QAAQ8D,IAAI,sBAAuBsT,GACnC,MAAMC,EAAS/I,EAAgBlG,MAC5BiP,GACCA,EAAOpR,aAAemR,EAAUvX,IACA,WAAhCwX,EAAOC,OAAOlB,gBAGlB,OADApW,QAAQ8D,IAAI,iCAAkCuT,IACtCA,CACV,CAEA,OADArX,QAAQ8D,IAAI,qCAAsCsT,EAAU3W,QACrD,CAAK,IAEdT,QAAQ8D,IAAI,4BAA6BqT,GAEzC,IAAIoC,EAAW,GACfZ,EAAWjW,SAAS8W,IAElB,GAAIA,EAAUC,UAAW,CACvB,IAAIC,EAAa,GACjBvC,EAAoBzU,SAASiX,IACtBA,EAAmB/C,QAAQ3M,SAASuP,EAAU3Z,KACjD6Z,EAAWtT,KAAK,CACdwT,QAASD,EAAmB9Z,GAC5B2I,UAAWmR,EAAmB9T,MAElC,IAEE6T,EAAW9Z,OAAS,GACtB2Z,EAASnT,KAAK,CACZvG,GAAI2Z,EAAU3Z,GACdb,MAAOwa,EAAUxa,MACjBoZ,OAAQsB,EACR3X,KAAMyX,EAAUxP,MAGtB,KAEF,IAAI6N,EAAe,GACnB7X,QAAQ8D,IAAI,cAAeyV,GAC3BA,EAAS7W,SAASpB,IAChB,IAAI0W,EAAU,GAGd,GACE6B,MAAMC,QAAQxY,EAAK8W,SACnB9W,EAAK8W,OAAO2B,OAAOhU,GAAUA,EAAMyC,YACnC,CACA,MAAMwR,EAAc1Y,EAAK8W,OACtB/W,KAAK0E,GAAUA,EAAMyC,YACrBkP,KAAK,MACR1X,QAAQ8D,IAAI,oBAAqBkW,GAE/BhC,EAD8B,QAA5B1W,EAAKS,KAAKqU,cACL,GAAA3R,OAAMnD,EAAKtC,MAAK,yDAAAyF,OAAwDuV,GAExE,8BAAAvV,OAAiCnD,EAAKtC,MAAK,sCAAAyF,OAAqCuV,GAEzFha,QAAQ8D,IAAI,cAAekU,EAC7B,MAEEA,EAAO,0BAAAvT,OAA6BnD,EAAKtC,MAAK,KAIhD6Y,GAAY,GAAApT,OAAOuT,EAAO,KAAI,IAEhChY,QAAQ8D,IAAIyV,GACZvZ,QAAQ8D,IAAI,2BAA4B+T,GAExC,IAAI9B,EAAa4C,EACdtC,QACEmD,GACkC,QAAjCA,EAAUxP,KAAKoM,gBACdmD,EAASlS,MAAM4S,GAAcA,EAAUpa,KAAO2Z,EAAU3Z,OAE5DwB,KAAKmY,GAAcA,EAAU3Z,KAChCG,QAAQ8D,IAAI,mBAAoBiS,GAChC,IAAImE,EAAa,CAAC,EAClBvB,EAAWjW,SAAS8W,KACSD,EAASlS,MACjC4S,GAAcA,EAAUpa,KAAO2Z,EAAU3Z,OAIR,WAAjC2Z,EAAUxP,KAAKoM,eACoB,QAAjCoD,EAAUxP,KAAKoM,eAA2BoD,EAAUC,aAEvDS,EAAWV,EAAUW,UAAYX,EAAUC,UAC7C,IAEFzZ,QAAQ8D,IAAI,kBAAmBoW,GAE/B,IAAIE,EAAmBzB,EACpBtC,QACEmD,GACCA,EAAUC,YACTF,EAASlS,MAAM4S,GAAcA,EAAUpa,KAAO2Z,EAAU3Z,OAE5DwB,KAAKmY,GAAcA,EAAU3Z,KAIhC,GAFAG,QAAQ8D,IAAI,4BAA6BsW,GAErCrE,EAAWnW,OAAS,EAAG,CACzB,IAAIsY,EACF,+FACEvB,EAAe,CACjB9W,GAAI2W,EACJzU,KAAMA,EACN6U,QAASb,EACT7W,KAAM,kBAER,MAAMiZ,QAAyBnQ,EAAAA,EAAAA,IAC7B,OACAkQ,EACAvB,GAGF3W,QAAQ8D,IAAI,oBAAqBgT,KAAKC,UAAUoB,GAClD,CAEA,GAAIjJ,OAAOC,KAAK+K,GAAYta,OAAS,EAAG,CAAC,IAADya,EACtC,MAAMC,EAAU,GAAA7V,OAAMjB,EAAe,qDAAAiB,OAAoD+R,GACnFlQ,QAAiBwS,EAAcwB,EAAY,GAAI,OACrDta,QAAQ8D,IAAI,mBAAoBwC,GAChC,IAAIiU,GAA4B,QAAlBF,EAAA/T,EAASkU,OAAO,UAAE,IAAAH,OAAA,EAAlBA,EAAoBE,UAAW,GAC7CL,EAAoB,QAAIK,EAExB,MAAME,EAAQ,0GAAAhW,OAA6G+R,SACrHxO,EAAAA,EAAAA,IAAU,QAAQyS,EAAUP,GAClCla,QAAQ8D,IAAI,iCACd,CAEA,GACEsW,EAAiBxa,OAAS,GAC1BqX,EAAcrX,OAAS,GACd,iBAATmC,EACA,CACA,IAAImW,EACF,+FAEEvB,EAAe,CACjB9W,GAAI2W,EACJzU,KAAMA,EACN6U,QAASwD,EACThC,OAAQnB,EACR/X,KAAM,kBAER,MAAMmZ,QAA8BrQ,EAAAA,EAAAA,IACjC,OACDkQ,EACAvB,GAGF3W,QAAQ8D,IACN,0BACAgT,KAAKC,UAAUsB,GAEnB,CACA,GAAI5B,EAAa7W,OAAS,EAAG,CAC3B,IAAI8W,EACF,iGAEEC,EAAe,CACjB9W,GAAI2W,EACJzU,KAAMA,EACN6U,QAASH,GAEX,MAAMI,QAA2B7O,EAAAA,EAAAA,IAC/B,OACA0O,EACAC,GAGF3W,QAAQ8D,IAAI,sBAAuBgT,KAAKC,UAAUF,GACpD,CAIA,OAFA7W,QAAQ8D,IAAI,wDAEL,CACL6F,SAAS,EACTqO,QAAS,0BACTuB,SAAUA,EACV1B,aAAcA,EAElB,CAAE,MAAO9O,GAEP,OADA/I,QAAQ+I,MAAM,kBAAmBA,GAC1B,CAAEY,SAAS,EAAOqO,QAAS,sBAAuBjP,QAC3D,E","sources":["components/DragAndDrop/DragAndDrop.jsx","components/Popup/Popup.jsx","hooks/useObsolescenceWidget.js","hooks/useObsolescenceDropableArea.js","pages/ObsolescenceWidget/MassUpdateDropdown.jsx","pages/ObsolescenceWidget/ObsolescenceWidgetToolbarNativeCta.jsx","pages/ObsolescenceWidget/ObsolescenceWidget.jsx","pages/ObsolescenceWidget/ObsolescencedataHelper.js","pages/ObsolescenceWidget/WidgetLifecycle.jsx","pages/ObsolescenceWidget/ObsolescenceIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useObsolescenceWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useObsolescenceWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleObsolescenceWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useObsolescenceWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useObsolescenceWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source: `${ENOVIA_BASE_URL}`,\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          response.output.results.forEach((item) => {\r\n            // Find the latest version based on the 'revision' key\r\n            const latestVersion = item.versions.reduce((latest, current) => {\r\n              return convertRevisionToNumber(current.revision) >\r\n                convertRevisionToNumber(latest.revision)\r\n                ? current\r\n                : latest;\r\n            });\r\n\r\n            // Update 'isLatestRevision' for only the matching document\r\n            ChildObjectDocument = ChildObjectDocument.map((doc) => {\r\n              if (item.versions.some((version) => version.id === doc.id)) {\r\n                return {\r\n                  ...doc,\r\n                  isLatestRevision:\r\n                    doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n                };\r\n              }\r\n              return doc;\r\n            });\r\n          });\r\n\r\n          // Function to convert revision to a comparable numeric value\r\n          function convertRevisionToNumber(rev) {\r\n            if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n            let number = 0;\r\n            for (let i = 0; i < rev.length; i++) {\r\n              number =\r\n                number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n            }\r\n            return number; // Handles A-Z, AA-ZZ revisions\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useObsolescenceWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useObsolescenceWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useObsolescenceWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useObsolescenceWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleObsolescenceWidget };\r\n};\r\n\r\nexport default useObsolescenceWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","// import { useCallback, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\n// import { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// // Custom hook\r\n// import usePlantAssignment from \"./usePlantAssignment\";\r\n// // Reusable services\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({\r\n//           dataItems,\r\n//         });\r\n\r\n//         // const cardownerResult = await fetchCardOwnerDetailsService({\r\n//         //   dataItems,\r\n//         //   headers,\r\n//         // });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           // Merge the data from both services\r\n//           // const combineData = {\r\n//           //   cardData: objectDetailsResult.data.cardData,\r\n//           //   ownerData: cardownerResult.data.ownerData,\r\n//           // };\r\n\r\n//           dispatch(\r\n//             setDroppedObjectData({\r\n//               cardData: objectDetailsResult.data.cardData,\r\n//             })\r\n//           );\r\n\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // call usePlantAssignment after successfully fetching object details\r\n//           if (objectDetailsResult) {\r\n//             await handleObsolescenceWidget(\r\n//               draggedObjectData[\"Collaborative Space\"],\r\n//               draggedObjectData[\"Maturity State\"],\r\n//               dataItems[0]?.objectId,\r\n//               dataItems[0]?.objectType,\r\n//               draggedObjectData.Name,\r\n//               draggedObjectData[\"Dropped Revision\"]\r\n//             );\r\n//           }\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       setLoading(true); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         setLoading(false);\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         console.log(\r\n//           \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n//         );\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast]\r\n//   );\r\n//   // Initialize droppable area\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n//       );\r\n//       dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n//     } else {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n//       );\r\n//     }\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100); // Check every 100ms\r\n \r\n//     return () => clearInterval(interval); // Cleanup interval on unmount\r\n//   }, [handleDrop, dispatch]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n//           if (\r\n//             objectType !== \"VPMReference\" &&\r\n//             objectType !== \"Change Action\"\r\n//           ) {\r\n//             showErrorToast(\"Please select CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setLoading,\r\n  setIsDropped as setIsDroppedAction,\r\n} from \"../store/droppedObjectSlice\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport useObsolescenceWidget from \"./useObsolescenceWidget\";\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useObsolescenceDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  // Define valid types for CA or Engg Item\r\n  const validTypes = [\r\n    \"VPMReference\",      // Valid Type 1\r\n    \"Engg Item\",         // Valid Type 2\r\n    \"Physical Product\",  // Valid Type 3\r\n    \"Change Action\",     // Valid Type 4 (CA)\r\n  ];\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n        if (objectDetailsResult.success) {\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          // ✅ Validate object type before proceeding\r\n          const objectType = draggedObjectData?.Type;\r\n\r\n          // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(\"Please select a CA or Engg Item.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          // ✅ Check if the Maturity State is not 'Released'\r\n          const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n          if (maturityState !== \"Released\") {\r\n            showErrorToast(\"Product is not released.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          // Proceed with setting the dropped object data\r\n          dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // Call handleObsolescenceWidget after successful validation\r\n          await handleObsolescenceWidget(\r\n            draggedObjectData[\"Collaborative Space\"],\r\n            draggedObjectData[\"Maturity State\"],\r\n            dataItems[0]?.objectId,\r\n            dataItems[0]?.objectType,\r\n            draggedObjectData.Name,\r\n            draggedObjectData[\"Dropped Revision\"]\r\n          );\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleObsolescenceWidget, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      dispatch(setLoading(true)); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        dispatch(setLoading(false));\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast, dispatch]\r\n  );\r\n\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n      dispatch(setIsDroppedAction(false));\r\n    } else {\r\n      console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100);\r\n\r\n    return () => clearInterval(interval); // Cleanup\r\n  }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useObsolescenceDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n  onClose, // New prop to close dropdown\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n    onClose(); // Close after applying update\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropdown-menu p-3 \"\r\n      style={{ width: \"300px\", display: \"block\" }}\r\n    >\r\n      <label>Select Column:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        onChange={(e) => setSelectedColumn(e.target.value)}\r\n        value={selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Column --</option>\r\n        {editableColumns.map((col) => (\r\n          <option key={col} value={col}>\r\n            {col}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Select Value:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        value={selectedValue}\r\n        onChange={(e) => setSelectedValue(e.target.value)}\r\n        disabled={!selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Value --</option>\r\n        {valueOptions.map((val) => (\r\n          <option key={val} value={val}>\r\n            {val}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button\r\n        className=\"btn btn-outline-success me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(false)}\r\n        disabled={!selectedRows.length}\r\n        style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n      >\r\n        Apply to Selected\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(true)}\r\n      >\r\n        Apply to All\r\n      </button>\r\n\r\n      {/* Close Button */}\r\n      <button className=\"btn btn-outline-danger me-2 mb-2\" onClick={onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","// import { useState } from \"react\";\r\n// import Popup from \"../../components/Popup/Popup\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\n// import MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\n// const ObsolescenceWidgetToolbarNativeCta = ({\r\n//   onSave,\r\n//   state,\r\n//   selectedRows,\r\n//   tableData,\r\n//   onMassUpdate,\r\n//   type,\r\n//   latestRevision,\r\n//   droppedRevision,\r\n// }) => {\r\n//   const { showWarningToast } = useToast();\r\n//   const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n//   const handleSaveClick = () => {\r\n//     if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n//       showWarningToast(MSG_BOS_SAVE);\r\n//     } else {\r\n//       onSave();\r\n//     }\r\n//     // When save button is clicked, call onSave passed as prop\r\n//     // onSave is passed with tableData from parent\r\n//   };\r\n//   const handleMassUpdate = (column, value, scope) => {\r\n//     if (scope === \"selected\") {\r\n//       onMassUpdate(selectedRows, column, value);\r\n//     } else {\r\n//       onMassUpdate(tableData, column, value);\r\n//     }\r\n//   };\r\n//   const editableColumns = [\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column cta-absolute\">\r\n//       <div className=\"d-flex\">\r\n//         <button\r\n//           className=\"btn btn-outline-success btn-lg m-2\"\r\n//           // onClick={handleSaveClick}\r\n//         >\r\n//           Obsolete\r\n//         </button>\r\n//         {/* <button\r\n//           className=\"btn btn-outline-primary btn-lg m-2\"\r\n//           onClick={() =>\r\n//             type !== \"Document\" && latestRevision !== droppedRevision\r\n//               ? showWarningToast(MSG_BOS_SAVE)\r\n//               : setShowDropdown((prev) => !prev)\r\n//           }\r\n//         >\r\n//           Mass Update\r\n//         </button> */}\r\n//       </div>\r\n\r\n//       {/* Dropdown appears below */}\r\n//       {showDropdown && (\r\n//         <div className=\"mt-2\">\r\n//           <MassUpdateDropdown\r\n//             editableColumns={editableColumns}\r\n//             selectedRows={selectedRows}\r\n//             onApplyUpdate={handleMassUpdate}\r\n//             valueOptions={[\"Yes\", \"No\"]}\r\n//             onClose={() => setShowDropdown(false)}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ObsolescenceWidgetToolbarNativeCta;\r\n\r\n\r\n// import { useState } from \"react\";\r\n// import Popup from \"../../components/Popup/Popup\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\n// import MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\n// const ObsolescenceWidgetToolbarNativeCta = ({\r\n//   onSave,\r\n//   state,\r\n//   selectedRows,\r\n//   tableData,\r\n//   onMassUpdate,\r\n//   type,\r\n//   latestRevision,\r\n//   droppedRevision,\r\n// }) => {\r\n//   const { showWarningToast } = useToast();\r\n//   const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n//   const handleSaveClick = () => {\r\n//     if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n//       showWarningToast(MSG_BOS_SAVE);\r\n//     } else {\r\n//       onSave();\r\n//     }\r\n//   };\r\n\r\n//   // const handleObsoleteClick = () => {\r\n//   //   // Show the new toast\r\n//   //   showWarningToast(\"Product is not yet released\");\r\n\r\n//   //   // Preserve original save logic\r\n//   //   handleSaveClick();\r\n//   // };\r\n\r\n//   const handleMassUpdate = (column, value, scope) => {\r\n//     if (scope === \"selected\") {\r\n//       onMassUpdate(selectedRows, column, value);\r\n//     } else {\r\n//       onMassUpdate(tableData, column, value);\r\n//     }\r\n//   };\r\n\r\n//   const editableColumns = [\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column cta-absolute\">\r\n//       <div className=\"d-flex\">\r\n//         <button\r\n//           className=\"btn btn-outline-success btn-lg m-2\"\r\n//           // onClick={handleObsoleteClick}\r\n//         >\r\n//           Obsolete\r\n//         </button>\r\n//         {/* <button\r\n//           className=\"btn btn-outline-primary btn-lg m-2\"\r\n//           onClick={() =>\r\n//             type !== \"Document\" && latestRevision !== droppedRevision\r\n//               ? showWarningToast(MSG_BOS_SAVE)\r\n//               : setShowDropdown((prev) => !prev)\r\n//           }\r\n//         >\r\n//           Mass Update\r\n//         </button> */}\r\n//       </div>\r\n\r\n//       {showDropdown && (\r\n//         <div className=\"mt-2\">\r\n//           <MassUpdateDropdown\r\n//             editableColumns={editableColumns}\r\n//             selectedRows={selectedRows}\r\n//             onApplyUpdate={handleMassUpdate}\r\n//             valueOptions={[\"Yes\", \"No\"]}\r\n//             onClose={() => setShowDropdown(false)}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ObsolescenceWidgetToolbarNativeCta;\r\n\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\nconst ObsolescenceWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n  onObsoleteClick, // New prop to handle \"Obsolete\" button click\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  const handleSaveClick = () => {\r\n    if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n      showWarningToast(MSG_BOS_SAVE);\r\n    } else {\r\n      onSave();\r\n    }\r\n  };\r\n\r\n  // Updated handleObsoleteClick to use onObsoleteClick prop\r\n  const handleObsoleteClick = () => {\r\n    // Trigger the parent's function to show the parent details\r\n    onObsoleteClick();\r\n  };\r\n\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleObsoleteClick} // Trigger the obsolete action here\r\n        >\r\n          Obsolete\r\n        </button>\r\n        {/* <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={() =>\r\n            type !== \"Document\" && latestRevision !== droppedRevision\r\n              ? showWarningToast(MSG_BOS_SAVE)\r\n              : setShowDropdown((prev) => !prev)\r\n          }\r\n        >\r\n          Mass Update\r\n        </button> */}\r\n      </div>\r\n\r\n      {showDropdown && (\r\n        <div className=\"mt-2\">\r\n          <MassUpdateDropdown\r\n            editableColumns={editableColumns}\r\n            selectedRows={selectedRows}\r\n            onApplyUpdate={handleMassUpdate}\r\n            valueOptions={[\"Yes\", \"No\"]}\r\n            onClose={() => setShowDropdown(false)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidgetToolbarNativeCta;\r\n","// import React, { useEffect, useMemo, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\n// import { Image } from \"react-bootstrap\";\r\n// import \"./ObsolescenceWidget.css\";\r\n// import Loader from \"../../components/Loader/Loader\";\r\n// import ReusableTable from \"../../components/Table/Table\";\r\n// import CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setIsDropped,\r\n//   setPlantObjectData,\r\n// } from \"../../store/droppedObjectSlice\";\r\n// import { getCardData, getTableData, tableColumns } from \"./ObsolescencedataHelper\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\n// import { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\n// import useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n// import ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\n// import { fetchData } from \"../../utils/helpers\";\r\n\r\n// const ObsolescenceWidget = () => {\r\n//   const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n//   const [tableKey, setTableKey] = useState(0);\r\n//   const [tableData, setTableData] = useState([]);\r\n//   const [isTableLoading, setIsTableLoading] = useState(false);\r\n//   const [screenLoader, setScreenLoader] = useState(false);\r\n//   const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n//   const [specData, setSpecData] = useState([]);\r\n//   const [selectableRows, setSelectableRows] = useState([]);\r\n//   const dispatch = useDispatch();\r\n//   const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n//   useEffect(() => {\r\n//     if (specData.length) {\r\n//       setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n//     }\r\n//   }, [specData]);\r\n\r\n//   const handleSave = async () => {\r\n//     console.log(\"Table Data is:\", tableData);\r\n//     setScreenLoader(true);\r\n//     console.log(\"Type of Parent:\", type);\r\n//     let parentData = [];\r\n//     let ChildNameKey;\r\n//     let ChildRevKey;\r\n//     let ChildStateKey;\r\n//     let ChildIdKey;\r\n//     if (type === \"Document\") {\r\n//       parentData = {\r\n//         SpecName: droppedObjectData.cardData.Name,\r\n//         SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n//         SpecState: droppedObjectData.cardData[\"Maturity State\"],\r\n//         SpecID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK CARD DATA\r\n//         // SpecState need to be added.\r\n//       };\r\n//       ChildNameKey = \"ItemName\";\r\n//       ChildRevKey = \"ItemRevision\";\r\n//       ChildStateKey = \"ItemState\";\r\n//       ChildIdKey = \"ItemID\";\r\n//     } else {\r\n//       console.log(\"It's a physical Product\");\r\n//       parentData = {\r\n//         ItemName: droppedObjectData.cardData.Name,\r\n//         ItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n//         ItemState: droppedObjectData.cardData[\"Maturity State\"],\r\n//         ItemID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK THIS\r\n//         // need to add Maturity State as Item State and ItemId is Dropped Revision Id.\r\n//       };\r\n//       ChildNameKey = \"SpecName\";\r\n//       ChildRevKey = \"SpecRevision\";\r\n//       ChildStateKey = \"SpecState\";\r\n//       ChildIdKey = \"SpecID\";\r\n//     }\r\n\r\n//     const formattedData = tableData.map((item) => {\r\n//       // Find matching data in bosSpecDocument\r\n//       let matchingData = bosSpecDocument.find(\r\n//         (data) =>\r\n//           data.childTitle === item.Title && data.childRevision === item.Revision\r\n//       );\r\n\r\n//       return {\r\n//         [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n//         [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n//         [ChildStateKey]: matchingData ? matchingData.childState : null, // need to check this\r\n//         [ChildIdKey]: matchingData ? matchingData.ID : null, //\r\n//         // something needs to be done here\r\n//         // [ChildStateKey]:\r\n//         ...parentData, // Merge Parent Data\r\n//         PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n//         PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n//         WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n//         PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n//         \"SAP/JDE\": item[\"SAP/JDE\"],\r\n//       };\r\n//     });\r\n\r\n//     formattedData.sort((a, b) => {\r\n//       if (a.SpecName !== b.SpecName) {\r\n//         return a.SpecName.localeCompare(b.SpecName);\r\n//       }\r\n//       return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n//     });\r\n\r\n//     console.log(\"Formatted Data:\", formattedData);\r\n//     const saveURL =\r\n//       \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n//     const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n//     console.log(\"the response from node API is:\", response);\r\n//     if (response.status === 200) {\r\n//       showSuccessToast(MSG_SAVE_SUCCESS);\r\n//       setSpecData(tableData);\r\n//       setScreenLoader(false);\r\n//     } else {\r\n//       showErrorToast(MSG_SAVE_FAILURE);\r\n//       setScreenLoader(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleMassUpdate = async (data, column, value) => {\r\n//     console.log(\"Data when the Mass Update is Clicked:\", data);\r\n//     console.log(\"Columns to Change:\", column);\r\n//     console.log(\"Value after change:\", value);\r\n\r\n//     const updatedData = data.map((row) => ({\r\n//       ...row,\r\n//       [column]: value, // Update the specified column with the new value\r\n//     }));\r\n\r\n//     console.log(\"Updated Data is:\", updatedData);\r\n//     console.log(\"Table Data is:\", tableData);\r\n\r\n//     // Merge updatedData into tableData based on matching Title & Revision\r\n//     const mergedData = tableData.map((row) => {\r\n//       const updatedRow = updatedData.find(\r\n//         (updated) =>\r\n//           updated.Title === row.Title && updated.Revision === row.Revision\r\n//       );\r\n\r\n//       return updatedRow ? updatedRow : row; // Use updated row if found, else keep original row\r\n//     });\r\n\r\n//     console.log(\"Merged Data:\", mergedData);\r\n//     updateTableData(mergedData);\r\n//   };\r\n\r\n//   console.log(\"Table Data after Adding:\", tableData);\r\n//   const selectedTableRows = useSelector(\r\n//     (state) => state.droppedObject.selectedTableRows\r\n//   );\r\n//   // Access Redux store\r\n//   const droppedObjectData = useSelector(\r\n//     (state) => state.droppedObject.droppedObjectData\r\n//   );\r\n//   console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n//   const loadingParentDetails = useSelector(\r\n//     (state) => state.droppedObject.loadingParentDetails\r\n//   );\r\n//   console.log(\"Parents Loading State:\", loadingParentDetails);\r\n//   const proposedChanges = useSelector(\r\n//     (state) => state.droppedObject.plantObjectData.proposedChanges\r\n//   );\r\n//   console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n//   console.log(\"Bos data in BOS Widget is:\", bosData);\r\n//   const bosSpecDocument = useSelector(\r\n//     (state) => state.droppedObject.BOSObjectData.specDocument\r\n//   );\r\n//   console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n//   const updateTableData = (updatedData) => {\r\n//     const newDataWithChanges = updatedData.map((newItem) => {\r\n//       const originalItem = specData.find(\r\n//         (oldItem) =>\r\n//           oldItem.Title === newItem.Title &&\r\n//           oldItem.Revision === newItem.Revision\r\n//       );\r\n\r\n//       if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n//       // Track changed cells\r\n//       const changedCells = {};\r\n//       Object.keys(newItem).forEach((key) => {\r\n//         if (newItem[key] !== originalItem[key]) {\r\n//           changedCells[key] = true; // Mark this cell as changed\r\n//         }\r\n//       });\r\n\r\n//       return { ...newItem, changedCells };\r\n//     });\r\n\r\n//     setTableData(newDataWithChanges);\r\n//   };\r\n\r\n//   console.log(\"Table Data is:\", tableData);\r\n//   useEffect(() => {\r\n//     if (tableData.length >= 0) {\r\n//       setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n//     }\r\n//   }, [tableData]); // Runs whenever tableData changes\r\n//   if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n//     var state = droppedObjectData.cardData[\"Maturity State\"];\r\n//     var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     if (!isDropped) {\r\n//       initializeDroppableArea();\r\n//     }\r\n//   }, [isDropped, initializeDroppableArea]);\r\n//   useEffect(() => {\r\n//     setIsTableLoading(loadingParentDetails);\r\n//   }, [loadingParentDetails]);\r\n\r\n//   const newTableData = useMemo(\r\n//     () => getTableData(bosSpecDocument, type),\r\n//     [bosSpecDocument, type]\r\n//   );\r\n//   useEffect(() => {\r\n//     setSpecData(newTableData);\r\n//   }, [newTableData]);\r\n\r\n//   useEffect(() => {\r\n//     if (newTableData.length >= 0) {\r\n//       console.log(\"New Table Data:\", newTableData);\r\n//       setTableData(newTableData);\r\n//       setTableKey((prevKey) => prevKey + 1); // Update table key\r\n//     }\r\n//   }, [newTableData]);\r\n//   const cardData = useMemo(\r\n//     () => getCardData(droppedObjectData),\r\n//     [droppedObjectData]\r\n//   );\r\n//   console.log(cardData);\r\n//   useEffect(() => {\r\n//     setIsCardDataAvailable(!!cardData);\r\n//   }, [cardData]);\r\n//   const columns = useMemo(\r\n//     () =>\r\n//       tableColumns(\r\n//         type,\r\n//         droppedObjectData?.cardData[\"Latest Revision\"],\r\n//         droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//       ),\r\n//     [type, droppedObjectData?.cardData]\r\n//   );\r\n\r\n//   const handleHomeClick = () => {\r\n//     initializeDroppableArea(); // Reset the droppable area\r\n//     dispatch(setIsDropped(false));\r\n//     dispatch(\r\n//       setDroppedObjectData({\r\n//         cardData: {},\r\n//         parentDetails: [],\r\n//         versions: [],\r\n//         initialDraggedData: [],\r\n//       })\r\n//     ); // Clear Redux state\r\n//     dispatch(\r\n//       setPlantObjectData({\r\n//         allPlants: [],\r\n//         initialAssignedPlants: [],\r\n//         uniquePlants: [],\r\n//         productChildren: [],\r\n//         CAName: false,\r\n//         headers: {},\r\n//       })\r\n//     );\r\n//     setTableData([]); // Clear local table data\r\n//     setIsCardDataAvailable(false);\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {screenLoader && (\r\n//         <div className=\"loading-overlay\">\r\n//           <Loader />\r\n//           <p>Saving...</p>\r\n//         </div>\r\n//       )}\r\n//       {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n//       {loading && <Loader />}\r\n//       {isDropped && (\r\n\r\n//         <>\r\n//          {/* Show initial loader when loading is true */}\r\n//          {loading && <Loader />}\r\n//           <div className=\"content-wrapper py-3 border-bottom\">\r\n//             <div className=\"d-flex \">\r\n//               <div className=\" p-0 pt-4\">\r\n//                 <Image\r\n//                   src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n//                   alt=\"home-icon\"\r\n//                   className=\"home-icon\"\r\n//                   onClick={handleHomeClick}\r\n//                 />\r\n//               </div>\r\n//               {cardData && (\r\n//                 <CardWithDragAndDrop data={cardData} widgetType=\"ObsolescenceWidget\" />\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {isTableLoading ? (\r\n//             <div className=\"loading-indicator mt-5\">\r\n//               <Loader />\r\n//             </div>\r\n//           ) : (\r\n//             <>\r\n//               <div className=\"wrapper-cta\">\r\n//                 <ObsolescenceWidgetToolbarNativeCta\r\n//                   onSave={handleSave}\r\n//                   type={type}\r\n//                   latestRevision={\r\n//                     droppedObjectData?.cardData[\"Latest Revision\"]\r\n//                   }\r\n//                   droppedRevision={\r\n//                     droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//                   }\r\n//                   selectedRows={selectedTableRows}\r\n//                   state={state}\r\n//                   tableData={selectableRows}\r\n//                   onMassUpdate={handleMassUpdate}\r\n//                 />\r\n//                 <ReusableTable\r\n//                   key={tableKey}\r\n//                   data={tableData}\r\n//                   columns={columns}\r\n//                   meta={{ updateTableData }}\r\n//                   type={type}\r\n//                   latestRevision={\r\n//                     droppedObjectData?.cardData[\"Latest Revision\"]\r\n//                   }\r\n//                   droppedRevision={\r\n//                     droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//                   }\r\n//                   widgetType=\"Obsolescence_Attribute_Widget\"\r\n//                   onSelectableRowsChange={setSelectableRows}\r\n//                 />\r\n//               </div>\r\n//             </>\r\n//           )}\r\n//         </>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n// export default ObsolescenceWidget;\r\n\r\n\r\n\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./ObsolescenceWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./ObsolescencedataHelper\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\nimport ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst ObsolescenceWidget = () => {\r\n  const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const [showParentDetails, setShowParentDetails] = useState(false); // Track whether parent details should be displayed\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"Table Data is:\", tableData);\r\n    setScreenLoader(true);\r\n    let parentData = [];\r\n    let ChildNameKey;\r\n    let ChildRevKey;\r\n    let ChildStateKey;\r\n    let ChildIdKey;\r\n\r\n    if (type === \"Document\") {\r\n      parentData = {\r\n        SpecName: droppedObjectData.cardData.Name,\r\n        SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        SpecState: droppedObjectData.cardData[\"Maturity State\"],\r\n        SpecID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK CARD DATA\r\n      };\r\n      ChildNameKey = \"ItemName\";\r\n      ChildRevKey = \"ItemRevision\";\r\n      ChildStateKey = \"ItemState\";\r\n      ChildIdKey = \"ItemID\";\r\n    } else {\r\n      parentData = {\r\n        ItemName: droppedObjectData.cardData.Name,\r\n        ItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        ItemState: droppedObjectData.cardData[\"Maturity State\"],\r\n        ItemID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK THIS\r\n      };\r\n      ChildNameKey = \"SpecName\";\r\n      ChildRevKey = \"SpecRevision\";\r\n      ChildStateKey = \"SpecState\";\r\n      ChildIdKey = \"SpecID\";\r\n    }\r\n\r\n    const formattedData = tableData.map((item) => {\r\n      let matchingData = bosSpecDocument.find(\r\n        (data) =>\r\n          data.childTitle === item.Title && data.childRevision === item.Revision\r\n      );\r\n\r\n      return {\r\n        [ChildNameKey]: matchingData ? matchingData.childName : null,\r\n        [ChildRevKey]: item.Revision,\r\n        [ChildStateKey]: matchingData ? matchingData.childState : null,\r\n        [ChildIdKey]: matchingData ? matchingData.ID : null,\r\n        ...parentData,\r\n        PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n        PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n        WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n        PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n        \"SAP/JDE\": item[\"SAP/JDE\"],\r\n      };\r\n    });\r\n\r\n    formattedData.sort((a, b) => {\r\n      if (a.SpecName !== b.SpecName) {\r\n        return a.SpecName.localeCompare(b.SpecName);\r\n      }\r\n      return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n    });\r\n\r\n    const saveURL =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n    const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n    if (response.status === 200) {\r\n      showSuccessToast(MSG_SAVE_SUCCESS);\r\n      setSpecData(tableData);\r\n      setScreenLoader(false);\r\n    } else {\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n      setScreenLoader(false);\r\n    }\r\n  };\r\n\r\n  const handleMassUpdate = async (data, column, value) => {\r\n    const updatedData = data.map((row) => ({\r\n      ...row,\r\n      [column]: value,\r\n    }));\r\n\r\n    const mergedData = tableData.map((row) => {\r\n      const updatedRow = updatedData.find(\r\n        (updated) =>\r\n          updated.Title === row.Title && updated.Revision === row.Revision\r\n      );\r\n\r\n      return updatedRow ? updatedRow : row;\r\n    });\r\n\r\n    updateTableData(mergedData);\r\n  };\r\n\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData.specDocument\r\n  );\r\n\r\n  const updateTableData = (updatedData) => {\r\n    const newDataWithChanges = updatedData.map((newItem) => {\r\n      const originalItem = specData.find(\r\n        (oldItem) =>\r\n          oldItem.Title === newItem.Title &&\r\n          oldItem.Revision === newItem.Revision\r\n      );\r\n\r\n      if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n      const changedCells = {};\r\n      Object.keys(newItem).forEach((key) => {\r\n        if (newItem[key] !== originalItem[key]) {\r\n          changedCells[key] = true;\r\n        }\r\n      });\r\n\r\n      return { ...newItem, changedCells };\r\n    });\r\n\r\n    setTableData(newDataWithChanges);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  }, [tableData]);\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(\r\n    () => getTableData(bosSpecDocument, type),\r\n    [bosSpecDocument, type]\r\n  );\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  }, [newTableData]);\r\n\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea();\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    );\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]);\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n        <>\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && (\r\n                <CardWithDragAndDrop data={cardData} widgetType=\"ObsolescenceWidget\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <ObsolescenceWidgetToolbarNativeCta\r\n                  onSave={handleSave}\r\n                  type={type}\r\n                  latestRevision={droppedObjectData?.cardData[\"Latest Revision\"]}\r\n                  droppedRevision={droppedObjectData?.cardData[\"Dropped Revision\"]}\r\n                  selectedRows={selectedTableRows}\r\n                  state={state}\r\n                  tableData={selectableRows}\r\n                  onMassUpdate={handleMassUpdate}\r\n                  onObsoleteClick={() => setShowParentDetails(true)} // Trigger parent details display\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  type={type}\r\n                  latestRevision={droppedObjectData?.cardData[\"Latest Revision\"]}\r\n                  droppedRevision={droppedObjectData?.cardData[\"Dropped Revision\"]}\r\n                  widgetType=\"Obsolescence_Attribute_Widget\"\r\n                  onSelectableRowsChange={setSelectableRows}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidget;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (ObsolescenceData, type) => {\r\n  if (!ObsolescenceData) return [];\r\n\r\n  return ObsolescenceData.map((data) => {\r\n    let rowData = {\r\n      Title: data?.childTitle || \"N/A\",\r\n      Revision: data?.childRevision || \"1\",\r\n      State: data?.childState || \"N/A\",\r\n      \"Print On Purchase Order Required\":\r\n        data.PrintOnPurchaseOrderRequired || \"No\",\r\n      \"Print On Work Order Required\": data.PrintOnWorkOrderRequired || \"No\",\r\n      \"Work Order Document Required\": data.WorkOrderDocumentRequired || \"No\",\r\n      \"Print On report Order Required\": data.PrintOnReportOrderRequired || \"No\",\r\n      \"SAP/JDE\": data[\"SAP/JDE\"] || \"No\",\r\n    };\r\n\r\n    // Add \"IsLatest\" key only if type === \"Document\"\r\n    if (type === \"Document\") {\r\n      rowData.IsLatest = data?.childLatest || \"FALSE\";\r\n    }\r\n\r\n    return rowData;\r\n  });\r\n};\r\n\r\nexport const tableColumns = (type, latestRevision, droppedRevision) => {\r\n  const baseColumns = [\r\n    { accessorKey: \"Title\", header: \"Title\" },\r\n    { accessorKey: \"Revision\", header: \"Revision\" },\r\n    { accessorKey: \"State\", header: \"State\" },\r\n  ];\r\n\r\n  if (type === \"Document\") {\r\n    baseColumns.push({ accessorKey: \"IsLatest\", header: \"Is Latest\" });\r\n  }\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ].map((columnKey) => ({\r\n    accessorKey: columnKey,\r\n    header: columnKey,\r\n    cell: ({ row, getValue, table }) => {\r\n      // Determine if the cell should be editable\r\n      const isEditable =\r\n        type === \"Document\"\r\n          ? row.original.IsLatest !== \"FALSE\" // Editable only if IsLatest is NOT \"FALSE\"\r\n          : !latestRevision || latestRevision === droppedRevision;\r\n\r\n      const handleDropdownChange = (e) => {\r\n        const updatedValue = e.target.value;\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id\r\n              ? { ...r.original, [columnKey]: updatedValue }\r\n              : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData);\r\n      };\r\n\r\n      return isEditable ? (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n          style={{\r\n            width: \"70%\",\r\n            padding: \"5px 0\",\r\n            fontSize: \"14px\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n          onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n        >\r\n          <option value=\"Yes\">Yes</option>\r\n          <option value=\"No\">No</option>\r\n        </select>\r\n      ) : (\r\n        <span>{getValue()}</span> // Show non-editable text if conditions fail\r\n      );\r\n    },\r\n  }));\r\n\r\n  return [...baseColumns, ...editableColumns];\r\n};\r\n\r\n// export const tableColumns = (type, latestRevision, droppedRevision) => [\r\n//   { accessorKey: \"Title\", header: \"Title\" },\r\n//   { accessorKey: \"Revision\", header: \"Revision\" },\r\n//   { accessorKey: \"State\", header: \"State\" },\r\n//   ...[\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ].map((columnKey) => ({\r\n//     accessorKey: columnKey,\r\n//     header: columnKey,\r\n//     cell: ({ row, getValue, table }) => {\r\n//       const handleDropdownChange = (e) => {\r\n//         const updatedValue = e.target.value;\r\n//         const updatedData = table\r\n//           .getRowModel()\r\n//           .rows.map((r) =>\r\n//             r.id === row.id\r\n//               ? { ...r.original, [columnKey]: updatedValue }\r\n//               : r.original\r\n//           );\r\n\r\n//         table.options.meta?.updateTableData(updatedData);\r\n//       };\r\n\r\n//       return (\r\n//         <select\r\n//           value={getValue()}\r\n//           onChange={handleDropdownChange}\r\n//           className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n//           style={{\r\n//             width: \"70%\",\r\n//             padding: \"5px\",\r\n//             fontSize: \"14px\",\r\n//             color: \"#333\",\r\n//             background: \"none\",\r\n//             border: \"none\",\r\n//             textAlign: \"left\",\r\n//           }}\r\n//           onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n//           onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n//         >\r\n//           <option value=\"Yes\">Yes</option>\r\n//           <option value=\"No\">No</option>\r\n//         </select>\r\n//       );\r\n//     },\r\n//   })),\r\n// ];\r\n\r\n// {\r\n//   accessorKey: \"MBom\",\r\n//   header: \"MBom\",\r\n//   cell: ({ row, getValue, table }) => {\r\n//     const handleDropdownChange = (e) => {\r\n//       if (!CAName) return; // Prevent changes when disabled\r\n//       const updatedValue = e.target.value;\r\n\r\n//       // Update the table data state here\r\n//       const updatedData = table\r\n//         .getRowModel()\r\n//         .rows.map((r) =>\r\n//           r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n//         );\r\n\r\n//       table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n//     };\r\n\r\n//     return (\r\n//       <select\r\n//         value={getValue()}\r\n//         onChange={handleDropdownChange}\r\n//         disabled={!CAName} // Disable dropdown if CAName is false\r\n//         className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n//         style={{\r\n//           ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n//           width: \"70%\",\r\n//           padding: \"5px\",\r\n//           fontSize: \"14px\",\r\n//           color: \"#333\",\r\n//           background: \"none\",\r\n//           border: \"none\",\r\n//           textAlign: \"left\",\r\n//         }}\r\n//         onMouseOver={(e) => {\r\n//           if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n//         }}\r\n//         onMouseOut={(e) => {\r\n//           if (CAName) e.target.style.border = \"none\";\r\n//         }}\r\n//       >\r\n//         <option value=\"Make\">Make</option>\r\n//         <option value=\"Buy\">Buy</option>\r\n//       </select>\r\n//     );\r\n//   },\r\n// },\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useObsolescenceDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport ObsolescenceWidget from \"./ObsolescenceWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <ObsolescenceWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","forwardRef","_ref","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","cell","_ref2","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","onClick","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","useObsolescenceWidget","showErrorToast","dispatch","useDispatch","ENOVIA_BASE_URL","process","email","window","widget","getValue","log","handleObsolescenceWidget","async","collabSpace","parentName","parentRevision","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","concat","parentDirection","urlObjWAF","ChildObject","callEnoviaWebService","status","output","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","sSpec","dataelements","trim","secondaryTitle","revision","stateNLS","name","revisionBody","child","body","identifier","source","relativePath","push","RevisionUrl","response","convertRevisionToNumber","rev","test","parseInt","number","i","charCodeAt","results","latestVersion","versions","reduce","latest","current","doc","some","version","_objectSpread","isLatestRevision","SpecName","SpecRevision","Items","obj","ItemName","ItemRevision","Specifications","fetchData","mergedData","spec","matchingDoc","find","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","setSpecDocument","error","useObsolescenceDropableArea","isDropped","useSelector","droppedObject","loading","validTypes","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","success","_dataItems$","_dataItems$2","draggedObjectData","cardData","Type","includes","setLoading","setDroppedObjectData","setIsDroppedAction","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","editableColumns","selectedRows","onApplyUpdate","valueOptions","onClose","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","display","e","target","value","col","disabled","val","cursor","onSave","tableData","onMassUpdate","latestRevision","droppedRevision","onObsoleteClick","showDropdown","setShowDropdown","handleObsoleteClick","MassUpdateDropdown","handleMassUpdate","scope","ObsolescenceWidget","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","selectableRows","setSelectableRows","showParentDetails","setShowParentDetails","showSuccessToast","changedCells","selectedTableRows","droppedObjectData","loadingParentDetails","plantObjectData","proposedChanges","bosSpecDocument","BOSObjectData","specDocument","updateTableData","updatedData","newDataWithChanges","newItem","originalItem","oldItem","Title","Revision","Object","keys","key","prevKey","newTableData","getTableData","ObsolescenceData","rowData","State","IsLatest","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","baseColumns","header","columnKey","_table$options$meta","updatedValue","r","options","meta","padding","fontSize","background","border","textAlign","onMouseOver","onMouseOut","Loader","handleHomeClick","setIsDropped","parentDetails","initialDraggedData","setPlantObjectData","allPlants","initialAssignedPlants","uniquePlants","productChildren","CardWithDragAndDrop","widgetType","ObsolescenceWidgetToolbarNativeCta","ChildNameKey","ChildRevKey","ChildStateKey","ChildIdKey","parentData","SpecState","SpecID","ItemState","ItemID","formattedData","matchingData","ID","sort","a","b","localeCompare","Number","MSG_SAVE_SUCCESS","MSG_SAVE_FAILURE","updatedRow","updated","ReusableTable","onSelectableRowsChange","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener","extractIdsFromTitles","newClasses","itemTitle","replace","matchedPlant","plant","toLowerCase","filter","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","classes","declassifyResponse","JSON","stringify","handleAddData","productChilds","hasMBOM","NotPropagableChilds","prodChild","change","action","ErrorObject","classId","missingIn","join","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","message","filteredNewClasses","classifyUrl","classifyResponse","childs","childclassifyResponse","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","AllClasses","finalArray","WAFData","loadWAFData","fetchOOTBData","url","method","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","Array","isArray","every","childTitles","errorItem","updateBody","MBOMName","propagateClasses","_response$member$","nextApiUrl","cestamp","member","patchUrl"],"sourceRoot":""}