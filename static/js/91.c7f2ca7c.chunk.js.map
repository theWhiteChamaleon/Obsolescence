{"version":3,"file":"static/js/91.c7f2ca7c.chunk.js","mappings":"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","sources":["components/DragAndDrop/DragAndDrop.jsx","components/Popup/Popup.jsx","pages/ObsolescenceWidget/ObsolescencedataHelper.js","hooks/useObsolescenceWidget.js","hooks/useObsolescenceDropableArea.js","pages/ObsolescenceWidget/MassUpdateDropdown.jsx","pages/ObsolescenceWidget/ObsolescenceWidgetToolbarNativeCta.jsx","pages/ObsolescenceWidget/ObsolescenceWidget.jsx","pages/ObsolescenceWidget/WidgetLifecycle.jsx","pages/ObsolescenceWidget/ObsolescenceIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\n// export const getTableData = (tableData, type, CAData) => {\r\n//   console.log(\"cadata datahelpers\",CAData );\r\n  \r\n//   if (!tableData) return [];\r\n\r\n//   return tableData.map((data) => {\r\n//     if (type === \"Change Action\") {\r\n//       return {\r\n//         ItemName: data?.ItemTitle || \"N/A\",\r\n//         Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n//         ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n//       };\r\n//     } else {\r\n//       console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n//       return {\r\n//         Plant: data?.title || \"N/A\",\r\n//         Seq: data?.Seq || \"1\",\r\n//         Status: data?.PlantStatus || \"Pending\",\r\n//         \"MFG Change\": data?.MFGChange || \"N/A\",\r\n//         \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n//         Change: data?.Change || CAData.CAName ||\"N/A\",\r\n//         \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n//         \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n//         \"ERP Status\": \"Active\" || \"N/A\",\r\n//         \"ERP Export\": \"Yes\" || \"N/A\",\r\n//         \"Lead Plant\": false,\r\n//         MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n//         \"Sort Value\": \"\",\r\n//       };\r\n//     }\r\n//   });\r\n// };\r\n\r\nexport const getTableData = (tableData, type) => {\r\n  if (!tableData) return [];\r\n\r\n  const revisionMap = {};\r\n  \r\n  // Extracting Revision and State from instance response\r\n  // if (instanceResponse?.member?.length) {\r\n  //   instanceResponse.member.forEach((item) => {\r\n  //     const instance = item?.[\"dseng:EngInstance\"]?.member?.[0];\r\n  //     const parentId = instance?.parentObject?.identifier;\r\n  //     const name = instance?.name || \"\";\r\n\r\n  //     // Extract revision as the part after the last dot (e.g., \".1\")\r\n  //     const revision = name.split(\".\").pop();\r\n  //     revisionMap[parentId] = {\r\n  //       revision,\r\n  //       state: \"N/A\", // Add logic here if you have a way to extract 'state'\r\n  //     };\r\n  //   });\r\n  // }\r\n\r\n  return tableData.map((data) => {\r\n    const parentId = data?.ItemId || data?.id;\r\n    const revisionData = revisionMap[parentId] || { revision: \"N/A\", state: \"N/A\" };\r\n\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        \"Parent Item Name\": data.title || \"N/A\",\r\n        Plant: data?.ItemPlants || \"N/A\",\r\n        \"Parent Item Revision\": data.revision,\r\n        \"Parent Item State\": data.state,\r\n      };\r\n    } else {\r\n      return {\r\n        \"Parent Item Name\": data.title,\r\n        Plant: data?.title || \"N/A\",\r\n        \"Parent Item Revision\": data.revision,\r\n        \"Parent Item State\": data.state,\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  // return [\r\n  //   { accessorKey: \"Plant\", header: \"Plant\"},\r\n  //   { accessorKey: \"Seq\", header: \"Seq\" },\r\n  //   { accessorKey: \"Status\", header: \"Status\" },\r\n  //   { accessorKey: \"Change\", header: \"Change\" },\r\n  //   { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n  //   { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n  //   { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n  //   { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n  //   {\r\n  //     accessorKey: \"MBom\",\r\n  //     header: \"MBom\",\r\n      \r\n  //   },\r\n  //   { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n  //   { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n  //   { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n  //   { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  // ];\r\n\r\n  return [\r\n    \r\n    { accessorKey: \"Parent Item Name\", header: \"Parent Item Name\"},\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Parent Item Revision\", header: \"Parent Item Revision\" },\r\n    { accessorKey: \"Parent Item State\", header: \"Parent Item State\" },\r\n  ];\r\n  \r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport async function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nexport async function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/7D56FB4BAE741300682C5271000001CF?mask=dsmveng%3AEngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nexport async function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nexport async function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}","// import { useDispatch, useSelector } from \"react-redux\";\r\n\r\n// import {\r\n//   setCAAllPlants,\r\n//   setCAHeaders,\r\n//   setCAItemDetails,\r\n//   setHeaders,\r\n//   setIsMFGCA,\r\n//   setObselenceObjectData,\r\n//   setParentDetailsLoading,\r\n//   // setPlantObjectData,\r\n//   setProductChildren,\r\n//   setProposedChanges,\r\n//   setSpecDocument,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\n// import useToast from \"./useToast\";\r\n// import { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\n// import { initWidget } from \"../lib/widget\";\r\n// import { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n// import { useCallback, useEffect } from \"react\";\r\n// import { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\n// import { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n// import {\r\n//   getAssignedClasses,\r\n//   getItemDetails,\r\n//   getLatestRevision,\r\n//   getScopedItms,\r\n// } from \"../pages/plantAssignment/dataHelpers\";\r\n// import { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n// import { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\n// import { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\n\r\n// const useObsolescenceWidget = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const dispatch = useDispatch();\r\n//   const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n//   let email = window.widget.getValue(\"email\");\r\n\r\n//   console.log(\"Email in useObsolescenceWidget:\", email);\r\n//   // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n//   // const {droppedObjectData}= useSelector ((state)=> state.droppedObjectData)\r\n//   // console.log(\"SSSSSSSSSSSSSSSs\", droppedObjectData)\r\n\r\n//   const handleObsolescenceWidget = async (collabSpace,objectId, type, relativePath) => {\r\n//     if (!collabSpace || !objectId || !type || !relativePath) {\r\n//       console.error(\"[handleObsolescenceWidget] ❌ Missing required argument(s):\", {\r\n//         collabSpace,\r\n//         objectId,\r\n//         type,\r\n//         relativePath,\r\n//       });\r\n//       return;\r\n//     }\r\n    \r\n//     try {\r\n//       console.log(\"Object id is:\", objectId);\r\n//       console.log(\"Object type is:\", type);\r\n//       console.log(\"Relative path is:\", relativePath);\r\n\r\n//       dispatch(setParentDetailsLoading(true));\r\n\r\n//       const headers = await fetchCsrfToken();\r\n//       console.log(\"headerssss\", headers);\r\n\r\n//       if (!headers) {\r\n//         showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n//         return;\r\n//       }\r\n\r\n//       console.log(\"[useObsolescenceWidget] CSRF Headers:\", headers);\r\n//       let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n//       let body = {\r\n//         referencedObjects: [\r\n//           {\r\n//             source: ENOVIA_BASE_URL,\r\n//             type: type,\r\n//             identifier: objectId,\r\n//             relativePath: relativePath,\r\n//           },\r\n//         ],\r\n//       };\r\n\r\n//       let ChildObject = await callEnoviaWebService(\r\n//         \"POST\",\r\n//         baseURL,\r\n//         body,\r\n//         headers\r\n//       );\r\n\r\n//       console.log(\"SpecDetails Response:\", ChildObject);\r\n//       if (ChildObject.status && ChildObject.output) {\r\n//         let member =\r\n//           ChildObject?.output?.member[0][\"dseng:EngInstance\"]?.member;\r\n//           console.log(\"🔍 EngInstance members:\", member);\r\n\r\n//         if (member?.length > 0) {\r\n//           let url = [];\r\n//           member &&\r\n//             member.map((items) => {\r\n//               url.push(\r\n//                 items.parentObject?.source + items.parentObject?.relativePath\r\n//               );\r\n//             });\r\n//           console.log(\"URL\", url);\r\n//           let revisionStateData = [];\r\n//           if (url) {\r\n//             const promises = url.map(async (apiPath) => {\r\n//               const revisionState = await callEnoviaWebService(\r\n//                 \"GET\",\r\n//                 apiPath,\r\n//                 \"\",\r\n//                 headers\r\n//               );\r\n//               if (revisionState) {\r\n//                 revisionStateData = [\r\n//                   ...revisionStateData,\r\n//                   ...revisionState?.output?.member,\r\n//                 ];\r\n//               }\r\n//             });\r\n//             await Promise.all(promises);\r\n//           }\r\n\r\n          \r\n//           console.log(\"revisionStateData\", revisionStateData);\r\n//           dispatch(\r\n//             setObselenceObjectData({ parentObjectData: revisionStateData })\r\n//           );\r\n//         } else {\r\n//           console.log(\"Not working\");\r\n//           console.warn(\"⚠️ No parent object members found in locate call.\");\r\n//         }\r\n//         // Handle \"Change Action\" type separately\r\n//         // if (type === \"Change Action\") {\r\n//         //   let isMFGCA = false;\r\n//         //   console.log(\"The object Type is Change Action\");\r\n//         //   const fetchChangeActionData = async () => {\r\n//         //     const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n//         //     const response = await callEnoviaWebService(\r\n//         //       \"GET\",\r\n//         //       CAURL,\r\n//         //       \"\",\r\n//         //       headers\r\n//         //     );\r\n//         //     console.log(\"Response from Change Action URL:\", response);\r\n\r\n//         //     if (response.status && response.output) {\r\n//         //       const realizedChanges = response.output.realizedChanges.map(\r\n//         //         (realizedChange) => realizedChange.where.identifier\r\n//         //       );\r\n//         //       const changeProcessingPromises =\r\n//         //         response.output.proposedChanges.map(async (change) => {\r\n//         //           let ItemId = change.where.identifier;\r\n//         //           let ItemType = change.where.type;\r\n\r\n//         //           if (change.target === \"NewVersion\") {\r\n//         //             const sLatestID = await getLatestRevision(\r\n//         //               ItemId,\r\n//         //               ItemType,\r\n//         //               headers\r\n//         //             );\r\n//         //             if (realizedChanges.includes(sLatestID)) {\r\n//         //               ItemId = sLatestID;\r\n//         //             }\r\n//         //           }\r\n//         //           if (\r\n//         //             ItemType !== \"Raw_Material\" &&\r\n//         //             ItemType !== \"VPMReference\"\r\n//         //           ) {\r\n//         //             isMFGCA = true;\r\n//         //             const mfgDetails = await getScopedItms(ItemId, headers);\r\n//         //             console.log(\"MFG Details are:\", mfgDetails);\r\n//         //             ItemId = mfgDetails.identifier;\r\n//         //             ItemType = mfgDetails.type;\r\n//         //           }\r\n//         //           if (ItemId !== undefined && ItemType !== undefined) {\r\n//         //             try {\r\n//         //               const [ItemPlants, Iteminfo] = await Promise.all([\r\n//         //                 getAssignedClasses(ItemId, headers),\r\n//         //                 getItemDetails(ItemId, ItemType, headers),\r\n//         //               ]);\r\n\r\n//         //               ItemDetails.push({\r\n//         //                 ItemId,\r\n//         //                 ItemType,\r\n//         //                 ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n//         //                 ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n//         //                 ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n//         //                 ItemPlants,\r\n//         //               });\r\n//         //             } catch (err) {\r\n//         //               console.error(\r\n//         //                 `Error processing change for item ${ItemId}:`,\r\n//         //                 err\r\n//         //               );\r\n//         //             }\r\n//         //           }\r\n//         //         });\r\n\r\n//         //       await Promise.all(changeProcessingPromises);\r\n//         //     } else {\r\n//         //       console.error(\"Invalid response structure or no proposed changes.\");\r\n//         //     }\r\n//         //   };\r\n//         //   const CAAllPlantsData = async () => {\r\n//         //     // Replace this with your actual API call\r\n//         //     const allPlants = await getAllPlants(\r\n//         //       [collabSpace],\r\n//         //       headers,\r\n//         //       objectId\r\n//         //     ); // getAllPlants wants collabspace as an array.\r\n//         //     console.log(\"Parallel API response:\", allPlants);\r\n//         //     dispatch(setCAAllPlants(allPlants));\r\n//         //   };\r\n\r\n//         //   // Run both functions in parallel\r\n//         //   await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n//         //   dispatch(setParentDetailsLoading(false));\r\n//         //   dispatch(setCAItemDetails(ItemDetails));\r\n//         //   dispatch(setIsMFGCA(isMFGCA));\r\n//         //   dispatch(setCAHeaders(headers));\r\n//         // } else {\r\n\r\n//         //   // Step 1: Fetch user group collaboration spaces\r\n//         //   const userGroupCollab = await getUserGroupCollab(\r\n//         //     headers,\r\n//         //     objectId,\r\n//         //     email\r\n//         //   );\r\n//         //   console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n//         //   let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n//         //   console.log(\r\n//         //     \"[Use Plant Assignment] All CollabSpaces:\",\r\n//         //     allCollabSpaces\r\n//         //   );\r\n\r\n//         //   // Step 2: Fetch all plants if collab spaces exist\r\n//         //   let allPlants = [];\r\n//         //   if (allCollabSpaces.length > 0) {\r\n//         //     allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n//         //     console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n//         //   } else {\r\n//         //     console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n//         //   }\r\n\r\n//         // }\r\n//         if (type === \"Change Action\") {\r\n//           let isMFGCA = false;\r\n//           let ItemDetails = []; \r\n//           console.log(\"The object Type is Change Action\");\r\n//           const fetchChangeActionData = async () => {\r\n//             const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n//             const response = await callEnoviaWebService(\r\n//               \"GET\",\r\n//               CAURL,\r\n//               \"\",\r\n//               headers\r\n//             );\r\n//             console.log(\"Response from Change Action URL:\", response);\r\n\r\n//             if (response.status && response.output) {\r\n//               const realizedChanges = response.output.realizedChanges.map(\r\n//                 (realizedChange) => realizedChange.where.identifier\r\n//               );\r\n//               const changeProcessingPromises =\r\n//                 response.output.proposedChanges.map(async (change) => {\r\n//                   let ItemId = change.where.identifier;\r\n//                   let ItemType = change.where.type;\r\n\r\n//                   if (change.target === \"NewVersion\") {\r\n//                     const sLatestID = await getLatestRevision(\r\n//                       ItemId,\r\n//                       ItemType,\r\n//                       headers\r\n//                     );\r\n//                     if (realizedChanges.includes(sLatestID)) {\r\n//                       ItemId = sLatestID;\r\n//                     }\r\n//                   }\r\n//                   if (\r\n//                     ItemType !== \"Raw_Material\" &&\r\n//                     ItemType !== \"VPMReference\"\r\n//                   ) {\r\n//                     isMFGCA = true;\r\n//                     const mfgDetails = await getScopedItms(ItemId, headers);\r\n//                     console.log(\"MFG Details are:\", mfgDetails);\r\n//                     ItemId = mfgDetails.identifier;\r\n//                     ItemType = mfgDetails.type;\r\n//                   }\r\n//                   if (ItemId !== undefined && ItemType !== undefined) {\r\n//                     try {\r\n//                       const [ItemPlants, Iteminfo] = await Promise.all([\r\n//                         getAssignedClasses(ItemId, headers),\r\n//                         getItemDetails(ItemId, ItemType, headers),\r\n//                       ]);\r\n\r\n//                       ItemDetails.push({\r\n//                         ItemId,\r\n//                         ItemType,\r\n//                         ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n//                         ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n//                         ItemMBOM:\r\n//                           Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]\r\n//                             ?.EMR_hasMBOM || \"N/A\",\r\n//                         ItemPlants,\r\n//                       });\r\n//                     } catch (err) {\r\n//                       console.error(\r\n//                         `Error processing change for item ${ItemId}:`,\r\n//                         err\r\n//                       );\r\n//                     }\r\n//                   }\r\n//                 });\r\n\r\n//               await Promise.all(changeProcessingPromises);\r\n//             } else {\r\n//               console.error(\r\n//                 \"Invalid response structure or no proposed changes.\"\r\n//               );\r\n//             }\r\n//           };\r\n//           const CAAllPlantsData = async () => {\r\n//             // Replace this with your actual API call\r\n//             const allPlants = await getAllPlants(\r\n//               [collabSpace],\r\n//               headers,\r\n//               objectId\r\n//             ); // getAllPlants wants collabspace as an array.\r\n//             console.log(\"Parallel API response:\", allPlants);\r\n//             dispatch(setCAAllPlants(allPlants));\r\n//           };\r\n\r\n//           // Run both functions in parallel\r\n//           await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n//           dispatch(setParentDetailsLoading(false));\r\n//           dispatch(setCAItemDetails(ItemDetails));\r\n//           dispatch(setIsMFGCA(isMFGCA));\r\n//           dispatch(setCAHeaders(headers));\r\n//         } else {\r\n//           // Step 1: Fetch user group collaboration spaces\r\n//           const userGroupCollab = await getUserGroupCollab(\r\n//             headers,\r\n//             objectId,\r\n//             email\r\n//           );\r\n//           console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n//           let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n//           console.log(\r\n//             \"[Use Plant Assignment] All CollabSpaces:\",\r\n//             allCollabSpaces\r\n//           );\r\n\r\n//           // Step 2: Fetch all plants if collab spaces exist\r\n//           let allPlants = [];\r\n//           if (allCollabSpaces.length > 0) {\r\n//             allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n//             console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n//           } else {\r\n//             console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n//           }\r\n\r\n//           // Step 3: Fetch assigned plants if there are any\r\n//           if (allPlants.length > 0) {\r\n//             const plants = await fetchAssignedPlants(\r\n//               allPlants,\r\n//               headers,\r\n//               objectId\r\n//             );\r\n//             console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n//             if (plants.success) {\r\n//               dispatch(setObselenceObjectData(plants.data.plantData));\r\n//               dispatch(setHeaders(headers));\r\n//             } else {\r\n//               console.error(\"Failed to fetch plant data.\");\r\n//             }\r\n//           } else {\r\n//             console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n//           }\r\n\r\n//           // Step 4: Fetch Product Children based on type\r\n//           let getProductChildren = {};\r\n//           if (type === \"Raw_Material\") {\r\n//             getProductChildren = { success: true, data: [] };\r\n//           } else {\r\n//             getProductChildren = await fetchProductChildren(\r\n//               headers,\r\n//               objectId,\r\n//               type\r\n//             );\r\n//           }\r\n\r\n//           console.log(\"Type After:\", type);\r\n//           console.log(\r\n//             \"[Use Plant Assignment] Product Children:\",\r\n//             getProductChildren\r\n//           );\r\n\r\n//           if (getProductChildren.success) {\r\n//             dispatch(setProductChildren(getProductChildren.data));\r\n//           }\r\n\r\n//           // Step 5: Fetch Change Action details\r\n//           const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n//           console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n//           if (getCaDetails.success) {\r\n//             dispatch(setCAName(getCaDetails.data));\r\n//             dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n//             dispatch(setCAData(getCaDetails.CAData));\r\n//           }\r\n\r\n//           console.log(\"[Plant Assignment] All services executed successfully.\");\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"[useObsolescenceWidget] Error:\", error);\r\n//       throw error; // Let the caller handle the error\r\n//     } finally {\r\n//       dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n//     }\r\n//   };\r\n\r\n//   return { handleObsolescenceWidget };\r\n// };\r\n\r\n// export default useObsolescenceWidget;\r\n\r\n// // response.output.results.forEach((item) => {\r\n// //   // Find the latest version based on the 'revision' key\r\n// //   const latestVersion = item.versions.reduce((latest, current) => {\r\n// //     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n// //       ? current\r\n// //       : latest;\r\n// //   });\r\n\r\n// //   // Update 'isLatestRevision' for each document\r\n// //   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n// //     ...doc,\r\n// //     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n// //   }));\r\n// // });\r\n\r\n// // // Function to convert revision to a comparable numeric value\r\n// // function convertRevisionToNumber(rev) {\r\n// //   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n// //   let number = 0;\r\n// //   for (let i = 0; i < rev.length; i++) {\r\n// //     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n// //   }\r\n// //   return number; // Handles A-Z, AA-ZZ revisions\r\n// // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setObselenceObjectData,\r\n  setParentDetailsLoading,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\nimport {\r\n  getAssignedClasses,\r\n  getItemDetails,\r\n  getLatestRevision,\r\n  getScopedItms,\r\n} from \"../pages/plantAssignment/dataHelpers\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\n\r\nconst useObsolescenceWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  const handleObsolescenceWidget = async (collabSpace, objectId, type, relativePath) => {\r\n    if (!collabSpace || !objectId || !type || !relativePath) {\r\n      console.error(\"[handleObsolescenceWidget] ❌ Missing required argument(s):\", {\r\n        collabSpace,\r\n        objectId,\r\n        type,\r\n        relativePath,\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      console.log(\"Relative path is:\", relativePath);\r\n\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      console.log(\"Fetched CSRF headers:\", headers);\r\n\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        dispatch(setParentDetailsLoading(false));\r\n        return;\r\n      }\r\n\r\n      // Locate parent object and fetch revision states\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n      let body = {\r\n        referencedObjects: [\r\n          {\r\n            source: ENOVIA_BASE_URL,\r\n            type: type,\r\n            identifier: objectId,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n\r\n      let ChildObject = await callEnoviaWebService(\"POST\", baseURL, body, headers);\r\n      console.log(\"Locate API response:\", ChildObject);\r\n\r\n      if (ChildObject.status && ChildObject.output) {\r\n        let member = ChildObject?.output?.member[0][\"dseng:EngInstance\"]?.member;\r\n        console.log(\"Locate API members:\", member);\r\n        if (member?.length > 0) {\r\n          let url = [];\r\n          member.forEach((items) => {\r\n            url.push(items.parentObject?.source + items.parentObject?.relativePath);\r\n          });\r\n          console.log(\"Parent object URLs to fetch revision state:\", url);\r\n\r\n          let revisionStateData = [];\r\n          if (url.length > 0) {\r\n            const promises = url.map(async (apiPath) => {\r\n              const revisionState = await callEnoviaWebService(\"GET\", apiPath, \"\", headers);\r\n              console.log(\"Revision state response for\", apiPath, \":\", revisionState);\r\n              if (revisionState) {\r\n                revisionStateData = [...revisionStateData, ...revisionState?.output?.member];\r\n              }\r\n            });\r\n            await Promise.all(promises);\r\n          }\r\n\r\n          dispatch(setObselenceObjectData({ parentObjectData: revisionStateData }));\r\n          console.log(\"Dispatched parentObjectData with revision state data\");\r\n        } else {\r\n          console.warn(\"⚠️ No parent object members found in locate call.\");\r\n        }\r\n      }\r\n\r\n      // === Handle Change Action type separately ===\r\n      if (type === \"Change Action\") {\r\n        let isMFGCA = false;\r\n        let ItemDetails = [];\r\n\r\n        const fetchChangeActionData = async () => {\r\n          const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\"GET\", CAURL, \"\", headers);\r\n          console.log(\"Change Action API response:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const proposedChanges = response.output.proposedChanges || [];\r\n            const realizedChanges = (response.output.realizedChanges || []).map(\r\n              (rc) => rc.where.identifier\r\n            );\r\n            console.log(\"Proposed changes:\", proposedChanges);\r\n            console.log(\"Realized changes identifiers:\", realizedChanges);\r\n\r\n            await Promise.all(proposedChanges.map(async (change) => {\r\n              let ItemId = change.where.identifier;\r\n              let ItemType = change.where.type;\r\n\r\n              console.log(`Processing proposed change: ItemId=${ItemId}, ItemType=${ItemType}, target=${change.target}`);\r\n\r\n              if (change.target === \"NewVersion\") {\r\n                const sLatestID = await getLatestRevision(ItemId, ItemType, headers);\r\n                if (realizedChanges.includes(sLatestID)) {\r\n                  ItemId = sLatestID;\r\n                }\r\n              }\r\n\r\n              if (ItemType !== \"Raw_Material\" && ItemType !== \"VPMReference\") {\r\n                isMFGCA = true;\r\n                const mfgDetails = await getScopedItms(ItemId, headers);\r\n                if (mfgDetails && mfgDetails.identifier && mfgDetails.type) {\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n              }\r\n\r\n              if (ItemId && ItemType) {\r\n                try {\r\n                  const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    getAssignedClasses(ItemId, headers),\r\n                    getItemDetails(ItemId, ItemType, headers),\r\n                  ]);\r\n                  ItemDetails.push({\r\n                    ItemId,\r\n                    ItemType,\r\n                    ItemState: Iteminfo?.member[0]?.state || \"N/A\",\r\n                    ItemTitle: Iteminfo?.member[0]?.title || \"N/A\",\r\n                    ItemMBOM: Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                    ItemPlants,\r\n                  });\r\n                } catch (err) {\r\n                  console.error(`Error processing change for item ${ItemId}:`, err);\r\n                }\r\n              }\r\n            }));\r\n\r\n            console.log(\"Completed processing all proposed changes. ItemDetails:\", ItemDetails);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n\r\n        const CAAllPlantsData = async () => {\r\n          const allPlants = await getAllPlants([collabSpace], headers, objectId);\r\n          console.log(\"All Plants data fetched for CA:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n        };\r\n\r\n        // Run both in parallel\r\n        await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n        dispatch(setParentDetailsLoading(false));\r\n        console.log(\"Dispatched CA data and loading completed\");\r\n      } else {\r\n        // === Handle non Change Action types ===\r\n        const userGroupCollab = await getUserGroupCollab(headers, objectId, email);\r\n        console.log(\"User group collaboration spaces:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        let allPlants = [];\r\n\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"All plants for non-CA type:\", allPlants);\r\n        }\r\n\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(allPlants, headers, objectId);\r\n          console.log(\"Assigned plants response:\", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setObselenceObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          }\r\n        }\r\n\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(headers, objectId, type);\r\n          console.log(\"Product children fetched:\", getProductChildren);\r\n        }\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        const getCaDetails = await fetchCADetails(headers, objectId);\r\n        console.log(\"CA Details fetched:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          // Uncomment if you add these actions in your slice\r\n          // dispatch(setCAName(getCaDetails.data));\r\n          // dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useObsolescenceWidget] Error:\", error);\r\n      throw error;\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false));\r\n      console.log(\"setParentDetailsLoading(false) dispatched in finally\");\r\n    }\r\n  };\r\n\r\n  return { handleObsolescenceWidget };\r\n};\r\n\r\nexport default useObsolescenceWidget;\r\n","// import { useCallback, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\n// import { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// // Custom hook\r\n// import usePlantAssignment from \"./usePlantAssignment\";\r\n// // Reusable services\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({\r\n//           dataItems,\r\n//         });\r\n\r\n//         // const cardownerResult = await fetchCardOwnerDetailsService({\r\n//         //   dataItems,\r\n//         //   headers,\r\n//         // });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           // Merge the data from both services\r\n//           // const combineData = {\r\n//           //   cardData: objectDetailsResult.data.cardData,\r\n//           //   ownerData: cardownerResult.data.ownerData,\r\n//           // };\r\n\r\n//           dispatch(\r\n//             setDroppedObjectData({\r\n//               cardData: objectDetailsResult.data.cardData,\r\n//             })\r\n//           );\r\n\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // call usePlantAssignment after successfully fetching object details\r\n//           if (objectDetailsResult) {\r\n//             await handleObsolescenceWidget(\r\n//               draggedObjectData[\"Collaborative Space\"],\r\n//               draggedObjectData[\"Maturity State\"],\r\n//               dataItems[0]?.objectId,\r\n//               dataItems[0]?.objectType,\r\n//               draggedObjectData.Name,\r\n//               draggedObjectData[\"Dropped Revision\"]\r\n//             );\r\n//           }\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       setLoading(true); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         setLoading(false);\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         console.log(\r\n//           \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n//         );\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast]\r\n//   );\r\n//   // Initialize droppable area\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n//       );\r\n//       dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n//     } else {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n//       );\r\n//     }\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100); // Check every 100ms\r\n\r\n//     return () => clearInterval(interval); // Cleanup interval on unmount\r\n//   }, [handleDrop, dispatch]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n//           if (\r\n//             objectType !== \"VPMReference\" &&\r\n//             objectType !== \"Change Action\"\r\n//           ) {\r\n//             showErrorToast(\"Please select CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n////////////////////////////////////////////////original///////////////////////////\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult= await getDroppedObjectDetails({ dataItems });\r\n//         console.log(\"[Object Details Result]:\", objectDetailsResult);\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n//           console.log(\"Maturity state\", maturityState)\r\n\r\n//           if (objectType === \"Change Action\") {\r\n//             const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n//             if (maturityState === \"Completed\") {\r\n//               showErrorToast(\"CA is already completed.\");\r\n//               dispatch(setLoading(false));\r\n//               return;\r\n//             }\r\n//           }\r\n\r\n//           if ((objectType === \"Physical Product\") && (maturityState !== \"Released\")) {\r\n//             showErrorToast(\"Product is not released.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//            // draggedObjectData[\"Collaborative Space\"],\r\n//            // draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData[\"relativePath\"],\r\n//             // draggedObjectData.Name,\r\n//           //  draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n////////////////////////////////////////////////////////////original above//////////////////\r\n\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setLoading,setObselenceObjectData,\r\n  setIsDropped as setIsDroppedAction,\r\n} from \"../store/droppedObjectSlice\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport useObsolescenceWidget from \"./useObsolescenceWidget\";\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useObsolescenceDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const validTypes = [\"VPMReference\", \"Physical Product\", \"Change Action\"];\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        console.log(\r\n          \"[FetchObjectDetails] Requesting with dataItems:\",\r\n          dataItems\r\n        );\r\n\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        console.log(\"[FetchObjectDetails] API response:\", objectDetailsResult);\r\n\r\n        if (objectDetailsResult.success) {\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          const objectType = draggedObjectData?.Type;\r\n          const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n\r\n          console.log(\"[Dragged Object Type]:\", objectType);\r\n          console.log(\"[Maturity State]:\", maturityState);\r\n\r\n          // if (!validTypes.includes(objectType)) {\r\n          //   showErrorToast(\"Please select a CA or Engg Item.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n\r\n          // if (objectType === \"Change Action\" && maturityState === \"Completed\") {\r\n          //   showErrorToast(\"CA is already completed.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n\r\n          // if (objectType === \"Physical Product\" && maturityState !== \"Released\") {\r\n          //   showErrorToast(\"Product is not released.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n          console.log(\"[Validation] Object Type:\", objectType);\r\n          console.log(\"[Validation] Maturity State:\", maturityState);\r\n          console.log(\r\n            \"[Validation] Is valid type?\",\r\n            validTypes.includes(objectType)\r\n          );\r\n\r\n          if (!validTypes.includes(objectType)) {\r\n            console.log(\"[Validation] Invalid object type error triggered\");\r\n            showErrorToast(\"Please select a CA or Engg Item.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          if (objectType === \"Change Action\" && maturityState === \"Completed\") {\r\n            console.log(\"[Validation] CA completed error triggered\");\r\n            showErrorToast(\"CA is already completed.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          if (\r\n            objectType === \"Physical Product\" &&\r\n            maturityState !== \"Released\"\r\n          ) {\r\n            console.log(\"[Validation] Product not released error triggered\");\r\n            showErrorToast(\"Product is not released.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          await handleObsolescenceWidget(\r\n            draggedObjectData[\"Collaborative Space\"], // collabSpace\r\n            dataItems[0]?.objectId,                   // objectId\r\n            dataItems[0]?.objectType,                 // objectType\r\n            draggedObjectData[\"relativePath\"]         // relativePath\r\n          );          \r\n        } else {\r\n          console.error(\r\n            \"[FetchObjectDetails] API failure:\",\r\n            objectDetailsResult\r\n          );\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Exception:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleObsolescenceWidget, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      dispatch(setLoading(true));\r\n      console.log(\"[handleDrop] Called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n          dispatch(setLoading(false));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[handleDrop] Unexpected error:\", error);\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast, dispatch]\r\n  );\r\n\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\"[initializeDroppableArea] Resetting isDropped to false...\");\r\n      dispatch(setIsDroppedAction(false));\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useObsolescenceDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n  onClose, // New prop to close dropdown\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n    onClose(); // Close after applying update\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropdown-menu p-3 \"\r\n      style={{ width: \"300px\", display: \"block\" }}\r\n    >\r\n      <label>Select Column:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        onChange={(e) => setSelectedColumn(e.target.value)}\r\n        value={selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Column --</option>\r\n        {editableColumns.map((col) => (\r\n          <option key={col} value={col}>\r\n            {col}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Select Value:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        value={selectedValue}\r\n        onChange={(e) => setSelectedValue(e.target.value)}\r\n        disabled={!selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Value --</option>\r\n        {valueOptions.map((val) => (\r\n          <option key={val} value={val}>\r\n            {val}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button\r\n        className=\"btn btn-outline-success me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(false)}\r\n        disabled={!selectedRows.length}\r\n        style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n      >\r\n        Apply to Selected\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(true)}\r\n      >\r\n        Apply to All\r\n      </button>\r\n\r\n      {/* Close Button */}\r\n      <button className=\"btn btn-outline-danger me-2 mb-2\" onClick={onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","// import { useState } from \"react\";\r\n// import Popup from \"../../components/Popup/Popup\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\n// import MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\n// const ObsolescenceWidgetToolbarNativeCta = ({\r\n//   onSave,\r\n//   state,\r\n//   selectedRows,\r\n//   tableData,\r\n//   onMassUpdate,\r\n//   type,\r\n//   latestRevision,\r\n//   droppedRevision,\r\n// }) => {\r\n//   const { showWarningToast } = useToast();\r\n//   const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n//   const handleSaveClick = () => {\r\n//     if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n//       showWarningToast(MSG_BOS_SAVE);\r\n//     } else {\r\n//       onSave();\r\n//     }\r\n//     // When save button is clicked, call onSave passed as prop\r\n//     // onSave is passed with tableData from parent\r\n//   };\r\n//   const handleMassUpdate = (column, value, scope) => {\r\n//     if (scope === \"selected\") {\r\n//       onMassUpdate(selectedRows, column, value);\r\n//     } else {\r\n//       onMassUpdate(tableData, column, value);\r\n//     }\r\n//   };\r\n//   const editableColumns = [\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column cta-absolute\">\r\n//       <div className=\"d-flex\">\r\n//         <button\r\n//           className=\"btn btn-outline-success btn-lg m-2\"\r\n//           // onClick={handleSaveClick}\r\n//         >\r\n//           Obsolete\r\n//         </button>\r\n//         {/* <button\r\n//           className=\"btn btn-outline-primary btn-lg m-2\"\r\n//           onClick={() =>\r\n//             type !== \"Document\" && latestRevision !== droppedRevision\r\n//               ? showWarningToast(MSG_BOS_SAVE)\r\n//               : setShowDropdown((prev) => !prev)\r\n//           }\r\n//         >\r\n//           Mass Update\r\n//         </button> */}\r\n//       </div>\r\n\r\n//       {/* Dropdown appears below */}\r\n//       {showDropdown && (\r\n//         <div className=\"mt-2\">\r\n//           <MassUpdateDropdown\r\n//             editableColumns={editableColumns}\r\n//             selectedRows={selectedRows}\r\n//             onApplyUpdate={handleMassUpdate}\r\n//             valueOptions={[\"Yes\", \"No\"]}\r\n//             onClose={() => setShowDropdown(false)}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ObsolescenceWidgetToolbarNativeCta;\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\nconst ObsolescenceWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n  ParentItemState,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  const handleSaveClick = () => {\r\n    if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n      showWarningToast(MSG_BOS_SAVE);\r\n    } else {\r\n      onSave();\r\n    }\r\n  };\r\n\r\n  // const handleObsoleteClick = () => {\r\n  //   // Show the new toast\r\n  //   showWarningToast(\"Product is not yet released\");\r\n\r\n  //   // Preserve original save logic\r\n  //   handleSaveClick();\r\n  // };\r\n\r\n  const handleObsoleteClick = () => {\r\n    if (ParentItemState !== \"obsolete\") {\r\n      showWarningToast(\"Parent item is not obsolete\");\r\n    } else {\r\n      showSuccessToast(\"Parent item is already obsolete\");\r\n    }\r\n  };\r\n    \r\n\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleObsoleteClick}\r\n        >\r\n          Obsolete\r\n        </button>\r\n        {/* <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={() =>\r\n            type !== \"Document\" && latestRevision !== droppedRevision\r\n              ? showWarningToast(MSG_BOS_SAVE)\r\n              : setShowDropdown((prev) => !prev)\r\n          }\r\n        >\r\n          Mass Update\r\n        </button> */}\r\n      </div>\r\n\r\n      {showDropdown && (\r\n        <div className=\"mt-2\">\r\n          <MassUpdateDropdown\r\n            editableColumns={editableColumns}\r\n            selectedRows={selectedRows}\r\n            onApplyUpdate={handleMassUpdate}\r\n            valueOptions={[\"Yes\", \"No\"]}\r\n            onClose={() => setShowDropdown(false)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidgetToolbarNativeCta;\r\n","// import React, { useEffect, useMemo, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\n// import { Image } from \"react-bootstrap\";\r\n// import \"./ObsolescenceWidget.css\";\r\n// import Loader from \"../../components/Loader/Loader\";\r\n// import ReusableTable from \"../../components/Table/Table\";\r\n// import CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setIsDropped,\r\n//   setPlantObjectData,\r\n// } from \"../../store/droppedObjectSlice\";\r\n// import { getCardData, getTableData, tableColumns } from \"./ObsolescencedataHelper\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\n// import { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\n// import useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n// import ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\n// import { fetchData } from \"../../utils/helpers\";\r\n\r\n// const ObsolescenceWidget = () => {\r\n//   const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n//   const [tableKey, setTableKey] = useState(0);\r\n//   const [tableData, setTableData] = useState([]);\r\n//   const [isTableLoading, setIsTableLoading] = useState(false);\r\n//   const [screenLoader, setScreenLoader] = useState(false);\r\n//   const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n//   const [specData, setSpecData] = useState([]);\r\n//   const [selectableRows, setSelectableRows] = useState([]);\r\n//   const dispatch = useDispatch();\r\n//   const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n//   useEffect(() => {\r\n//     if (specData.length) {\r\n//       setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n//     }\r\n//   }, [specData]);\r\n\r\n//   const handleSave = async () => {\r\n//     console.log(\"Table Data is:\", tableData);\r\n//     setScreenLoader(true);\r\n//     console.log(\"Type of Parent:\", type);\r\n//     let parentData = [];\r\n//     let ChildNameKey;\r\n//     let ChildRevKey;\r\n//     let ChildStateKey;\r\n//     let ChildIdKey;\r\n//     if (type === \"Document\") {\r\n//       parentData = {\r\n//         SpecName: droppedObjectData.cardData.Name,\r\n//         SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n//         SpecState: droppedObjectData.cardData[\"Maturity State\"],\r\n//         SpecID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK CARD DATA\r\n//         // SpecState need to be added.\r\n//       };\r\n//       ChildNameKey = \"ParentItemName\";\r\n//       ChildRevKey = \"ParentItemRevision\";\r\n//       ChildStateKey = \"ParentItemState\";\r\n//       ChildIdKey = \"ItemID\";\r\n//     } else {\r\n//       console.log(\"It's a physical Product\");\r\n//       parentData = {\r\n//         ParentItemName: droppedObjectData.cardData.Name,\r\n//         ParentItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n//         ParentItemState: droppedObjectData.cardData[\"Maturity State\"],\r\n//         ItemID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK THIS\r\n//         // need to add Maturity State as Item State and ItemId is Dropped Revision Id.\r\n//       };\r\n//       ChildNameKey = \"SpecName\";\r\n//       ChildRevKey = \"SpecRevision\";\r\n//       ChildStateKey = \"SpecState\";\r\n//       ChildIdKey = \"SpecID\";\r\n//     }\r\n\r\n//     const formattedData = tableData.map((item) => {\r\n//       // Find matching data in bosSpecDocument\r\n//       let matchingData = bosSpecDocument.find(\r\n//         (data) =>\r\n//           data.childTitle === item.Title && data.childRevision === item.Revision\r\n//       );\r\n\r\n//       return {\r\n//         [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n//         [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n//         [ChildStateKey]: matchingData ? matchingData.childState : null, // need to check this\r\n//         [ChildIdKey]: matchingData ? matchingData.ID : null, //\r\n//         // something needs to be done here\r\n//         // [ChildStateKey]:\r\n//         ...parentData, // Merge Parent Data\r\n//         PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n//         PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n//         WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n//         PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n//         \"SAP/JDE\": item[\"SAP/JDE\"],\r\n//       };\r\n//     });\r\n\r\n//     formattedData.sort((a, b) => {\r\n//       if (a.SpecName !== b.SpecName) {\r\n//         return a.SpecName.localeCompare(b.SpecName);\r\n//       }\r\n//       return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n//     });\r\n\r\n//     console.log(\"Formatted Data:\", formattedData);\r\n//     const saveURL =\r\n//       \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n//     const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n//     console.log(\"the response from node API is:\", response);\r\n//     if (response.status === 200) {\r\n//       showSuccessToast(MSG_SAVE_SUCCESS);\r\n//       setSpecData(tableData);\r\n//       setScreenLoader(false);\r\n//     } else {\r\n//       showErrorToast(MSG_SAVE_FAILURE);\r\n//       setScreenLoader(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleMassUpdate = async (data, column, value) => {\r\n//     console.log(\"Data when the Mass Update is Clicked:\", data);\r\n//     console.log(\"Columns to Change:\", column);\r\n//     console.log(\"Value after change:\", value);\r\n\r\n//     const updatedData = data.map((row) => ({\r\n//       ...row,\r\n//       [column]: value, // Update the specified column with the new value\r\n//     }));\r\n\r\n//     console.log(\"Updated Data is:\", updatedData);\r\n//     console.log(\"Table Data is:\", tableData);\r\n\r\n//     // Merge updatedData into tableData based on matching Title & Revision\r\n//     const mergedData = tableData.map((row) => {\r\n//       const updatedRow = updatedData.find(\r\n//         (updated) =>\r\n//           updated.Title === row.Title && updated.Revision === row.Revision\r\n//       );\r\n\r\n//       return updatedRow ? updatedRow : row; // Use updated row if found, else keep original row\r\n//     });\r\n\r\n//     console.log(\"Merged Data:\", mergedData);\r\n//     updateTableData(mergedData);\r\n//   };\r\n\r\n//   console.log(\"Table Data after Adding:\", tableData);\r\n//   const selectedTableRows = useSelector(\r\n//     (state) => state.droppedObject.selectedTableRows\r\n//   );\r\n//   // Access Redux store\r\n//   const droppedObjectData = useSelector(\r\n//     (state) => state.droppedObject.droppedObjectData\r\n//   );\r\n//   console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n//   const loadingParentDetails = useSelector(\r\n//     (state) => state.droppedObject.loadingParentDetails\r\n//   );\r\n//   console.log(\"Parents Loading State:\", loadingParentDetails);\r\n//   const proposedChanges = useSelector(\r\n//     (state) => state.droppedObject.plantObjectData.proposedChanges\r\n//   );\r\n//   console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n//   console.log(\"Bos data in BOS Widget is:\", bosData);\r\n//   const bosSpecDocument = useSelector(\r\n//     (state) => state.droppedObject.BOSObjectData.specDocument\r\n//   );\r\n//   console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n//   const parentObjectData = useSelector(\r\n//     (state)=> state.droppedObject?.obselenceObjectData?.parentObjectData\r\n//   );\r\n//   console.log(\"Parent Object Data:\", parentObjectData)\r\n\r\n//   const updateTableData = (updatedData) => {\r\n//     const newDataWithChanges = updatedData.map((newItem) => {\r\n//       const originalItem = specData.find(\r\n//         (oldItem) =>\r\n//           oldItem.Title === newItem.Title &&\r\n//           oldItem.Revision === newItem.Revision\r\n//       );\r\n\r\n//       if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n//       // Track changed cells\r\n//       const changedCells = {};\r\n//       Object.keys(newItem).forEach((key) => {\r\n//         if (newItem[key] !== originalItem[key]) {\r\n//           changedCells[key] = true; // Mark this cell as changed\r\n//         }\r\n//       });\r\n\r\n//       return { ...newItem, changedCells };\r\n//     });\r\n\r\n//     setTableData(newDataWithChanges);\r\n//   };\r\n\r\n//   console.log(\"Table Data is:\", tableData);\r\n//   useEffect(() => {\r\n//     if (tableData.length >= 0) {\r\n//       setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n//     }\r\n//   }, [tableData]); // Runs whenever tableData changes\r\n//   if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n//     var state = droppedObjectData.cardData[\"Maturity State\"];\r\n//     var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     if (!isDropped) {\r\n//       initializeDroppableArea();\r\n//     }\r\n//   }, [isDropped, initializeDroppableArea]);\r\n//   useEffect(() => {\r\n//     setIsTableLoading(loadingParentDetails);\r\n//   }, [loadingParentDetails]);\r\n\r\n//   const newTableData = useMemo(\r\n//     () => getTableData(parentObjectData, type),\r\n//     [parentObjectData, type]\r\n//   );\r\n//   useEffect(() => {\r\n//     setSpecData(newTableData);\r\n//   }, [newTableData]);\r\n\r\n//   useEffect(() => {\r\n//     if (newTableData.length >= 0) {\r\n//       console.log(\"New Table Data:\", newTableData);\r\n//       setTableData(newTableData);\r\n//       setTableKey((prevKey) => prevKey + 1); // Update table key\r\n//     }\r\n//   }, [newTableData]);\r\n//   const cardData = useMemo(\r\n//     () => getCardData(droppedObjectData),\r\n//     [droppedObjectData]\r\n//   );\r\n//   console.log(cardData);\r\n//   useEffect(() => {\r\n//     setIsCardDataAvailable(!!cardData);\r\n//   }, [cardData]);\r\n//   const columns = useMemo(\r\n//     () =>\r\n//       tableColumns(\r\n//         type,\r\n//         droppedObjectData?.cardData[\"Latest Revision\"],\r\n//         droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//       ),\r\n//     [type, droppedObjectData?.cardData]\r\n//   );\r\n\r\n//   const handleHomeClick = () => {\r\n//     initializeDroppableArea(); // Reset the droppable area\r\n//     dispatch(setIsDropped(false));\r\n//     dispatch(\r\n//       setDroppedObjectData({\r\n//         cardData: {},\r\n//         parentDetails: [],\r\n//         versions: [],\r\n//         initialDraggedData: [],\r\n//       })\r\n//     ); // Clear Redux state\r\n//     dispatch(\r\n//       setPlantObjectData({\r\n//         allPlants: [],\r\n//         initialAssignedPlants: [],\r\n//         uniquePlants: [],\r\n//         productChildren: [],\r\n//         CAName: false,\r\n//         headers: {},\r\n//       })\r\n//     );\r\n//     setTableData([]); // Clear local table data\r\n//     setIsCardDataAvailable(false);\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {screenLoader && (\r\n//         <div className=\"loading-overlay\">\r\n//           <Loader />\r\n//           <p>Saving...</p>\r\n//         </div>\r\n//       )}\r\n//       {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n//       {loading && <Loader />}\r\n//       {isDropped && (\r\n\r\n//         <>\r\n//          {/* Show initial loader when loading is true */}\r\n//          {loading && <Loader />}\r\n//           <div className=\"content-wrapper py-3 border-bottom\">\r\n//             <div className=\"d-flex \">\r\n//               <div className=\" p-0 pt-4\">\r\n//                 <Image\r\n//                   src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n//                   alt=\"home-icon\"\r\n//                   className=\"home-icon\"\r\n//                   onClick={handleHomeClick}\r\n//                 />\r\n//               </div>\r\n//               {cardData && (\r\n//                 <CardWithDragAndDrop data={cardData} widgetType=\"ObsolescenceWidget\" />\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {isTableLoading ? (\r\n//             <div className=\"loading-indicator mt-5\">\r\n//               <Loader />\r\n//             </div>\r\n//           ) : (\r\n//             <>\r\n//               <div className=\"wrapper-cta\">\r\n//                 <ObsolescenceWidgetToolbarNativeCta\r\n//                   onSave={handleSave}\r\n//                   type={type}\r\n//                   latestRevision={\r\n//                     droppedObjectData?.cardData[\"Latest Revision\"]\r\n//                   }\r\n//                   droppedRevision={\r\n//                     droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//                   }\r\n//                   selectedRows={selectedTableRows}\r\n//                   state={state}\r\n//                   tableData={selectableRows}\r\n//                   onMassUpdate={handleMassUpdate}\r\n//                 />\r\n//                 <ReusableTable\r\n//                   key={tableKey}\r\n//                   data={tableData}\r\n//                   columns={columns}\r\n//                   meta={{ updateTableData }}\r\n//                   type={type}\r\n//                   latestRevision={\r\n//                     droppedObjectData?.cardData[\"Latest Revision\"]\r\n//                   }\r\n//                   droppedRevision={\r\n//                     droppedObjectData?.cardData[\"Dropped Revision\"]\r\n//                   }\r\n//                   widgetType=\"Obsolescence_Attribute_Widget\"\r\n//                   // onSelectableRowsChange={setSelectableRows}\r\n//                 />\r\n//               </div>\r\n//             </>\r\n//           )}\r\n//         </>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n// export default ObsolescenceWidget;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./ObsolescenceWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {   formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns } from \"./ObsolescencedataHelper\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\nimport ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst ObsolescenceWidget = () => {\r\n  const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  // Get redux data\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData?.specDocument || []\r\n  );\r\n  const parentObjectData = useSelector(\r\n    (state) => state.droppedObject?.obselenceObjectData?.parentObjectData || []\r\n  );\r\n\r\n  // Derive type and state from droppedObjectData if present\r\n  let state, type;\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    state = droppedObjectData.cardData[\"Maturity State\"];\r\n    type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(() => getTableData(parentObjectData, type), [\r\n    parentObjectData,\r\n    type,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  }, [newTableData]);\r\n\r\n  const cardData = useMemo(() => getCardData(droppedObjectData), [\r\n    droppedObjectData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  // ...rest of your functions like handleSave, handleMassUpdate, updateTableData etc.\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea();\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    );\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]);\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n        <>\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"ObsolescenceWidget\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <div className=\"wrapper-cta\">\r\n              <ObsolescenceWidgetToolbarNativeCta\r\n                onSave={() => console.log(\"Save function here\")} // replace with handleSave\r\n                type={type}\r\n                latestRevision={droppedObjectData?.cardData[\"Latest Revision\"]}\r\n                droppedRevision={droppedObjectData?.cardData[\"Dropped Revision\"]}\r\n                selectedRows={selectedTableRows}\r\n                state={state}\r\n                tableData={selectableRows}\r\n                onMassUpdate={() => console.log(\"Mass update clicked\")} // replace with handleMassUpdate\r\n              />\r\n              <ReusableTable\r\n                key={tableKey}\r\n                data={tableData}\r\n                columns={columns}\r\n                meta={{ updateTableData: (data) => console.log(\"updateTableData called\", data) }} // replace with updateTableData\r\n                type={type}\r\n                latestRevision={droppedObjectData?.cardData[\"Latest Revision\"]}\r\n                droppedRevision={droppedObjectData?.cardData[\"Dropped Revision\"]}\r\n                widgetType=\"Obsolescence_Attribute_Widget\"\r\n              />\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidget;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useObsolescenceDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport ObsolescenceWidget from \"./ObsolescenceWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <ObsolescenceWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","forwardRef","_ref","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","cell","_ref2","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","onClick","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","log","plant","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","size","cursor","marginLeft","PlantID","useObsolescenceWidget","showErrorToast","dispatch","useDispatch","ENOVIA_BASE_URL","process","email","window","widget","getValue","handleObsolescenceWidget","async","collabSpace","relativePath","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","concat","body","referencedObjects","source","identifier","ChildObject","callEnoviaWebService","status","output","_ChildObject$output","_ChildObject$output$m","member","url","items","_items$parentObject","_items$parentObject2","push","parentObject","revisionStateData","promises","revisionState","apiPath","_revisionState$output","Promise","all","setObselenceObjectData","parentObjectData","isMFGCA","ItemDetails","fetchChangeActionData","CAURL","response","proposedChanges","realizedChanges","rc","where","ItemId","change","ItemType","target","sLatestID","getLatestRevision","includes","mfgDetails","getScopedItms","_Iteminfo$member$","_Iteminfo$member$2","_Iteminfo$member$3","_Iteminfo$member$3$ds","ItemPlants","Iteminfo","getAssignedClasses","getItemDetails","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","error","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","getUserGroupCollab","allCollabSpaces","fetchAssignedPlants","success","plantData","setHeaders","getProductChildren","fetchProductChildren","setProductChildren","getCaDetails","fetchCADetails","setProposedChanges","useObsolescenceDropableArea","isDropped","useSelector","droppedObject","loading","validTypes","fetchObjectDetails","useCallback","dataItems","objectDetailsResult","getDroppedObjectDetails","_dataItems$","_dataItems$2","draggedObjectData","cardData","Type","maturityState","setLoading","setDroppedObjectData","setIsDroppedAction","MSG_FETCH_OBJECT_DETAILS_FAILED","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","editableColumns","selectedRows","onApplyUpdate","valueOptions","onClose","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","e","value","col","disabled","val","onSave","tableData","onMassUpdate","latestRevision","droppedRevision","ParentItemState","showDropdown","setShowDropdown","handleObsoleteClick","showSuccessToast","MassUpdateDropdown","handleMassUpdate","scope","ObsolescenceWidget","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","selectableRows","setSelectableRows","selectedTableRows","droppedObjectData","loadingParentDetails","BOSObjectData","_state$droppedObject$","specDocument","_state$droppedObject","_state$droppedObject$2","obselenceObjectData","_droppedObjectData$in","_droppedObjectData$in2","initialDraggedData","_objectSpread","changedCells","newTableData","getTableData","Plant","revision","prevKey","Title","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","header","Loader","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","initialAssignedPlants","uniquePlants","productChildren","CardWithDragAndDrop","widgetType","ObsolescenceWidgetToolbarNativeCta","ReusableTable","meta","updateTableData","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener","extractIdsFromTitles","newClasses","itemTitle","replace","matchedPlant","find","toLowerCase","filter","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","classes","declassifyResponse","fetchData","JSON","stringify","handleAddData","productChilds","hasMBOM","NotPropagableChilds","prodChild","action","ErrorObject","classId","missingIn","child","name","join","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","message","filteredNewClasses","classifyUrl","classifyResponse","childs","childclassifyResponse","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","AllClasses","finalArray","WAFData","loadWAFData","fetchOOTBData","method","resolve","reject","authenticatedRequest","onComplete","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","childName","Array","isArray","every","childTitles","errorItem","updateBody","MBOMName","propagateClasses","Object","keys","_response$member$","nextApiUrl","cestamp","patchUrl"],"sourceRoot":""}