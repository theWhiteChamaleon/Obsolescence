{"version":3,"file":"static/js/264.df634e1f.chunk.js","mappings":"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","sources":["components/DragAndDrop/DragAndDrop.jsx","components/Popup/Popup.jsx","hooks/useObsolescenceDropableArea.js","pages/ObsolescenceWidget/MassUpdateDropdown.jsx","pages/ObsolescenceWidget/ObsolescenceWidgetToolbarNativeCta.jsx","pages/ObsolescenceWidget/ObsolescenceWidget.jsx","pages/ObsolescenceWidget/ObsolescencedataHelper.js","pages/ObsolescenceWidget/WidgetLifecycle.jsx","pages/ObsolescenceWidget/ObsolescenceIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useBOSWidget from \"./useBOSWidget\";\r\n\r\nconst useBOSDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleBOSWidget } = useBOSWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleBOSWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleBOSWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useBOSDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n  onClose, // New prop to close dropdown\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n    onClose(); // Close after applying update\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropdown-menu p-3 \"\r\n      style={{ width: \"300px\", display: \"block\" }}\r\n    >\r\n      <label>Select Column:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        onChange={(e) => setSelectedColumn(e.target.value)}\r\n        value={selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Column --</option>\r\n        {editableColumns.map((col) => (\r\n          <option key={col} value={col}>\r\n            {col}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Select Value:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        value={selectedValue}\r\n        onChange={(e) => setSelectedValue(e.target.value)}\r\n        disabled={!selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Value --</option>\r\n        {valueOptions.map((val) => (\r\n          <option key={val} value={val}>\r\n            {val}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button\r\n        className=\"btn btn-outline-success me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(false)}\r\n        disabled={!selectedRows.length}\r\n        style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n      >\r\n        Apply to Selected\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(true)}\r\n      >\r\n        Apply to All\r\n      </button>\r\n\r\n      {/* Close Button */}\r\n      <button className=\"btn btn-outline-danger me-2 mb-2\" onClick={onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","import { useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\nconst ObsolescenceWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  const handleSaveClick = () => {\r\n    if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n      showWarningToast(MSG_BOS_SAVE);\r\n    } else {\r\n      onSave();\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleSaveClick}\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={() =>\r\n            type !== \"Document\" && latestRevision !== droppedRevision\r\n              ? showWarningToast(MSG_BOS_SAVE)\r\n              : setShowDropdown((prev) => !prev)\r\n          }\r\n        >\r\n          Mass Update\r\n        </button>\r\n      </div>\r\n\r\n      {/* Dropdown appears below */}\r\n      {showDropdown && (\r\n        <div className=\"mt-2\">\r\n          <MassUpdateDropdown\r\n            editableColumns={editableColumns}\r\n            selectedRows={selectedRows}\r\n            onApplyUpdate={handleMassUpdate}\r\n            valueOptions={[\"Yes\", \"No\"]}\r\n            onClose={() => setShowDropdown(false)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidgetToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./ObsolescenceWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./ObsolescencedataHelper\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\nimport ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst ObsolescenceWidget = () => {\r\n  const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"Table Data is:\", tableData);\r\n    setScreenLoader(true);\r\n    console.log(\"Type of Parent:\", type);\r\n    let parentData = [];\r\n    let ChildNameKey;\r\n    let ChildRevKey;\r\n    let ChildStateKey;\r\n    let ChildIdKey;\r\n    if (type === \"Document\") {\r\n      parentData = {\r\n        SpecName: droppedObjectData.cardData.Name,\r\n        SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        SpecState: droppedObjectData.cardData[\"Maturity State\"],\r\n        SpecID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK CARD DATA\r\n        // SpecState need to be added.\r\n      };\r\n      ChildNameKey = \"ItemName\";\r\n      ChildRevKey = \"ItemRevision\";\r\n      ChildStateKey = \"ItemState\";\r\n      ChildIdKey = \"ItemID\";\r\n    } else {\r\n      console.log(\"It's a physical Product\");\r\n      parentData = {\r\n        ItemName: droppedObjectData.cardData.Name,\r\n        ItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        ItemState: droppedObjectData.cardData[\"Maturity State\"],\r\n        ItemID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK THIS\r\n        // need to add Maturity State as Item State and ItemId is Dropped Revision Id.\r\n      };\r\n      ChildNameKey = \"SpecName\";\r\n      ChildRevKey = \"SpecRevision\";\r\n      ChildStateKey = \"SpecState\";\r\n      ChildIdKey = \"SpecID\";\r\n    }\r\n\r\n    const formattedData = tableData.map((item) => {\r\n      // Find matching data in bosSpecDocument\r\n      let matchingData = bosSpecDocument.find(\r\n        (data) =>\r\n          data.childTitle === item.Title && data.childRevision === item.Revision\r\n      );\r\n\r\n      return {\r\n        [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n        [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n        [ChildStateKey]: matchingData ? matchingData.childState : null, // need to check this\r\n        [ChildIdKey]: matchingData ? matchingData.ID : null, //\r\n        // something needs to be done here\r\n        // [ChildStateKey]:\r\n        ...parentData, // Merge Parent Data\r\n        PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n        PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n        WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n        PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n        \"SAP/JDE\": item[\"SAP/JDE\"],\r\n      };\r\n    });\r\n\r\n    formattedData.sort((a, b) => {\r\n      if (a.SpecName !== b.SpecName) {\r\n        return a.SpecName.localeCompare(b.SpecName);\r\n      }\r\n      return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n    });\r\n\r\n    console.log(\"Formatted Data:\", formattedData);\r\n    const saveURL =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n    const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n    console.log(\"the response from node API is:\", response);\r\n    if (response.status === 200) {\r\n      showSuccessToast(MSG_SAVE_SUCCESS);\r\n      setSpecData(tableData);\r\n      setScreenLoader(false);\r\n    } else {\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n      setScreenLoader(false);\r\n    }\r\n  };\r\n\r\n  const handleMassUpdate = async (data, column, value) => {\r\n    console.log(\"Data when the Mass Update is Clicked:\", data);\r\n    console.log(\"Columns to Change:\", column);\r\n    console.log(\"Value after change:\", value);\r\n\r\n    const updatedData = data.map((row) => ({\r\n      ...row,\r\n      [column]: value, // Update the specified column with the new value\r\n    }));\r\n\r\n    console.log(\"Updated Data is:\", updatedData);\r\n    console.log(\"Table Data is:\", tableData);\r\n\r\n    // Merge updatedData into tableData based on matching Title & Revision\r\n    const mergedData = tableData.map((row) => {\r\n      const updatedRow = updatedData.find(\r\n        (updated) =>\r\n          updated.Title === row.Title && updated.Revision === row.Revision\r\n      );\r\n\r\n      return updatedRow ? updatedRow : row; // Use updated row if found, else keep original row\r\n    });\r\n\r\n    console.log(\"Merged Data:\", mergedData);\r\n    updateTableData(mergedData);\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n  console.log(\"Bos data in BOS Widget is:\", bosData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData.specDocument\r\n  );\r\n  console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n  const updateTableData = (updatedData) => {\r\n    const newDataWithChanges = updatedData.map((newItem) => {\r\n      const originalItem = specData.find(\r\n        (oldItem) =>\r\n          oldItem.Title === newItem.Title &&\r\n          oldItem.Revision === newItem.Revision\r\n      );\r\n\r\n      if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n      // Track changed cells\r\n      const changedCells = {};\r\n      Object.keys(newItem).forEach((key) => {\r\n        if (newItem[key] !== originalItem[key]) {\r\n          changedCells[key] = true; // Mark this cell as changed\r\n        }\r\n      });\r\n\r\n      return { ...newItem, changedCells };\r\n    });\r\n\r\n    setTableData(newDataWithChanges);\r\n  };\r\n\r\n  console.log(\"Table Data is:\", tableData);\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(\r\n    () => getTableData(bosSpecDocument, type),\r\n    [bosSpecDocument, type]\r\n  );\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n\r\n        <>\r\n         {/* Show initial loader when loading is true */}\r\n         {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && (\r\n                <CardWithDragAndDrop data={cardData} widgetType=\"ObsolescenceWidget\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <ObsolescenceWidgetToolbarNativeCta\r\n                  onSave={handleSave}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  selectedRows={selectedTableRows}\r\n                  state={state}\r\n                  tableData={selectableRows}\r\n                  onMassUpdate={handleMassUpdate}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  widgetType=\"Obsolescence_Attribute_Widget\"\r\n                  onSelectableRowsChange={setSelectableRows}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ObsolescenceWidget;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (ObsolescenceData, type) => {\r\n  if (!ObsolescenceData) return [];\r\n\r\n  return ObsolescenceData.map((data) => {\r\n    let rowData = {\r\n      Title: data?.childTitle || \"N/A\",\r\n      Revision: data?.childRevision || \"1\",\r\n      State: data?.childState || \"N/A\",\r\n      \"Print On Purchase Order Required\":\r\n        data.PrintOnPurchaseOrderRequired || \"No\",\r\n      \"Print On Work Order Required\": data.PrintOnWorkOrderRequired || \"No\",\r\n      \"Work Order Document Required\": data.WorkOrderDocumentRequired || \"No\",\r\n      \"Print On report Order Required\": data.PrintOnReportOrderRequired || \"No\",\r\n      \"SAP/JDE\": data[\"SAP/JDE\"] || \"No\",\r\n    };\r\n\r\n    // Add \"IsLatest\" key only if type === \"Document\"\r\n    if (type === \"Document\") {\r\n      rowData.IsLatest = data?.childLatest || \"FALSE\";\r\n    }\r\n\r\n    return rowData;\r\n  });\r\n};\r\n\r\nexport const tableColumns = (type, latestRevision, droppedRevision) => {\r\n  const baseColumns = [\r\n    { accessorKey: \"Title\", header: \"Title\" },\r\n    { accessorKey: \"Revision\", header: \"Revision\" },\r\n    { accessorKey: \"State\", header: \"State\" },\r\n  ];\r\n\r\n  if (type === \"Document\") {\r\n    baseColumns.push({ accessorKey: \"IsLatest\", header: \"Is Latest\" });\r\n  }\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ].map((columnKey) => ({\r\n    accessorKey: columnKey,\r\n    header: columnKey,\r\n    cell: ({ row, getValue, table }) => {\r\n      // Determine if the cell should be editable\r\n      const isEditable =\r\n        type === \"Document\"\r\n          ? row.original.IsLatest !== \"FALSE\" // Editable only if IsLatest is NOT \"FALSE\"\r\n          : !latestRevision || latestRevision === droppedRevision;\r\n\r\n      const handleDropdownChange = (e) => {\r\n        const updatedValue = e.target.value;\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id\r\n              ? { ...r.original, [columnKey]: updatedValue }\r\n              : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData);\r\n      };\r\n\r\n      return isEditable ? (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n          style={{\r\n            width: \"70%\",\r\n            padding: \"5px 0\",\r\n            fontSize: \"14px\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n          onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n        >\r\n          <option value=\"Yes\">Yes</option>\r\n          <option value=\"No\">No</option>\r\n        </select>\r\n      ) : (\r\n        <span>{getValue()}</span> // Show non-editable text if conditions fail\r\n      );\r\n    },\r\n  }));\r\n\r\n  return [...baseColumns, ...editableColumns];\r\n};\r\n\r\n// export const tableColumns = (type, latestRevision, droppedRevision) => [\r\n//   { accessorKey: \"Title\", header: \"Title\" },\r\n//   { accessorKey: \"Revision\", header: \"Revision\" },\r\n//   { accessorKey: \"State\", header: \"State\" },\r\n//   ...[\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ].map((columnKey) => ({\r\n//     accessorKey: columnKey,\r\n//     header: columnKey,\r\n//     cell: ({ row, getValue, table }) => {\r\n//       const handleDropdownChange = (e) => {\r\n//         const updatedValue = e.target.value;\r\n//         const updatedData = table\r\n//           .getRowModel()\r\n//           .rows.map((r) =>\r\n//             r.id === row.id\r\n//               ? { ...r.original, [columnKey]: updatedValue }\r\n//               : r.original\r\n//           );\r\n\r\n//         table.options.meta?.updateTableData(updatedData);\r\n//       };\r\n\r\n//       return (\r\n//         <select\r\n//           value={getValue()}\r\n//           onChange={handleDropdownChange}\r\n//           className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n//           style={{\r\n//             width: \"70%\",\r\n//             padding: \"5px\",\r\n//             fontSize: \"14px\",\r\n//             color: \"#333\",\r\n//             background: \"none\",\r\n//             border: \"none\",\r\n//             textAlign: \"left\",\r\n//           }}\r\n//           onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n//           onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n//         >\r\n//           <option value=\"Yes\">Yes</option>\r\n//           <option value=\"No\">No</option>\r\n//         </select>\r\n//       );\r\n//     },\r\n//   })),\r\n// ];\r\n\r\n// {\r\n//   accessorKey: \"MBom\",\r\n//   header: \"MBom\",\r\n//   cell: ({ row, getValue, table }) => {\r\n//     const handleDropdownChange = (e) => {\r\n//       if (!CAName) return; // Prevent changes when disabled\r\n//       const updatedValue = e.target.value;\r\n\r\n//       // Update the table data state here\r\n//       const updatedData = table\r\n//         .getRowModel()\r\n//         .rows.map((r) =>\r\n//           r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n//         );\r\n\r\n//       table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n//     };\r\n\r\n//     return (\r\n//       <select\r\n//         value={getValue()}\r\n//         onChange={handleDropdownChange}\r\n//         disabled={!CAName} // Disable dropdown if CAName is false\r\n//         className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n//         style={{\r\n//           ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n//           width: \"70%\",\r\n//           padding: \"5px\",\r\n//           fontSize: \"14px\",\r\n//           color: \"#333\",\r\n//           background: \"none\",\r\n//           border: \"none\",\r\n//           textAlign: \"left\",\r\n//         }}\r\n//         onMouseOver={(e) => {\r\n//           if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n//         }}\r\n//         onMouseOut={(e) => {\r\n//           if (CAName) e.target.style.border = \"none\";\r\n//         }}\r\n//       >\r\n//         <option value=\"Make\">Make</option>\r\n//         <option value=\"Buy\">Buy</option>\r\n//       </select>\r\n//     );\r\n//   },\r\n// },\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useObsolescenceDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport ObsolescenceWidget from \"./ObsolescenceWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <ObsolescenceWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","forwardRef","_ref","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","cell","_ref2","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","onClick","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","useBOSDropableArea","showErrorToast","handleBOSWidget","useBOSWidget","isDropped","useSelector","droppedObject","loading","dispatch","useDispatch","fetchObjectDetails","useCallback","async","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","log","setIsDroppedAction","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","error","setLoading","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","editableColumns","selectedRows","onApplyUpdate","valueOptions","onClose","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","display","e","target","value","col","disabled","val","cursor","onSave","tableData","onMassUpdate","latestRevision","droppedRevision","showDropdown","setShowDropdown","handleSaveClick","MSG_BOS_SAVE","prev","MassUpdateDropdown","handleMassUpdate","scope","ObsolescenceWidget","useObsolescenceDropableArea","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","selectableRows","setSelectableRows","showSuccessToast","_objectSpread","changedCells","selectedTableRows","droppedObjectData","loadingParentDetails","proposedChanges","plantObjectData","bosData","BOSObjectData","bosSpecDocument","specDocument","updateTableData","updatedData","newDataWithChanges","newItem","originalItem","find","oldItem","Title","Revision","Object","keys","key","prevKey","initialDraggedData","_droppedObjectData$in","_droppedObjectData$in2","items","newTableData","getTableData","ObsolescenceData","rowData","childTitle","childRevision","State","childState","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","IsLatest","childLatest","Type","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","baseColumns","header","push","columnKey","getValue","_table$options$meta","updatedValue","r","options","meta","padding","fontSize","background","border","textAlign","onMouseOver","onMouseOut","Loader","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","allPlants","initialAssignedPlants","uniquePlants","productChildren","headers","CardWithDragAndDrop","widgetType","ObsolescenceWidgetToolbarNativeCta","ChildNameKey","ChildRevKey","ChildStateKey","ChildIdKey","parentData","SpecName","SpecRevision","SpecState","SpecID","ItemName","ItemRevision","ItemState","ItemID","formattedData","matchingData","childName","ID","sort","a","b","localeCompare","Number","response","fetchData","status","MSG_SAVE_SUCCESS","MSG_SAVE_FAILURE","mergedData","updatedRow","updated","ReusableTable","onSelectableRowsChange","WidgetLifecycle","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","includes","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener","extractIdsFromTitles","newClasses","itemTitle","replace","matchedPlant","plant","toLowerCase","filter","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","classes","declassifyResponse","JSON","stringify","handleAddData","productChilds","hasMBOM","NotPropagableChilds","prodChild","change","identifier","action","ErrorObject","classId","missingIn","child","name","join","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","message","concat","filteredNewClasses","classifyUrl","classifyResponse","childs","childclassifyResponse","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","AllClasses","finalArray","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","url","method","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","Array","isArray","every","childTitles","errorItem","updateBody","MBOMName","propagateClasses","_response$member$","nextApiUrl","cestamp","member","patchUrl"],"sourceRoot":""}