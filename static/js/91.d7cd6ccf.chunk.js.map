{"version":3,"file":"static/js/91.d7cd6ccf.chunk.js","mappings":"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","sources":["components/DragAndDrop/DragAndDrop.jsx","components/Popup/Popup.jsx","hooks/useObsolescenceWidget.js","hooks/useObsolescenceDropableArea.js","pages/ObsolescenceWidget/MassUpdateDropdown.jsx","pages/ObsolescenceWidget/ObsolescenceWidgetToolbarNativeCta.jsx","pages/ObsolescenceWidget/ObsolescenceWidget.jsx","pages/ObsolescenceWidget/ObsolescencedataHelper.js","pages/ObsolescenceWidget/WidgetLifecycle.jsx","pages/ObsolescenceWidget/ObsolescenceIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useObsolescenceWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useObsolescenceWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleObsolescenceWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useObsolescenceWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n\r\n      // let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      // let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"POST\",\r\n        baseURL,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      // if (\r\n      //   ChildObject &&\r\n      //   ChildObject.status &&\r\n      //   ChildObject.output.data.length > 0\r\n      // ) {\r\n      //   let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n      //     id: sSpec.id,\r\n      //     title:\r\n      //       sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n      //         ? sSpec.dataelements.title\r\n      //         : sSpec.dataelements.secondaryTitle,\r\n      //     revision: sSpec.dataelements.revision,\r\n      //     state: sSpec.dataelements.stateNLS,\r\n      //     name: sSpec.dataelements.name,\r\n      //   }));\r\n\r\n      //   console.log(\r\n      //     \"[useObsolescenceWidget] Extracted Spec Documents:\",\r\n      //     ChildObjectDocument\r\n      //   );\r\n      //   // if type is Document and then iterate ovet the\r\n      //   if (type === \"Document\") {\r\n      //     const revisionBody = {\r\n      //       data: [],\r\n      //     };\r\n      //     ChildObjectDocument.forEach((child) => {\r\n      //       const body = {\r\n      //         id: child.id,\r\n      //         identifier: child.id,\r\n      //         type: \"VPMReference\",\r\n      //         source: `${ENOVIA_BASE_URL}`,\r\n      //         relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n      //       };\r\n      //       revisionBody.data.push(body);\r\n      //     });\r\n      //     const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n      //     const response = await callEnoviaWebService(\r\n      //       \"POST\",\r\n      //       RevisionUrl,\r\n      //       revisionBody,\r\n      //       headers\r\n      //     );\r\n      //     console.log(\"response is:\", response);\r\n      //     response.output.results.forEach((item) => {\r\n      //       // Find the latest version based on the 'revision' key\r\n      //       const latestVersion = item.versions.reduce((latest, current) => {\r\n      //         return convertRevisionToNumber(current.revision) >\r\n      //           convertRevisionToNumber(latest.revision)\r\n      //           ? current\r\n      //           : latest;\r\n      //       });\r\n\r\n      //       // Update 'isLatestRevision' for only the matching document\r\n      //       ChildObjectDocument = ChildObjectDocument.map((doc) => {\r\n      //         if (item.versions.some((version) => version.id === doc.id)) {\r\n      //           return {\r\n      //             ...doc,\r\n      //             isLatestRevision:\r\n      //               doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n      //           };\r\n      //         }\r\n      //         return doc;\r\n      //       });\r\n      //     });\r\n\r\n      //     // Function to convert revision to a comparable numeric value\r\n      //     function convertRevisionToNumber(rev) {\r\n      //       if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n      //       let number = 0;\r\n      //       for (let i = 0; i < rev.length; i++) {\r\n      //         number =\r\n      //           number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n      //       }\r\n      //       return number; // Handles A-Z, AA-ZZ revisions\r\n      //     }\r\n\r\n      //     console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n      //   }\r\n      //   let requestBody;\r\n      //   let getUrl;\r\n      //   if (type === \"Document\") {\r\n      //     getUrl =\r\n      //       \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n      //     requestBody = {\r\n      //       SpecName: parentName, // Replace with actual SpecName if dynamic\r\n      //       SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n      //       Items: ChildObjectDocument.map((obj) => ({\r\n      //         ItemName: obj.name, // Replace dynamically if needed\r\n      //         ItemRevision: obj.revision,\r\n      //       })),\r\n      //     };\r\n      //   } else {\r\n      //     getUrl =\r\n      //       \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n      //     requestBody = {\r\n      //       ItemName: parentName, // Replace with actual ItemName if dynamic\r\n      //       ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n      //       Specifications: ChildObjectDocument.map((obj) => ({\r\n      //         SpecName: obj.name,\r\n      //         SpecRevision: obj.revision,\r\n      //       })),\r\n      //     };\r\n      //   }\r\n\r\n      //   console.log(\"Requested Body is:\", requestBody);\r\n\r\n      //   const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n      //   console.log(\"the response from node API is:\", response);\r\n\r\n      //   let mergedData = [];\r\n      //   if (response?.data?.data?.Specifications) {\r\n      //     // **Case 1: API Response Contains \"Specifications\"**\r\n      //     response.data.data.Specifications.forEach((spec) => {\r\n      //       let matchingDoc = ChildObjectDocument.find(\r\n      //         (obj) =>\r\n      //           obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n      //       );\r\n\r\n      //       mergedData.push({\r\n      //         childState: matchingDoc?.state || \"\",\r\n      //         childTitle: matchingDoc?.title || \"\",\r\n      //         childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n      //         childName: spec.SpecName,\r\n      //         childRevision: spec.SpecRevision,\r\n      //         PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n      //         PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n      //         WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n      //         PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n      //         \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n      //       });\r\n      //     });\r\n      //   } else if (response?.data?.data?.Items) {\r\n      //     // get all the id's\r\n\r\n      //     // **Case 2: API Response Contains \"Items\"**\r\n      //     response.data.data.Items.forEach((item) => {\r\n      //       let matchingDoc = ChildObjectDocument.find(\r\n      //         (doc) =>\r\n      //           doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n      //       );\r\n\r\n      //       mergedData.push({\r\n      //         childState: matchingDoc?.state || \"\",\r\n      //         childTitle: matchingDoc?.title || \"\",\r\n      //         childName: item.ItemName,\r\n      //         childRevision: item.ItemRevision,\r\n      //         childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n      //         PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n      //         PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n      //         WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n      //         PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n      //         \"SAP/JDE\": item[\"SAP/JDE\"],\r\n      //       });\r\n      //     });\r\n      //   } else {\r\n      //     console.warn(\"[useObsolescenceWidget] Unexpected API response format.\");\r\n      //   }\r\n      //   console.log(\r\n      //     \"[useObsolescenceWidget] Final Merged Data for Dispatch:\",\r\n      //     mergedData\r\n      //   );\r\n\r\n      //   dispatch(setSpecDocument(mergedData));\r\n      //   // You can now dispatch or return this data as needed\r\n      // } else {\r\n      //   console.warn(\"[useObsolescenceWidget] No connected childs.\");\r\n      //   dispatch(setSpecDocument([]));\r\n      // }\r\n    } catch (error) {\r\n      console.error(\"[useObsolescenceWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleObsolescenceWidget };\r\n};\r\n\r\nexport default useObsolescenceWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n\r\n\r\n\r\n\r\n","// import { useCallback, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\n// import { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// // Custom hook\r\n// import usePlantAssignment from \"./usePlantAssignment\";\r\n// // Reusable services\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({\r\n//           dataItems,\r\n//         });\r\n\r\n//         // const cardownerResult = await fetchCardOwnerDetailsService({\r\n//         //   dataItems,\r\n//         //   headers,\r\n//         // });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           // Merge the data from both services\r\n//           // const combineData = {\r\n//           //   cardData: objectDetailsResult.data.cardData,\r\n//           //   ownerData: cardownerResult.data.ownerData,\r\n//           // };\r\n\r\n//           dispatch(\r\n//             setDroppedObjectData({\r\n//               cardData: objectDetailsResult.data.cardData,\r\n//             })\r\n//           );\r\n\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // call usePlantAssignment after successfully fetching object details\r\n//           if (objectDetailsResult) {\r\n//             await handleObsolescenceWidget(\r\n//               draggedObjectData[\"Collaborative Space\"],\r\n//               draggedObjectData[\"Maturity State\"],\r\n//               dataItems[0]?.objectId,\r\n//               dataItems[0]?.objectType,\r\n//               draggedObjectData.Name,\r\n//               draggedObjectData[\"Dropped Revision\"]\r\n//             );\r\n//           }\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       setLoading(true); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         setLoading(false);\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         console.log(\r\n//           \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n//         );\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast]\r\n//   );\r\n//   // Initialize droppable area\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n//       );\r\n//       dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n//     } else {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n//       );\r\n//     }\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100); // Check every 100ms\r\n \r\n//     return () => clearInterval(interval); // Cleanup interval on unmount\r\n//   }, [handleDrop, dispatch]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n//           if (\r\n//             objectType !== \"VPMReference\" &&\r\n//             objectType !== \"Change Action\"\r\n//           ) {\r\n//             showErrorToast(\"Please select CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setLoading,\r\n  setIsDropped as setIsDroppedAction,\r\n} from \"../store/droppedObjectSlice\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport useObsolescenceWidget from \"./useObsolescenceWidget\";\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useObsolescenceDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  // Define valid types for CA or Engg Item\r\n  const validTypes = [\r\n    \"VPMReference\",      // Valid Type 1\r\n    \"Engg Item\",         // Valid Type 2\r\n    \"Physical Product\",  // Valid Type 3\r\n    \"Change Action\",     // Valid Type 4 (CA)\r\n  ];\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n        if (objectDetailsResult.success) {\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          // ✅ Validate object type before proceeding\r\n          const objectType = draggedObjectData?.Type;\r\n\r\n          // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(\"Please select a CA or Engg Item.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          // ✅ Check if the Maturity State is not 'Released'\r\n          const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n          if (maturityState !== \"Released\") {\r\n            showErrorToast(\"Product is not released.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          // Proceed with setting the dropped object data\r\n          dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // Call handleObsolescenceWidget after successful validation\r\n          await handleObsolescenceWidget(\r\n            draggedObjectData[\"Collaborative Space\"],\r\n            draggedObjectData[\"Maturity State\"],\r\n            dataItems[0]?.objectId,\r\n            dataItems[0]?.objectType,\r\n            draggedObjectData.Name,\r\n            draggedObjectData[\"Dropped Revision\"]\r\n          );\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleObsolescenceWidget, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      dispatch(setLoading(true)); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        dispatch(setLoading(false));\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast, dispatch]\r\n  );\r\n\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n      dispatch(setIsDroppedAction(false));\r\n    } else {\r\n      console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100);\r\n\r\n    return () => clearInterval(interval); // Cleanup\r\n  }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useObsolescenceDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n  onClose, // New prop to close dropdown\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n    onClose(); // Close after applying update\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropdown-menu p-3 \"\r\n      style={{ width: \"300px\", display: \"block\" }}\r\n    >\r\n      <label>Select Column:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        onChange={(e) => setSelectedColumn(e.target.value)}\r\n        value={selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Column --</option>\r\n        {editableColumns.map((col) => (\r\n          <option key={col} value={col}>\r\n            {col}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Select Value:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        value={selectedValue}\r\n        onChange={(e) => setSelectedValue(e.target.value)}\r\n        disabled={!selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Value --</option>\r\n        {valueOptions.map((val) => (\r\n          <option key={val} value={val}>\r\n            {val}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button\r\n        className=\"btn btn-outline-success me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(false)}\r\n        disabled={!selectedRows.length}\r\n        style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n      >\r\n        Apply to Selected\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(true)}\r\n      >\r\n        Apply to All\r\n      </button>\r\n\r\n      {/* Close Button */}\r\n      <button className=\"btn btn-outline-danger me-2 mb-2\" onClick={onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","// import { useState } from \"react\";\r\n// import Popup from \"../../components/Popup/Popup\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\n// import MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\n// const ObsolescenceWidgetToolbarNativeCta = ({\r\n//   onSave,\r\n//   state,\r\n//   selectedRows,\r\n//   tableData,\r\n//   onMassUpdate,\r\n//   type,\r\n//   latestRevision,\r\n//   droppedRevision,\r\n// }) => {\r\n//   const { showWarningToast } = useToast();\r\n//   const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n//   const handleSaveClick = () => {\r\n//     if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n//       showWarningToast(MSG_BOS_SAVE);\r\n//     } else {\r\n//       onSave();\r\n//     }\r\n//     // When save button is clicked, call onSave passed as prop\r\n//     // onSave is passed with tableData from parent\r\n//   };\r\n//   const handleMassUpdate = (column, value, scope) => {\r\n//     if (scope === \"selected\") {\r\n//       onMassUpdate(selectedRows, column, value);\r\n//     } else {\r\n//       onMassUpdate(tableData, column, value);\r\n//     }\r\n//   };\r\n//   const editableColumns = [\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column cta-absolute\">\r\n//       <div className=\"d-flex\">\r\n//         <button\r\n//           className=\"btn btn-outline-success btn-lg m-2\"\r\n//           // onClick={handleSaveClick}\r\n//         >\r\n//           Obsolete\r\n//         </button>\r\n//         {/* <button\r\n//           className=\"btn btn-outline-primary btn-lg m-2\"\r\n//           onClick={() =>\r\n//             type !== \"Document\" && latestRevision !== droppedRevision\r\n//               ? showWarningToast(MSG_BOS_SAVE)\r\n//               : setShowDropdown((prev) => !prev)\r\n//           }\r\n//         >\r\n//           Mass Update\r\n//         </button> */}\r\n//       </div>\r\n\r\n//       {/* Dropdown appears below */}\r\n//       {showDropdown && (\r\n//         <div className=\"mt-2\">\r\n//           <MassUpdateDropdown\r\n//             editableColumns={editableColumns}\r\n//             selectedRows={selectedRows}\r\n//             onApplyUpdate={handleMassUpdate}\r\n//             valueOptions={[\"Yes\", \"No\"]}\r\n//             onClose={() => setShowDropdown(false)}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ObsolescenceWidgetToolbarNativeCta;\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\nconst ObsolescenceWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  const handleSaveClick = () => {\r\n    if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n      showWarningToast(MSG_BOS_SAVE);\r\n    } else {\r\n      onSave();\r\n    }\r\n  };\r\n\r\n  // const handleObsoleteClick = () => {\r\n  //   // Show the new toast\r\n  //   showWarningToast(\"Product is not yet released\");\r\n\r\n  //   // Preserve original save logic\r\n  //   handleSaveClick();\r\n  // };\r\n\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          // onClick={handleObsoleteClick}\r\n        >\r\n          Obsolete\r\n        </button>\r\n        {/* <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={() =>\r\n            type !== \"Document\" && latestRevision !== droppedRevision\r\n              ? showWarningToast(MSG_BOS_SAVE)\r\n              : setShowDropdown((prev) => !prev)\r\n          }\r\n        >\r\n          Mass Update\r\n        </button> */}\r\n      </div>\r\n\r\n      {showDropdown && (\r\n        <div className=\"mt-2\">\r\n          <MassUpdateDropdown\r\n            editableColumns={editableColumns}\r\n            selectedRows={selectedRows}\r\n            onApplyUpdate={handleMassUpdate}\r\n            valueOptions={[\"Yes\", \"No\"]}\r\n            onClose={() => setShowDropdown(false)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidgetToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./ObsolescenceWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./ObsolescencedataHelper\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\nimport ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst ObsolescenceWidget = () => {\r\n  const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"Table Data is:\", tableData);\r\n    setScreenLoader(true);\r\n    console.log(\"Type of Parent:\", type);\r\n    let parentData = [];\r\n    let ChildNameKey;\r\n    let ChildRevKey;\r\n    let ChildStateKey;\r\n    let ChildIdKey;\r\n    if (type === \"Document\") {\r\n      parentData = {\r\n        SpecName: droppedObjectData.cardData.Name,\r\n        SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        SpecState: droppedObjectData.cardData[\"Maturity State\"],\r\n        SpecID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK CARD DATA\r\n        // SpecState need to be added.\r\n      };\r\n      ChildNameKey = \"ItemName\";\r\n      ChildRevKey = \"ItemRevision\";\r\n      ChildStateKey = \"ItemState\";\r\n      ChildIdKey = \"ItemID\";\r\n    } else {\r\n      console.log(\"It's a physical Product\");\r\n      parentData = {\r\n        ItemName: droppedObjectData.cardData.Name,\r\n        ItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        ItemState: droppedObjectData.cardData[\"Maturity State\"],\r\n        ItemID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK THIS\r\n        // need to add Maturity State as Item State and ItemId is Dropped Revision Id.\r\n      };\r\n      ChildNameKey = \"SpecName\";\r\n      ChildRevKey = \"SpecRevision\";\r\n      ChildStateKey = \"SpecState\";\r\n      ChildIdKey = \"SpecID\";\r\n    }\r\n\r\n    const formattedData = tableData.map((item) => {\r\n      // Find matching data in bosSpecDocument\r\n      let matchingData = bosSpecDocument.find(\r\n        (data) =>\r\n          data.childTitle === item.Title && data.childRevision === item.Revision\r\n      );\r\n\r\n      return {\r\n        [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n        [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n        [ChildStateKey]: matchingData ? matchingData.childState : null, // need to check this\r\n        [ChildIdKey]: matchingData ? matchingData.ID : null, //\r\n        // something needs to be done here\r\n        // [ChildStateKey]:\r\n        ...parentData, // Merge Parent Data\r\n        PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n        PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n        WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n        PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n        \"SAP/JDE\": item[\"SAP/JDE\"],\r\n      };\r\n    });\r\n\r\n    formattedData.sort((a, b) => {\r\n      if (a.SpecName !== b.SpecName) {\r\n        return a.SpecName.localeCompare(b.SpecName);\r\n      }\r\n      return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n    });\r\n\r\n    console.log(\"Formatted Data:\", formattedData);\r\n    const saveURL =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n    const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n    console.log(\"the response from node API is:\", response);\r\n    if (response.status === 200) {\r\n      showSuccessToast(MSG_SAVE_SUCCESS);\r\n      setSpecData(tableData);\r\n      setScreenLoader(false);\r\n    } else {\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n      setScreenLoader(false);\r\n    }\r\n  };\r\n\r\n  const handleMassUpdate = async (data, column, value) => {\r\n    console.log(\"Data when the Mass Update is Clicked:\", data);\r\n    console.log(\"Columns to Change:\", column);\r\n    console.log(\"Value after change:\", value);\r\n\r\n    const updatedData = data.map((row) => ({\r\n      ...row,\r\n      [column]: value, // Update the specified column with the new value\r\n    }));\r\n\r\n    console.log(\"Updated Data is:\", updatedData);\r\n    console.log(\"Table Data is:\", tableData);\r\n\r\n    // Merge updatedData into tableData based on matching Title & Revision\r\n    const mergedData = tableData.map((row) => {\r\n      const updatedRow = updatedData.find(\r\n        (updated) =>\r\n          updated.Title === row.Title && updated.Revision === row.Revision\r\n      );\r\n\r\n      return updatedRow ? updatedRow : row; // Use updated row if found, else keep original row\r\n    });\r\n\r\n    console.log(\"Merged Data:\", mergedData);\r\n    updateTableData(mergedData);\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n  console.log(\"Bos data in BOS Widget is:\", bosData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData.specDocument\r\n  );\r\n  console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n  const updateTableData = (updatedData) => {\r\n    const newDataWithChanges = updatedData.map((newItem) => {\r\n      const originalItem = specData.find(\r\n        (oldItem) =>\r\n          oldItem.Title === newItem.Title &&\r\n          oldItem.Revision === newItem.Revision\r\n      );\r\n\r\n      if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n      // Track changed cells\r\n      const changedCells = {};\r\n      Object.keys(newItem).forEach((key) => {\r\n        if (newItem[key] !== originalItem[key]) {\r\n          changedCells[key] = true; // Mark this cell as changed\r\n        }\r\n      });\r\n\r\n      return { ...newItem, changedCells };\r\n    });\r\n\r\n    setTableData(newDataWithChanges);\r\n  };\r\n\r\n  console.log(\"Table Data is:\", tableData);\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(\r\n    () => getTableData(bosSpecDocument, type),\r\n    [bosSpecDocument, type]\r\n  );\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n\r\n        <>\r\n         {/* Show initial loader when loading is true */}\r\n         {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && (\r\n                <CardWithDragAndDrop data={cardData} widgetType=\"ObsolescenceWidget\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <ObsolescenceWidgetToolbarNativeCta\r\n                  onSave={handleSave}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  selectedRows={selectedTableRows}\r\n                  state={state}\r\n                  tableData={selectableRows}\r\n                  onMassUpdate={handleMassUpdate}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  widgetType=\"Obsolescence_Attribute_Widget\"\r\n                  onSelectableRowsChange={setSelectableRows}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ObsolescenceWidget;\r\n\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (ObsolescenceData, type) => {\r\n  if (!ObsolescenceData) return [];\r\n\r\n  return ObsolescenceData.map((data) => {\r\n    let rowData = {\r\n      Title: data?.childTitle || \"N/A\",\r\n      Revision: data?.childRevision || \"1\",\r\n      State: data?.childState || \"N/A\",\r\n      \"Print On Purchase Order Required\":\r\n        data.PrintOnPurchaseOrderRequired || \"No\",\r\n      \"Print On Work Order Required\": data.PrintOnWorkOrderRequired || \"No\",\r\n      \"Work Order Document Required\": data.WorkOrderDocumentRequired || \"No\",\r\n      \"Print On report Order Required\": data.PrintOnReportOrderRequired || \"No\",\r\n      \"SAP/JDE\": data[\"SAP/JDE\"] || \"No\",\r\n    };\r\n\r\n    // Add \"IsLatest\" key only if type === \"Document\"\r\n    if (type === \"Document\") {\r\n      rowData.IsLatest = data?.childLatest || \"FALSE\";\r\n    }\r\n\r\n    return rowData;\r\n  });\r\n};\r\n\r\nexport const tableColumns = (type, latestRevision, droppedRevision) => {\r\n  const baseColumns = [\r\n    { accessorKey: \"Title\", header: \"Title\" },\r\n    { accessorKey: \"Revision\", header: \"Revision\" },\r\n    { accessorKey: \"State\", header: \"State\" },\r\n  ];\r\n\r\n  if (type === \"Document\") {\r\n    baseColumns.push({ accessorKey: \"IsLatest\", header: \"Is Latest\" });\r\n  }\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ].map((columnKey) => ({\r\n    accessorKey: columnKey,\r\n    header: columnKey,\r\n    cell: ({ row, getValue, table }) => {\r\n      // Determine if the cell should be editable\r\n      const isEditable =\r\n        type === \"Document\"\r\n          ? row.original.IsLatest !== \"FALSE\" // Editable only if IsLatest is NOT \"FALSE\"\r\n          : !latestRevision || latestRevision === droppedRevision;\r\n\r\n      const handleDropdownChange = (e) => {\r\n        const updatedValue = e.target.value;\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id\r\n              ? { ...r.original, [columnKey]: updatedValue }\r\n              : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData);\r\n      };\r\n\r\n      return isEditable ? (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n          style={{\r\n            width: \"70%\",\r\n            padding: \"5px 0\",\r\n            fontSize: \"14px\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n          onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n        >\r\n          <option value=\"Yes\">Yes</option>\r\n          <option value=\"No\">No</option>\r\n        </select>\r\n      ) : (\r\n        <span>{getValue()}</span> // Show non-editable text if conditions fail\r\n      );\r\n    },\r\n  }));\r\n\r\n  return [...baseColumns, ...editableColumns];\r\n};\r\n\r\n// export const tableColumns = (type, latestRevision, droppedRevision) => [\r\n//   { accessorKey: \"Title\", header: \"Title\" },\r\n//   { accessorKey: \"Revision\", header: \"Revision\" },\r\n//   { accessorKey: \"State\", header: \"State\" },\r\n//   ...[\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ].map((columnKey) => ({\r\n//     accessorKey: columnKey,\r\n//     header: columnKey,\r\n//     cell: ({ row, getValue, table }) => {\r\n//       const handleDropdownChange = (e) => {\r\n//         const updatedValue = e.target.value;\r\n//         const updatedData = table\r\n//           .getRowModel()\r\n//           .rows.map((r) =>\r\n//             r.id === row.id\r\n//               ? { ...r.original, [columnKey]: updatedValue }\r\n//               : r.original\r\n//           );\r\n\r\n//         table.options.meta?.updateTableData(updatedData);\r\n//       };\r\n\r\n//       return (\r\n//         <select\r\n//           value={getValue()}\r\n//           onChange={handleDropdownChange}\r\n//           className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n//           style={{\r\n//             width: \"70%\",\r\n//             padding: \"5px\",\r\n//             fontSize: \"14px\",\r\n//             color: \"#333\",\r\n//             background: \"none\",\r\n//             border: \"none\",\r\n//             textAlign: \"left\",\r\n//           }}\r\n//           onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n//           onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n//         >\r\n//           <option value=\"Yes\">Yes</option>\r\n//           <option value=\"No\">No</option>\r\n//         </select>\r\n//       );\r\n//     },\r\n//   })),\r\n// ];\r\n\r\n// {\r\n//   accessorKey: \"MBom\",\r\n//   header: \"MBom\",\r\n//   cell: ({ row, getValue, table }) => {\r\n//     const handleDropdownChange = (e) => {\r\n//       if (!CAName) return; // Prevent changes when disabled\r\n//       const updatedValue = e.target.value;\r\n\r\n//       // Update the table data state here\r\n//       const updatedData = table\r\n//         .getRowModel()\r\n//         .rows.map((r) =>\r\n//           r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n//         );\r\n\r\n//       table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n//     };\r\n\r\n//     return (\r\n//       <select\r\n//         value={getValue()}\r\n//         onChange={handleDropdownChange}\r\n//         disabled={!CAName} // Disable dropdown if CAName is false\r\n//         className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n//         style={{\r\n//           ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n//           width: \"70%\",\r\n//           padding: \"5px\",\r\n//           fontSize: \"14px\",\r\n//           color: \"#333\",\r\n//           background: \"none\",\r\n//           border: \"none\",\r\n//           textAlign: \"left\",\r\n//         }}\r\n//         onMouseOver={(e) => {\r\n//           if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n//         }}\r\n//         onMouseOut={(e) => {\r\n//           if (CAName) e.target.style.border = \"none\";\r\n//         }}\r\n//       >\r\n//         <option value=\"Make\">Make</option>\r\n//         <option value=\"Buy\">Buy</option>\r\n//       </select>\r\n//     );\r\n//   },\r\n// },\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useObsolescenceDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport ObsolescenceWidget from \"./ObsolescenceWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <ObsolescenceWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","forwardRef","_ref","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","cell","_ref2","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","onClick","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","useObsolescenceWidget","showErrorToast","dispatch","useDispatch","email","window","widget","getValue","log","handleObsolescenceWidget","async","collabSpace","parentName","parentRevision","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","concat","process","ChildObject","callEnoviaWebService","error","useObsolescenceDropableArea","isDropped","useSelector","droppedObject","loading","validTypes","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","success","_dataItems$","_dataItems$2","draggedObjectData","cardData","Type","includes","setLoading","setDroppedObjectData","setIsDroppedAction","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","editableColumns","selectedRows","onApplyUpdate","valueOptions","onClose","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","display","e","target","value","col","disabled","val","cursor","onSave","tableData","onMassUpdate","latestRevision","droppedRevision","showDropdown","setShowDropdown","MassUpdateDropdown","handleMassUpdate","scope","ObsolescenceWidget","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","selectableRows","setSelectableRows","showSuccessToast","_objectSpread","changedCells","selectedTableRows","droppedObjectData","loadingParentDetails","proposedChanges","plantObjectData","bosData","BOSObjectData","bosSpecDocument","specDocument","updateTableData","updatedData","newDataWithChanges","newItem","originalItem","find","oldItem","Title","Revision","Object","keys","key","prevKey","initialDraggedData","_droppedObjectData$in","_droppedObjectData$in2","items","newTableData","getTableData","ObsolescenceData","rowData","childTitle","childRevision","State","childState","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","IsLatest","childLatest","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","baseColumns","header","push","columnKey","_table$options$meta","updatedValue","r","options","meta","padding","fontSize","background","border","textAlign","onMouseOver","onMouseOut","Loader","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","allPlants","initialAssignedPlants","uniquePlants","productChildren","CardWithDragAndDrop","widgetType","ObsolescenceWidgetToolbarNativeCta","ChildNameKey","ChildRevKey","ChildStateKey","ChildIdKey","parentData","SpecName","SpecRevision","SpecState","SpecID","ItemName","ItemRevision","ItemState","ItemID","formattedData","matchingData","childName","ID","sort","a","b","localeCompare","Number","response","fetchData","status","MSG_SAVE_SUCCESS","MSG_SAVE_FAILURE","mergedData","updatedRow","updated","ReusableTable","onSelectableRowsChange","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener","extractIdsFromTitles","newClasses","itemTitle","replace","matchedPlant","plant","toLowerCase","filter","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","classes","declassifyResponse","JSON","stringify","handleAddData","productChilds","hasMBOM","NotPropagableChilds","prodChild","change","identifier","action","ErrorObject","classId","missingIn","child","name","join","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","message","filteredNewClasses","classifyUrl","classifyResponse","childs","childclassifyResponse","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","AllClasses","finalArray","ENOVIA_BASE_URL","WAFData","loadWAFData","fetchOOTBData","url","method","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","Array","isArray","every","childTitles","errorItem","updateBody","MBOMName","propagateClasses","_response$member$","nextApiUrl","cestamp","member","patchUrl"],"sourceRoot":""}