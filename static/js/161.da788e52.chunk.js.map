{"version":3,"file":"static/js/161.da788e52.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Popup/Popup.jsx","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","services/api/PlantAssignment/createMFGCA.js","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n        {!isMFGCA && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n        )}\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./plantAssignment.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n        <div class=\"mt-3\">\r\n          <div class=\"row justify-content-center\">\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                  link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef} // Attach the ref to the file input\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n                }}\r\n              >\r\n                <Button\r\n                  // variant=\"outline-primary\"\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled} // Disable the button\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\n// Import useToastWithProgress\r\n \r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n \r\n \r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n \r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n \r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n \r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n \r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\",\r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n \r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/createMFGCA\";\r\n \r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n \r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n \r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled\r\n) => {\r\n \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n \r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n \r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n \r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    return;\r\n  }\r\n \r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n \r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n \r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n \r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n   \r\n \r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n \r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n \r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n \r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n \r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n \r\n    console.log(\"Validation Errors:\", errors);\r\n \r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n \r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n \r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n    }\r\n  };\r\n \r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n \r\n  reader.readAsArrayBuffer(file);\r\n};\r\n \r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress,\r\n  handleReset\r\n) => {\r\n  try {\r\n \r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n \r\n    console.log(\"Collab Space:\", collabSpace);\r\n \r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n \r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n \r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n \r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    //showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    showSuccessToastWithProgress(\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n    <span>\r\n      Manufacturing CA created successfully! Name: <strong>{CAName}</strong>\r\n    </span>\r\n    <button\r\n      onClick={(event) => {\r\n        event.stopPropagation(); // Prevent the toast from closing\r\n        navigator.clipboard.writeText(CAName); // Copy the CAName to clipboard\r\n      }}\r\n      style={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        cursor: \"pointer\",\r\n        marginLeft: \"8px\",\r\n        color: \"grey\",\r\n      }}\r\n      title=\"Copy CA Name\"\r\n    >\r\n      <FaRegCopy size={14} />\r\n    </button>\r\n  </div>\r\n    );\r\n    handleReset();\r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = usePlantDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        showSuccessToastWithProgress(\r\n          \"Plants removed successfully from the table.\"\r\n        );\r\n        await handleRemoveData(\r\n          allPlants,\r\n          removedTitles,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type\r\n        );\r\n      } else {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable || CAItemDetailsTable.length === 0) return;\r\n\r\n  //   // ✅ Always derive MFGCA from item MBOM, even if type is not \"Change Action\"\r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n\r\n  //   if (type === \"Change Action\") {\r\n  //     const isAnyMFGCA = CAItemDetailsTable.some(\r\n  //       (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //     );\r\n\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFGCA,\r\n  //     }));\r\n\r\n  //     if (isAnyMFGCA) {\r\n  //       setIsRemoveMode(false); // 🚀 Immediately set RemoveMode false after confirming MFGCA\r\n  //     }\r\n  //   }\r\n  // }, [CAItemDetailsTable, type, dispatch]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress,\r\n        handleReset\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onHide","title","footerButtons","_jsxs","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","style","parent","CellMeasurer","columnIndex","rowIndex","width","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","console","log","CustomModal","ErrorPopup","forwardRef","ref","data","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","id","cell","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","accessorKey","WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","loading","setLoading","window","widget","trace","addEvent","async","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","warn","removeItem","latestDraggedData","store","getState","droppedObject","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","isMFGCA","CAData","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","_availablePlantRef$cu","current","AvailablePlant","newItems","Seq","Status","Change","CAStatus","MBom","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","objectId","objectType","class","link","document","createElement","href","download","click","Form","Group","controlId","Control","multiple","disabled","FontAwesomeIcon","icon","faRotateLeft","display","cursor","callManufacturingCAApi","response","url","body","arguments","undefined","method","JSON","stringify","axios","headers","fetchData","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","csrfTokenHeaders","fetchCsrfToken","CAHeaders","_objectSpread","credentials","getValue","credentialsParts","companyName","collabSpace","allPlantsData","getAllPlants","manufacturingCABody","excelData","uniquePlantTitles","Set","itemName","toString","trim","plantsList","p","name","plants","plant","add","parentPlants","plantTitle","matchedPlant","find","replace","PlantName","PlantID","CATitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","alignItems","event","stopPropagation","navigator","clipboard","writeText","background","border","marginLeft","color","FaRegCopy","PlantAssignment","useToastWithProgress","isAddingPlant","setIsAddingPlant","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","tableData","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","isRemoveMode","setIsRemoveMode","dispatch","useDispatch","securityContext1","handleRemovePlant","useCallback","itemId","plantId","ItemId","ItemPlants","extractPlantData","plantData","ItemName","plantName","Plant","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","sourceData","assignedTablePlants","flatMap","_item$Plant","uniqueTablePlants","filter","updateTableData","updatedData","prevKey","cardData","_droppedObjectData$in5","_droppedObjectData$in6","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in7","_droppedObjectData$in8","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","classitem","MBOM","test","concat","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","formattedFinalMessage","autoClose","finalobj","ErrorObj","keys","processErrorObj","MSG_SAVE_FAILURE","newTableData","getTableData","uniqueTableData","getUniqueTableData","getCardData","tableColumns","uniqueColumns","value","flexDirection","justifyContent","position","DragAndDropComponent","files","target","validExtensions","Array","from","file","toLowerCase","endsWith","reader","FileReader","onload","Uint8Array","e","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","header","normalizedHeaders","errorDescription","formattedErrors","onerror","readAsArrayBuffer","handleFileChange","finally","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","PlantAssignmentToolbarNativeCta","prev","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","existsInRedux","PlantERPStatus","_droppedObjectData$in3","_droppedObjectData$in4","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","ItemTitle","setCAItemDetails","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","selectedTitles","removedTitles","prevUniquePlants","handleRemoveData","ReusableTable","ContentErrorsModal","_droppedObjectData$in9","_droppedObjectData$in10","_droppedObjectData$in11","objectData","payload","CAId","organization","caDetails","ca","_excluded2","PlantType","_droppedObjectData$in12","_droppedObjectData$in13","_droppedObjectData$in14","ItemMBOM","_originalItem$ItemPla","ci","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener","extractIdsFromTitles","newClasses","itemTitle","productId","declassifyUrl","classifybody","classes","declassifyResponse","productChilds","NotPropagableChilds","prodChild","change","identifier","action","classId","missingIn","child","Childs","classTitle","filteredNewClasses","classifyUrl","classifyResponse","childs","childclassifyResponse","initialAssignedClasses","AllClasses","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","prodchilds","notPropagableChild","childId","childName","isArray","every","childTitles","errorItem","updateBody","propagateClasses","_response$member$","nextApiUrl","cestamp","member","patchUrl"],"sourceRoot":""}