{"version":3,"file":"static/js/91.103b8304.chunk.js","mappings":"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","sources":["hooks/useObsolescenceWidget.js","hooks/useObsolescenceDropableArea.js","pages/ObsolescenceWidget/MassUpdateDropdown.jsx","pages/ObsolescenceWidget/ObsolescenceWidgetToolbarNativeCta.jsx","pages/ObsolescenceWidget/ObsolescenceWidget.jsx","pages/ObsolescenceWidget/ObsolescencedataHelper.js","pages/ObsolescenceWidget/WidgetLifecycle.jsx","pages/ObsolescenceWidget/ObsolescenceIndex.js","components/DragAndDrop/DragAndDrop.jsx","services/api/PlantAssignment/saveTableDataService.js","components/Popup/Popup.jsx"],"sourcesContent":["// import { useDispatch, useSelector } from \"react-redux\";\r\n\r\n// import {\r\n//   setCAAllPlants,\r\n//   setCAHeaders,\r\n//   setCAItemDetails,\r\n//   setHeaders,\r\n//   setIsMFGCA,\r\n//   setLoading,\r\n//   setObselenceObjectData,\r\n//   setParentDetailsLoading,\r\n//   // setPlantObjectData,\r\n//   setProductChildren,\r\n//   setProposedChanges,\r\n//   setSpecDocument,\r\n//   setCAName,\r\n//   setCAData\r\n// } from \"../store/droppedObjectSlice\";\r\n// import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\n// import useToast from \"./useToast\";\r\n// import { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\n// import { initWidget } from \"../lib/widget\";\r\n// import { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n// import { useCallback, useEffect } from \"react\";\r\n// import { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\n// import { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n// import {\r\n//   getAssignedClasses,\r\n//   getItemDetails,\r\n//   getLatestRevision,\r\n//   getScopedItms,\r\n// } from \"../pages/plantAssignment/dataHelpers\";\r\n// import { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n// import { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\n// import { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\n\r\n// const useObsolescenceWidget = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const dispatch = useDispatch();\r\n//   const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n//   let email = window.widget.getValue(\"email\");\r\n\r\n//   console.log(\"Email in useObsolescenceWidget:\", email);\r\n//   // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n//   // const {droppedObjectData}= useSelector ((state)=> state.droppedObjectData)\r\n//   // console.log(\"SSSSSSSSSSSSSSSs\", droppedObjectData)\r\n\r\n//   const handleObsolescenceWidget = async (collabSpace,objectId, type, relativePath) => {\r\n//     if (!collabSpace || !objectId || !type || !relativePath) {\r\n//       console.error(\"[handleObsolescenceWidget] ❌ Missing required argument(s):\", {\r\n//         collabSpace,\r\n//         objectId,\r\n//         type,\r\n//         relativePath,\r\n//       });\r\n//       return;\r\n//     }\r\n    \r\n//     try {\r\n//       dispatch(\r\n//         setObselenceObjectData({ parentObjectData: [] })\r\n//       );\r\n//       let tableOfArrayData =[]\r\n//       dispatch(setParentDetailsLoading(true));\r\n\r\n//       const headers = await fetchCsrfToken();\r\n//       console.log(\"headerssss\", headers);\r\n\r\n//       if (!headers) {\r\n//         showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n//         return;\r\n//       }\r\n\r\n//       console.log(\"[useObsolescenceWidget] CSRF Headers:\", headers);\r\n//       // ================ locate api\r\n//       // let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n//       // let body = {\r\n//       //   referencedObjects: [\r\n//       //     {\r\n//       //       source: ENOVIA_BASE_URL,\r\n//       //       type: type,\r\n//       //       identifier: objectId,\r\n//       //       relativePath: relativePath,\r\n//       //     },\r\n//       //   ],\r\n//       // };\r\n\r\n//       // let ChildObject = await callEnoviaWebService(\r\n//       //   \"POST\",\r\n//       //   baseURL,\r\n//       //   body,\r\n//       //   headers\r\n//       // );\r\n\r\n//       let ChildObject = await locateApi(ENOVIA_BASE_URL, objectId, type, relativePath,headers);\r\n//       console.log(\"SpecDetails Response:\", ChildObject);\r\n//       if (ChildObject.status && ChildObject.output) {\r\n//         let member =\r\n//           ChildObject?.output?.member[0][\"dseng:EngInstance\"]?.member;\r\n//           console.log(\"🔍 EngInstance members:\", member);\r\n\r\n//         if (member?.length > 0) {\r\n//           let url = [];\r\n//           member &&\r\n//             member.map((items) => {\r\n//               url.push(\r\n//                 items.parentObject?.source + items.parentObject?.relativePath\r\n//               );\r\n//             });\r\n//           console.log(\"URL\", url);\r\n//           let revisionStateData = [];\r\n//           if (url) {\r\n//             const promises = url.map(async (apiPath) => {\r\n//               const revisionState = await callEnoviaWebService(\r\n//                 \"GET\",\r\n//                 apiPath,\r\n//                 \"\",\r\n//                 headers\r\n//               );\r\n//               if (revisionState) {\r\n//                 revisionStateData = [\r\n//                   ...revisionStateData,\r\n//                   ...revisionState?.output?.member,\r\n//                 ];\r\n//               }\r\n//             });\r\n//             await Promise.all(promises);\r\n//           }\r\n\r\n          \r\n//           console.log(\"revisionStateData\", revisionStateData);\r\n//           dispatch(\r\n//             setObselenceObjectData({ parentObjectData: revisionStateData })\r\n//           );\r\n//         } else {\r\n//           console.log(\"Not working\");\r\n//           console.warn(\"⚠️ No parent object members found in locate call.\");\r\n//         }\r\n       \r\n//         if (type === \"Change Action\") {\r\n//           let isMFGCA = false;\r\n//           let ItemDetails = []; \r\n//           console.log(\"The object Type is Change Action\");\r\n//           const fetchChangeActionData = async () => {\r\n//             const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n//             const response = await callEnoviaWebService(\r\n//               \"GET\",\r\n//               CAURL,\r\n//               \"\",\r\n//               headers\r\n//             );\r\n//             console.log(\"Response from Change Action URL:\", response);\r\n            \r\n\r\n//             if (response.status && response.output) {\r\n//               // const realizedChanges = response.output.realizedChanges.map(\r\n//               //     (realizedChange) => realizedChange.where.identifier\r\n//               //   );\r\n              \r\n//               for (let i = 0; i < response?.output?.proposedChanges?.length; i++) {\r\n//                 const change = response.output.proposedChanges[i];\r\n//                 const url = change.where.source + change.where.relativePath;\r\n//                 console.log(\"Processing change:\", change);\r\n//                 console.log(\"URL for change:\", url);\r\n//                 const responseofTable = await callEnoviaWebService(\r\n//                   \"GET\",   \r\n//                   url,    \r\n//                   \"\", \r\n//                   headers\r\n//                 );  \r\n//                 console.log(\"Response of Table:\", responseofTable); \r\n//                 if(responseofTable.status){\r\n//                   console.log(\"Response of Table output:\", responseofTable?.output); \r\n//                   tableOfArrayData.push( {...responseofTable?.output?.member[0],changeIntent: change?.whats}\r\n//                   );\r\n//                 }       \r\n//                 // if(responseofTable.status && responseofTable.output){\r\n//                 //   tableOfArrayData.push(responseofTable.output.member[0])\r\n\r\n//                 // }\r\n//               }\r\n//               console.log(\"Table of Array Data:\", tableOfArrayData);\r\n//               // const changeProcessingPromises =\r\n//               //   response.output.proposedChanges.map(async (change) => {\r\n//               //     let ItemId = change.where.identifier;\r\n//               //     let ItemType = change.where.type;\r\n//               //     console.log(\"Processing change:\", change);\r\n\r\n//               //     if (change.target === \"NewVersion\") {\r\n//               //       const sLatestID = await getLatestRevision(\r\n//               //         ItemId,\r\n//               //         ItemType,\r\n//               //         headers\r\n//               //       );\r\n//               //       if (realizedChanges.includes(sLatestID)) {\r\n//               //         ItemId = sLatestID;\r\n//               //       }\r\n//               //     }\r\n//               //     if (\r\n//               //       ItemType !== \"Raw_Material\" &&\r\n//               //       ItemType !== \"VPMReference\"\r\n//               //     ) {\r\n//               //       isMFGCA = true;\r\n//               //       const mfgDetails = await getScopedItms(ItemId, headers);\r\n//               //       console.log(\"MFG Details are:\", mfgDetails);\r\n//               //       ItemId = mfgDetails.identifier;\r\n//               //       ItemType = mfgDetails.type;\r\n//               //     }\r\n//               //     if (ItemId !== undefined && ItemType !== undefined) {\r\n//               //       try {\r\n//               //         const [ItemPlants, Iteminfo] = await Promise.all([\r\n//               //           getAssignedClasses(ItemId, headers),\r\n//               //           getItemDetails(ItemId, ItemType, headers),\r\n//               //         ]);\r\n\r\n//               //         ItemDetails.push({\r\n//               //           ItemId,\r\n//               //           ItemType,\r\n//               //           ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n//               //           ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n//               //           ItemMBOM:\r\n//               //             Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]\r\n//               //               ?.EMR_hasMBOM || \"N/A\",\r\n//               //           ItemPlants,\r\n//               //         });\r\n//               //       } catch (err) {\r\n//               //         console.error(\r\n//               //           `Error processing change for item ${ItemId}:`,\r\n//               //           err\r\n//               //         );\r\n//               //       }\r\n//               //     }\r\n//               //   });\r\n\r\n//               // await Promise.all(changeProcessingPromises);\r\n\r\n//             } else {\r\n//               console.error(\r\n//                 \"Invalid response structure or no proposed changes.\"\r\n//               );\r\n//             }\r\n//           };\r\n//           const CAAllPlantsData = async () => {\r\n//             // Replace this with your actual API call\r\n//             const allPlants = await getAllPlants(\r\n//               [collabSpace],\r\n//               headers,\r\n//               objectId\r\n//             ); // getAllPlants wants collabspace as an array.\r\n//             console.log(\"Parallel API response:\", allPlants);\r\n//             dispatch(setCAAllPlants(allPlants));\r\n//           };\r\n\r\n//           // Run both functions in parallel\r\n//           await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n//           dispatch(setParentDetailsLoading(false));\r\n//           dispatch(setCAItemDetails(ItemDetails));\r\n//           dispatch(setIsMFGCA(isMFGCA));\r\n//           dispatch(setCAHeaders(headers));\r\n//           dispatch(setObselenceObjectData({parentObjectData: tableOfArrayData}))\r\n//         } else {\r\n//           // Step 1: Fetch user group collaboration spaces\r\n//           const userGroupCollab = await getUserGroupCollab(\r\n//             headers,\r\n//             objectId,\r\n//             email\r\n//           );\r\n//           console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n//           let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n//           console.log(\r\n//             \"[Use Plant Assignment] All CollabSpaces:\",\r\n//             allCollabSpaces\r\n//           );\r\n\r\n//           // Step 2: Fetch all plants if collab spaces exist\r\n//           let allPlants = [];\r\n//           if (allCollabSpaces.length > 0) {\r\n//             allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n//             console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n//           } else {\r\n//             console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n//           }\r\n\r\n//           // Step 3: Fetch assigned plants if there are any\r\n//           if (allPlants.length > 0) {\r\n//             const plants = await fetchAssignedPlants(\r\n//               allPlants,\r\n//               headers,\r\n//               objectId\r\n//             );\r\n//             console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n//             if (plants.success) {\r\n//               dispatch(setObselenceObjectData(plants.data.plantData));\r\n//               dispatch(setHeaders(headers));\r\n//             } else {\r\n//               console.error(\"Failed to fetch plant data.\");\r\n//             }\r\n//           } else {\r\n//             console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n//           }\r\n\r\n//           // Step 4: Fetch Product Children based on type\r\n//           let getProductChildren = {};\r\n//           if (type === \"Raw_Material\") {\r\n//             getProductChildren = { success: true, data: [] };\r\n//           } else {\r\n//             getProductChildren = await fetchProductChildren(\r\n//               headers,\r\n//               objectId,\r\n//               type\r\n//             );\r\n//           }\r\n\r\n//           console.log(\"Type After:\", type);\r\n//           console.log(\r\n//             \"[Use Plant Assignment] Product Children:\",\r\n//             getProductChildren\r\n//           );\r\n\r\n//           if (getProductChildren.success) {\r\n//             dispatch(setProductChildren(getProductChildren.data));\r\n//           }\r\n\r\n//           // Step 5: Fetch Change Action details\r\n//           const state = null; \r\n//           const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n//           console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n//           if (getCaDetails.success) {\r\n//             dispatch(setCAName(getCaDetails.data));\r\n//             dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n//             dispatch(setCAData(getCaDetails.CAData));\r\n//           }\r\n\r\n//           console.log(\"[Plant Assignment] All services executed successfully.\");\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"[useObsolescenceWidget] Error:\", error);\r\n//       throw error; // Let the caller handle the error\r\n//     } finally {\r\n//       dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n//     }\r\n//   };\r\n\r\n//   // ============ obselete Button Click Checking State ==============\r\n//   const  obsoleteStateChecking = async(tableData, droppedObjectData)=>{\r\n//     if(!tableData){\r\n//       showErrorToast(\"Items Not Found\");\r\n//       return;\r\n//     }\r\n//     console.log(\"droppedObjectData in custom hook\", droppedObjectData)\r\n//     let itemGroupId = droppedObjectData?.initialDraggedData?.data;\r\n//     let objectId = itemGroupId?.items[0]?.objectId\r\n//     console.log(\"card Data object Id\", objectId)\r\n//     try{\r\n//       dispatch(setLoading(true));\r\n//       const headers = await fetchCsrfToken();\r\n//       console.log(\"headerssss\", headers);\r\n\r\n//       if (!headers) {\r\n//         showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n//         return;\r\n//       }\r\n//       let locateParentObjectsArray = [];\r\n//       let finalObsoleteStatusArray =[]\r\n//       for (let i = 0; i < tableData.length; i++) {\r\n//         const item = tableData[i];\r\n//         console.log(\"Checking item:\", item);\r\n//         let locateApiResponse = await locateApi(\r\n//           ENOVIA_BASE_URL,\r\n//           item.id,\r\n//           item.type,\r\n//           `/resources/v1/modeler/dseng/dseng:EngItem/${item.id}`,\r\n//           headers\r\n//         ); \r\n//         console.log(\"Locate API Response when click Obsolote:\", locateApiResponse);\r\n//         if(locateApiResponse?.status){\r\n//           // if(locateApiResponse?.output?.member?.length === 0){\r\n//           //   if(droppedObjectData?.cardData['Maturity State'] === 'In Work'){\r\n//           //   await stateChange(objectId, \"In Approval\")\r\n//           //   }else if (droppedObjectData?.cardData['Maturity State'] === 'Draft') {\r\n//           //     // First call: change to \"In Work\"\r\n//           //     const response1 = await stateChange(objectId, \"In Work\");\r\n//           //     // If the first call succeeds, make the second call\r\n//           //     if (response1?.success) {\r\n//           //       await stateChange(objectId, \"In Approval\");\r\n//           //     } else {\r\n//           //       console.error(\"Failed to update to 'In Work'\");\r\n//           //     }\r\n//           //   }\r\n//           // }\r\n//         const engInstances = locateApiResponse?.output?.member[0] || [];\r\n//         const locateParentObject = engInstances['dseng:EngInstance']?.member || null;\r\n//           locateParentObjectsArray.push(locateParentObject);\r\n//         }\r\n//         console.log(\"Locate Parent Objects Array:\", locateParentObjectsArray);\r\n//         if(locateParentObjectsArray){\r\n//           for (let j = 0; j < locateParentObjectsArray.length; j++) {\r\n//             const parentMembers = locateParentObjectsArray[j];\r\n//             console.log(\"Parent Object:\", parentMembers);\r\n//             if(parentMembers.length > 0){\r\n//               await Promise.all(parentMembers.map(async (item) => {\r\n//                 let revisionState = await callEnoviaWebService(\r\n//                   \"GET\",\r\n//                   `${item?.parentObject?.source}${item?.parentObject?.relativePath}`,\r\n//                   \"\",\r\n//                   headers\r\n//                 );\r\n//                 console.log(\"Revision State Response:\", revisionState);\r\n//                 if (revisionState?.status) {\r\n//                   const obsoleteStateData = revisionState?.output?.member[0];\r\n//                   finalObsoleteStatusArray.push(obsoleteStateData);\r\n//                 }\r\n//               }));\r\n//             }           \r\n//           }\r\n//         }\r\n//       }\r\n//       console.log(\"finalObsoleteStatusArray =======================\", finalObsoleteStatusArray);\r\n//       const hasObsolete = finalObsoleteStatusArray.every(item => item.state === \"OBSOLETE\");\r\n//       console.log(\"hasObsolete ============\", hasObsolete)\r\n//       if (hasObsolete) {\r\n//         console.log(`Success: All ${finalObsoleteStatusArray?.length} items are OBSOLETE.`);\r\n//         console.log(\"droppedObjectData?.cardData['Maturity State']\",droppedObjectData?.cardData['Maturity State'])\r\n//         if(droppedObjectData?.cardData['Maturity State'] === 'In Work'){\r\n//           await stateChange(objectId, \"In Approval\", ENOVIA_BASE_URL, headers, showErrorToast)\r\n//         }else if (droppedObjectData?.cardData['Maturity State'] === 'Draft') {\r\n//           // First call: change to \"In Work\"\r\n//           const response1 = await stateChange(objectId, \"In Work\", ENOVIA_BASE_URL, headers, showErrorToast);\r\n//           // If the first call succeeds, make the second call\r\n//           if (response1?.success) {\r\n//             await stateChange(objectId, \"In Approval\", ENOVIA_BASE_URL, headers, showErrorToast)\r\n// ;\r\n//           } else {\r\n//             console.error(\"Failed to update to 'In Work'\");\r\n//           }\r\n//         }\r\n//       } else {\r\n//         showErrorToast(\"All Parent Items Should be Obsolete\");\r\n//       }\r\n//     }catch(err){\r\n//       showErrorToast(\"Error in Obsolence\")\r\n//     }finally{\r\n//       dispatch(setLoading(false));\r\n//     }\r\n   \r\n//   }\r\n    \r\n//   // ============ obselete Button Click Checking State ==============\r\n\r\n//   return { handleObsolescenceWidget,\r\n//     obsoleteStateChecking\r\n//    };\r\n// };\r\n\r\n// export default useObsolescenceWidget;\r\n\r\n// async function locateApi(ENOVIA_BASE_URL,objectId, type, relativePath, headers) {\r\n//     let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n//     let body = {\r\n//       referencedObjects: [\r\n//         {\r\n//           source: ENOVIA_BASE_URL,\r\n//           type: type,\r\n//           identifier: objectId,\r\n//           relativePath: relativePath,\r\n//         },\r\n//       ],\r\n//     };\r\n\r\n//     let ChildObject = await callEnoviaWebService(\r\n//       \"POST\",\r\n//       baseURL,\r\n//       body,\r\n//       headers\r\n//     );\r\n\r\n//     return ChildObject;\r\n// }\r\n\r\n// async function stateChange(objectId, nextState, ENOVIA_BASE_URL, headers, showErrorToast){\r\n//   console.log(\"objectId, nextState\",objectId, nextState)\r\n//   try{\r\n//     let body = {\r\n//         data: [\r\n//           {\r\n//             id: objectId,\r\n//             nextState: nextState\r\n//           }\r\n//         ]\r\n//     }\r\n//     console.log('')\r\n//     let maturitySatate = await maturityChangeApi(ENOVIA_BASE_URL,body, headers );\r\n//     console.log(\"maturitySatate in custom hook\", maturitySatate)\r\n//     return maturitySatate\r\n//   }catch(err){\r\n//     console.log(\"Error updating State\")\r\n//     showErrorToast(\"Error Updating State\")\r\n//   }\r\n// }\r\n// async function maturityChangeApi(ENOVIA_BASE_URL,body, headers){\r\n//  let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/maturity/changeState`;\r\n\r\n//     let ChildObject = await callEnoviaWebService(\r\n//       \"POST\",\r\n//       baseURL,\r\n//       body,\r\n//       headers\r\n//     );\r\n\r\n//     return ChildObject;\r\n// }\r\n\r\n\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setLoading,\r\n  setObselenceObjectData,\r\n  setParentDetailsLoading,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setSpecDocument,\r\n  setCAName,\r\n  setCAData\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\nimport {\r\n  getAssignedClasses,\r\n  getItemDetails,\r\n  getLatestRevision,\r\n  getScopedItms,\r\n} from \"../pages/plantAssignment/dataHelpers\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\n\r\nconst useObsolescenceWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  const handleObsolescenceWidget = async (collabSpace, objectId, type, relativePath) => {\r\n    if (!collabSpace || !objectId || !type || !relativePath) {\r\n      console.error(\"[handleObsolescenceWidget] ❌ Missing required argument(s):\", {\r\n        collabSpace,\r\n        objectId,\r\n        type,\r\n        relativePath,\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      dispatch(setObselenceObjectData({ parentObjectData: [] }));\r\n      let tableOfArrayData = [];\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      console.log(\"headerssss\", headers);\r\n\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      let ChildObject = await locateApi(ENOVIA_BASE_URL, objectId, type, relativePath, headers);\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (ChildObject.status && ChildObject.output) {\r\n        let member = ChildObject?.output?.member?.[0]?.[\"dseng:EngInstance\"]?.member;\r\n        console.log(\"🔍 EngInstance members:\", member);\r\n\r\n        if (member?.length > 0) {\r\n          let url = member.map(\r\n            (items) => items.parentObject?.source + items.parentObject?.relativePath\r\n          );\r\n          let revisionStateData = [];\r\n\r\n          const promises = url.map(async (apiPath) => {\r\n            const revisionState = await callEnoviaWebService(\"GET\", apiPath, \"\", headers);\r\n            if (revisionState) {\r\n              revisionStateData = [...revisionStateData, ...revisionState?.output?.member];\r\n            }\r\n          });\r\n\r\n          await Promise.all(promises);\r\n          console.log(\"revisionStateData\", revisionStateData);\r\n          dispatch(setObselenceObjectData({ parentObjectData: revisionStateData }));\r\n        }\r\n\r\n        if (type === \"Change Action\") {\r\n          let isMFGCA = false;\r\n          let ItemDetails = [];\r\n\r\n          const fetchChangeActionData = async () => {\r\n            const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n            const response = await callEnoviaWebService(\"GET\", CAURL, \"\", headers);\r\n\r\n            if (response.status && response.output) {\r\n              for (let change of response?.output?.proposedChanges || []) {\r\n                const url = change.where.source + change.where.relativePath;\r\n                const responseofTable = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n                if (responseofTable.status) {\r\n                  tableOfArrayData.push({\r\n                    ...responseofTable?.output?.member?.[0],\r\n                    changeIntent: change?.whats,\r\n                  });\r\n                }\r\n              }\r\n              console.log(\"Table of Array Data:\", tableOfArrayData);\r\n            }\r\n          };\r\n\r\n          const CAAllPlantsData = async () => {\r\n            const allPlants = await getAllPlants([collabSpace], headers, objectId);\r\n            dispatch(setCAAllPlants(allPlants));\r\n          };\r\n\r\n          await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n          dispatch(setParentDetailsLoading(false));\r\n          dispatch(setCAItemDetails(ItemDetails));\r\n          dispatch(setIsMFGCA(isMFGCA));\r\n          dispatch(setCAHeaders(headers));\r\n          dispatch(setObselenceObjectData({ parentObjectData: tableOfArrayData }));\r\n        } else {\r\n          const userGroupCollab = await getUserGroupCollab(headers, objectId, email);\r\n          let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n\r\n          let allPlants = [];\r\n          if (allCollabSpaces.length > 0) {\r\n            allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          }\r\n\r\n          if (allPlants.length > 0) {\r\n            const plants = await fetchAssignedPlants(allPlants, headers, objectId);\r\n            if (plants.success) {\r\n              dispatch(setObselenceObjectData(plants.data.plantData));\r\n              dispatch(setHeaders(headers));\r\n            }\r\n          }\r\n\r\n          let getProductChildren = {};\r\n          if (type === \"Raw_Material\") {\r\n            getProductChildren = { success: true, data: [] };\r\n          } else {\r\n            getProductChildren = await fetchProductChildren(headers, objectId, type);\r\n          }\r\n\r\n          if (getProductChildren.success) {\r\n            dispatch(setProductChildren(getProductChildren.data));\r\n          }\r\n\r\n          const state = null;\r\n          const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n\r\n          if (getCaDetails.success) {\r\n            dispatch(setCAName(getCaDetails.data));\r\n            dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n            dispatch(setCAData(getCaDetails.CAData));\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useObsolescenceWidget] Error:\", error);\r\n      throw error;\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false));\r\n    }\r\n  };\r\n\r\n  const obsoleteStateChecking = async (tableData, droppedObjectData) => {\r\n    if (!tableData) {\r\n      showErrorToast(\"Items Not Found\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"droppedObjectData in custom hook\", droppedObjectData);\r\n    let itemGroupId = droppedObjectData?.initialDraggedData?.data;\r\n    let objectId = itemGroupId?.items?.[0]?.objectId;\r\n    console.log(\"card Data object Id\", objectId);\r\n\r\n    try {\r\n      dispatch(setLoading(true));\r\n      const headers = await fetchCsrfToken();\r\n      console.log(\"🔐 CSRF headers:\", headers);\r\n\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      let locateParentObjectsArray = [];\r\n      let finalObsoleteStatusArray = [];\r\n\r\n      for (let i = 0; i < tableData.length; i++) {\r\n        const item = tableData[i];\r\n        console.log(\"📦 Checking item:\", item);\r\n\r\n        let locateApiResponse = await locateApi(\r\n          ENOVIA_BASE_URL,\r\n          item.id,\r\n          item.type,\r\n          `/resources/v1/modeler/dseng/dseng:EngItem/${item.id}`,\r\n          headers\r\n        );\r\n\r\n        console.log(\"📍 Locate API Response:\", locateApiResponse);\r\n\r\n        if (locateApiResponse?.status) {\r\n          const engInstances = locateApiResponse?.output?.member?.[0] || {};\r\n          const locateParentObject =\r\n            engInstances[\"dseng:EngInstance\"]?.member || [];\r\n          locateParentObjectsArray.push(locateParentObject);\r\n        }\r\n      }\r\n\r\n      console.log(\"🗂 Locate Parent Objects Array:\", locateParentObjectsArray);\r\n\r\n      if (locateParentObjectsArray.length > 0) {\r\n        for (let j = 0; j < locateParentObjectsArray.length; j++) {\r\n          const parentMembers = locateParentObjectsArray[j];\r\n\r\n          if (parentMembers?.length > 0) {\r\n            await Promise.all(\r\n              parentMembers.map(async (item) => {\r\n                let revisionState = await callEnoviaWebService(\r\n                  \"GET\",\r\n                  `${item?.parentObject?.source}${item?.parentObject?.relativePath}`,\r\n                  \"\",\r\n                  headers\r\n                );\r\n\r\n                console.log(\"🔄 Revision State Response:\", revisionState);\r\n\r\n                if (revisionState?.status) {\r\n                  const obsoleteStateData = revisionState?.output?.member?.[0];\r\n                  finalObsoleteStatusArray.push(obsoleteStateData);\r\n                }\r\n              })\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log(\"✅ Final Obsolete Status Array:\", finalObsoleteStatusArray);\r\n      const hasObsolete = finalObsoleteStatusArray.every(\r\n        (item) => item.state === \"OBSOLETE\"\r\n      );\r\n      console.log(\"📌 All items OBSOLETE:\", hasObsolete);\r\n\r\n      if (hasObsolete) {\r\n        const currentState = droppedObjectData?.cardData?.[\"Maturity State\"];\r\n        console.log(\"🔍 Current maturity state:\", currentState);\r\n\r\n        if (currentState === \"In Work\") {\r\n          const response = await stateChange(\r\n            objectId,\r\n            \"In Approval\",\r\n            ENOVIA_BASE_URL,\r\n            headers,\r\n            showErrorToast\r\n          );\r\n          console.log(\"🚀 State change to In Approval:\", response);\r\n        } else if (currentState === \"Draft\") {\r\n          const response1 = await stateChange(\r\n            objectId,\r\n            \"In Work\",\r\n            ENOVIA_BASE_URL,\r\n            headers,\r\n            showErrorToast\r\n          );\r\n          console.log(\"🧪 State change to In Work response:\", response1);\r\n          console.log(\"🚀 State change to In Work:\", response1);\r\n\r\n          if (response1?.status) {\r\n            const response2 = await stateChange(\r\n              objectId,\r\n              \"In Approval\",\r\n              ENOVIA_BASE_URL,\r\n              headers,\r\n              showErrorToast\r\n            );\r\n            console.log(\"🚀 State change to In Approval:\", response2);\r\n          } else {\r\n            console.error(\"❌ Failed to update to 'In Work'\");\r\n          }\r\n        }\r\n      } else {\r\n        showErrorToast(\"All Parent Items Should be Obsolete\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"🔥 Error during obsolete state check:\", err);\r\n      showErrorToast(\"Error in Obsolence: \" + (err?.message || \"Unknown Error\"));\r\n    } finally {\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n\r\n  return { handleObsolescenceWidget, obsoleteStateChecking };\r\n};\r\n\r\nexport default useObsolescenceWidget;\r\n\r\n// async function locateApi(ENOVIA_BASE_URL, objectId, type, relativePath, headers) {\r\n//   let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n//   let body = {\r\n//     referencedObjects: [\r\n//       {\r\n//         source: ENOVIA_BASE_URL,\r\n//         type: type,\r\n//         identifier: objectId,\r\n//         relativePath: relativePath,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   let ChildObject = await callEnoviaWebService(\"POST\", baseURL, body, headers);\r\n//   return ChildObject;\r\n// }\r\n\r\nasync function locateApi(ENOVIA_BASE_URL, objectId, type, relativePath, headers) {\r\n  relativePath = relativePath || `/resources/v1/modeler/dseng/dseng:EngItem/${objectId}`;\r\n\r\n  const baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n  const body = {\r\n    referencedObjects: [\r\n      {\r\n        source: ENOVIA_BASE_URL,\r\n        type,\r\n        identifier: objectId,\r\n        relativePath,\r\n      },\r\n    ],\r\n  };\r\n\r\n  console.log(\"📡 Calling locate API with body:\", body);\r\n\r\n  const ChildObject = await callEnoviaWebService(\"POST\", baseURL, body, headers);\r\n\r\n  if (!ChildObject.status) {\r\n    console.error(\"❌ locateApi failed:\", ChildObject);\r\n  }\r\n\r\n  return ChildObject;\r\n}\r\n\r\n\r\nasync function stateChange(objectId, nextState, ENOVIA_BASE_URL, headers, showErrorToast) {\r\n  try {\r\n    let body = {\r\n      data: [{ id: objectId, nextState: nextState }],\r\n    };\r\n    let maturitySatate = await maturityChangeApi(ENOVIA_BASE_URL, body, headers);\r\n    console.log(\"✅ maturitySatate in custom hook\", maturitySatate);\r\n    return maturitySatate;\r\n  } catch (err) {\r\n    console.error(\"❌ Error updating state:\", err);\r\n    showErrorToast(\"Error Updating State\");\r\n  }\r\n}\r\n\r\nasync function maturityChangeApi(ENOVIA_BASE_URL, body, headers) {\r\n  let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/maturity/changeState`;\r\n  return await callEnoviaWebService(\"POST\", baseURL, body, headers);\r\n}\r\n","// import { useCallback, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\n// import { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// // Custom hook\r\n// import usePlantAssignment from \"./usePlantAssignment\";\r\n// // Reusable services\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({\r\n//           dataItems,\r\n//         });\r\n\r\n//         // const cardownerResult = await fetchCardOwnerDetailsService({\r\n//         //   dataItems,\r\n//         //   headers,\r\n//         // });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           // Merge the data from both services\r\n//           // const combineData = {\r\n//           //   cardData: objectDetailsResult.data.cardData,\r\n//           //   ownerData: cardownerResult.data.ownerData,\r\n//           // };\r\n\r\n//           dispatch(\r\n//             setDroppedObjectData({\r\n//               cardData: objectDetailsResult.data.cardData,\r\n//             })\r\n//           );\r\n\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // call usePlantAssignment after successfully fetching object details\r\n//           if (objectDetailsResult) {\r\n//             await handleObsolescenceWidget(\r\n//               draggedObjectData[\"Collaborative Space\"],\r\n//               draggedObjectData[\"Maturity State\"],\r\n//               dataItems[0]?.objectId,\r\n//               dataItems[0]?.objectType,\r\n//               draggedObjectData.Name,\r\n//               draggedObjectData[\"Dropped Revision\"]\r\n//             );\r\n//           }\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       setLoading(true); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         setLoading(false);\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         console.log(\r\n//           \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n//         );\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast]\r\n//   );\r\n//   // Initialize droppable area\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n//       );\r\n//       dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n//     } else {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n//       );\r\n//     }\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100); // Check every 100ms\r\n\r\n//     return () => clearInterval(interval); // Cleanup interval on unmount\r\n//   }, [handleDrop, dispatch]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n//           if (\r\n//             objectType !== \"VPMReference\" &&\r\n//             objectType !== \"Change Action\"\r\n//           ) {\r\n//             showErrorToast(\"Please select CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n////////////////////////////////////////////////original///////////////////////////\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult= await getDroppedObjectDetails({ dataItems });\r\n//         console.log(\"[Object Details Result]:\", objectDetailsResult);\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n//           console.log(\"Maturity state\", maturityState)\r\n\r\n//           if (objectType === \"Change Action\") {\r\n//             const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n//             if (maturityState === \"Completed\") {\r\n//               showErrorToast(\"CA is already completed.\");\r\n//               dispatch(setLoading(false));\r\n//               return;\r\n//             }\r\n//           }\r\n\r\n//           if ((objectType === \"Physical Product\") && (maturityState !== \"Released\")) {\r\n//             showErrorToast(\"Product is not released.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//            // draggedObjectData[\"Collaborative Space\"],\r\n//            // draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData[\"relativePath\"],\r\n//             // draggedObjectData.Name,\r\n//           //  draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n////////////////////////////////////////////////////////////original above//////////////////\r\n\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setLoading,setObselenceObjectData,\r\n  setIsDropped as setIsDroppedAction,\r\n} from \"../store/droppedObjectSlice\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport useObsolescenceWidget from \"./useObsolescenceWidget\";\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useObsolescenceDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const validTypes = [\"VPMReference\", \"Physical Product\", \"Change Action\"];\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        console.log(\r\n          \"[FetchObjectDetails] Requesting with dataItems:\",\r\n          dataItems\r\n        );\r\n\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        console.log(\"[FetchObjectDetails] API response:\", objectDetailsResult);\r\n\r\n        if (objectDetailsResult.success) {\r\n          const draggedObjectData = objectDetailsResult?.data?.cardData;\r\n          const objectType = draggedObjectData?.Type;\r\n          const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n\r\n          console.log(\"[Dragged Object Type]:\", objectType);\r\n          console.log(\"[Maturity State]:\", maturityState);\r\n\r\n          // if (!validTypes.includes(objectType)) {\r\n          //   showErrorToast(\"Please select a CA or Engg Item.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n\r\n          // if (objectType === \"Change Action\" && maturityState === \"Completed\") {\r\n          //   showErrorToast(\"CA is already completed.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n\r\n          // if (objectType === \"Physical Product\" && maturityState !== \"Released\") {\r\n          //   showErrorToast(\"Product is not released.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n          console.log(\"[Validation] Object Type:\", objectType);\r\n          console.log(\"[Validation] Maturity State:\", maturityState);\r\n          console.log(\r\n            \"[Validation] Is valid type?\",\r\n            validTypes.includes(objectType)\r\n          );\r\n\r\n          if (!validTypes.includes(objectType)) {\r\n            console.log(\"[Validation] Invalid object type error triggered\");\r\n            showErrorToast(\"Please select a CA or Engg Item.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          if (objectType === \"Change Action\" && maturityState === \"Completed\") {\r\n            console.log(\"[Validation] CA completed error triggered\");\r\n            showErrorToast(\"CA is already completed.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          if (\r\n            objectType === \"Physical Product\" &&\r\n            maturityState !== \"Released\"\r\n          ) {\r\n            console.log(\"[Validation] Product not released error triggered\");\r\n            showErrorToast(\"Product is not released.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n          dispatch(setIsDroppedAction(true));\r\n          console.log(\"[FetchObjectDetails] Setting dropped object data:\", draggedObjectData);\r\n          \r\n          await handleObsolescenceWidget(\r\n            draggedObjectData[\"Collaborative Space\"], // collabSpace\r\n            dataItems[0]?.objectId,                   // objectId\r\n            dataItems[0]?.objectType,                 // objectType\r\n            draggedObjectData[\"relativePath\"]         // relativePath\r\n          );          \r\n        } else {\r\n          console.error(\r\n            \"[FetchObjectDetails] API failure:\",\r\n            objectDetailsResult\r\n          );\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Exception:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleObsolescenceWidget, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      dispatch(setLoading(true));\r\n      console.log(\"[handleDrop] Called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n          dispatch(setLoading(false));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[handleDrop] Unexpected error:\", error);\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast, dispatch]\r\n  );\r\n\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\"[initializeDroppableArea] Resetting isDropped to false...\");\r\n      dispatch(setIsDroppedAction(false));\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useObsolescenceDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n  onClose, // New prop to close dropdown\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n    onClose(); // Close after applying update\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropdown-menu p-3 \"\r\n      style={{ width: \"300px\", display: \"block\" }}\r\n    >\r\n      <label>Select Column:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        onChange={(e) => setSelectedColumn(e.target.value)}\r\n        value={selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Column --</option>\r\n        {editableColumns.map((col) => (\r\n          <option key={col} value={col}>\r\n            {col}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Select Value:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        value={selectedValue}\r\n        onChange={(e) => setSelectedValue(e.target.value)}\r\n        disabled={!selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Value --</option>\r\n        {valueOptions.map((val) => (\r\n          <option key={val} value={val}>\r\n            {val}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button\r\n        className=\"btn btn-outline-success me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(false)}\r\n        disabled={!selectedRows.length}\r\n        style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n      >\r\n        Apply to Selected\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(true)}\r\n      >\r\n        Apply to All\r\n      </button>\r\n\r\n      {/* Close Button */}\r\n      <button className=\"btn btn-outline-danger me-2 mb-2\" onClick={onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","// import { useState } from \"react\";\r\n// import Popup from \"../../components/Popup/Popup\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\n// import MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\n// const ObsolescenceWidgetToolbarNativeCta = ({\r\n//   onSave,\r\n//   state,\r\n//   selectedRows,\r\n//   tableData,\r\n//   onMassUpdate,\r\n//   type,\r\n//   latestRevision,\r\n//   droppedRevision,\r\n// }) => {\r\n//   const { showWarningToast } = useToast();\r\n//   const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n//   const handleSaveClick = () => {\r\n//     if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n//       showWarningToast(MSG_BOS_SAVE);\r\n//     } else {\r\n//       onSave();\r\n//     }\r\n//     // When save button is clicked, call onSave passed as prop\r\n//     // onSave is passed with tableData from parent\r\n//   };\r\n//   const handleMassUpdate = (column, value, scope) => {\r\n//     if (scope === \"selected\") {\r\n//       onMassUpdate(selectedRows, column, value);\r\n//     } else {\r\n//       onMassUpdate(tableData, column, value);\r\n//     }\r\n//   };\r\n//   const editableColumns = [\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column cta-absolute\">\r\n//       <div className=\"d-flex\">\r\n//         <button\r\n//           className=\"btn btn-outline-success btn-lg m-2\"\r\n//           // onClick={handleSaveClick}\r\n//         >\r\n//           Obsolete\r\n//         </button>\r\n//         {/* <button\r\n//           className=\"btn btn-outline-primary btn-lg m-2\"\r\n//           onClick={() =>\r\n//             type !== \"Document\" && latestRevision !== droppedRevision\r\n//               ? showWarningToast(MSG_BOS_SAVE)\r\n//               : setShowDropdown((prev) => !prev)\r\n//           }\r\n//         >\r\n//           Mass Update\r\n//         </button> */}\r\n//       </div>\r\n\r\n//       {/* Dropdown appears below */}\r\n//       {showDropdown && (\r\n//         <div className=\"mt-2\">\r\n//           <MassUpdateDropdown\r\n//             editableColumns={editableColumns}\r\n//             selectedRows={selectedRows}\r\n//             onApplyUpdate={handleMassUpdate}\r\n//             valueOptions={[\"Yes\", \"No\"]}\r\n//             onClose={() => setShowDropdown(false)}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ObsolescenceWidgetToolbarNativeCta;\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useObsolescenceWidget from \"../../hooks/useObsolescenceWidget\";\r\n\r\nconst ObsolescenceWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n  ParentItemState,\r\n  cardData\r\n}) => {\r\n  const { showWarningToast, showErrorToast } = useToast();\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const{obsoleteStateChecking} = useObsolescenceWidget()\r\n  const parentObjectData = useSelector(\r\n    (state) => state.droppedObject?.obselenceObjectData?.parentObjectData || []\r\n  );\r\n  const handleSaveClick = () => {\r\n    if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n      showWarningToast(MSG_BOS_SAVE);\r\n    } else {\r\n      onSave();\r\n    }\r\n  };\r\n\r\n  console.log(\"cardData from Parent component\", cardData)\r\n  // const handleObsoleteClick = () => {\r\n  //   // Show the new toast\r\n  //   showWarningToast(\"Product is not yet released\");\r\n\r\n  //   // Preserve original save logic\r\n  //   handleSaveClick();\r\n  // };\r\n\r\n  const handleObsoleteClick = async () => {\r\n    console.log(\"Parent Object Data:\", parentObjectData);\r\n    if(parentObjectData){\r\n      const hasUnreleasedItems = parentObjectData.some(item => item?.state !== \"RELEASED\");\r\n      const hasInvalidChangeIntent = parentObjectData.some(\r\n        item => item?.changeIntent[0]?.what !== \"ChangeMaturityObsolete\"\r\n      );\r\n\r\n      if (hasUnreleasedItems) {\r\n        showErrorToast(\"All items must be in 'RELEASED' state.\");\r\n        return;\r\n      } else if (hasInvalidChangeIntent) {\r\n        showErrorToast(\"All items must have ChangeIntent: 'ChangeMaturityObsolete'.\");\r\n        return;\r\n      }\r\n      await obsoleteStateChecking(parentObjectData, cardData)\r\n    }\r\n   \r\n  };\r\n    \r\n\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleObsoleteClick}\r\n        >\r\n          Obsolete\r\n        </button>\r\n        {/* <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={() =>\r\n            type !== \"Document\" && latestRevision !== droppedRevision\r\n              ? showWarningToast(MSG_BOS_SAVE)\r\n              : setShowDropdown((prev) => !prev)\r\n          }\r\n        >\r\n          Mass Update\r\n        </button> */}\r\n      </div>\r\n\r\n      {showDropdown && (\r\n        <div className=\"mt-2\">\r\n          <MassUpdateDropdown\r\n            editableColumns={editableColumns}\r\n            selectedRows={selectedRows}\r\n            onApplyUpdate={handleMassUpdate}\r\n            valueOptions={[\"Yes\", \"No\"]}\r\n            onClose={() => setShowDropdown(false)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidgetToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./ObsolescenceWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {   formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns } from \"./ObsolescencedataHelper\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\nimport ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst ObsolescenceWidget = () => {\r\n  const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  // Get redux data\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData?.specDocument || []\r\n  );\r\n  const parentObjectData = useSelector(\r\n    (state) => state.droppedObject?.obselenceObjectData?.parentObjectData || []\r\n  );\r\n\r\n  // Derive type and state from droppedObjectData if present\r\n  let state, type;\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    state = droppedObjectData.cardData[\"Maturity State\"];\r\n    type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n  console.log(\"droppedObjectData.initialDraggedData?.data\", droppedObjectData.initialDraggedData?.data)\r\n  console.log(\"Type of Parent:\", type);\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(() => getTableData(parentObjectData, type), [\r\n    parentObjectData,\r\n    type,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  }, [newTableData]);\r\n\r\n  const cardData = useMemo(() => getCardData(droppedObjectData), [\r\n    droppedObjectData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  console.log(\"In Widget columns\", columns)\r\n  // ...rest of your functions like handleSave, handleMassUpdate, updateTableData etc.\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea();\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    );\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]);\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n        <>\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"ObsolescenceWidget\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <div className=\"wrapper-cta\">\r\n              <ObsolescenceWidgetToolbarNativeCta\r\n                onSave={() => console.log(\"Save function here\")} // replace with handleSave\r\n                type={type}\r\n                latestRevision={droppedObjectData?.cardData[\"Latest Revision\"]}\r\n                droppedRevision={droppedObjectData?.cardData[\"Dropped Revision\"]}\r\n                selectedRows={selectedTableRows}\r\n                state={state}\r\n                tableData={selectableRows}\r\n                onMassUpdate={() => console.log(\"Mass update clicked\")} // replace with handleMassUpdate\r\n                cardData={droppedObjectData}\r\n              />\r\n              <ReusableTable\r\n                key={tableKey}\r\n                data={tableData}\r\n                columns={columns}\r\n                meta={{ updateTableData: (data) => console.log(\"updateTableData called\", data) }} // replace with updateTableData\r\n                type={type}\r\n                latestRevision={droppedObjectData?.cardData[\"Latest Revision\"]}\r\n                droppedRevision={droppedObjectData?.cardData[\"Dropped Revision\"]}\r\n                widgetType=\"Obsolescence_Attribute_Widget\"\r\n                disableSelection={true}  \r\n              />\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidget;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nimport {callEnoviaWebService} from \"../../utils/helpers\";\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants?.length >0 ? plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      )): 'N/A'}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\n// export const getTableData = (tableData, type, CAData) => {\r\n//   console.log(\"cadata datahelpers\",CAData );\r\n  \r\n//   if (!tableData) return [];\r\n\r\n//   return tableData.map((data) => {\r\n//     if (type === \"Change Action\") {\r\n//       return {\r\n//         ItemName: data?.ItemTitle || \"N/A\",\r\n//         Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n//         ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n//       };\r\n//     } else {\r\n//       console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n//       return {\r\n//         Plant: data?.title || \"N/A\",\r\n//         Seq: data?.Seq || \"1\",\r\n//         Status: data?.PlantStatus || \"Pending\",\r\n//         \"MFG Change\": data?.MFGChange || \"N/A\",\r\n//         \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n//         Change: data?.Change || CAData.CAName ||\"N/A\",\r\n//         \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n//         \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n//         \"ERP Status\": \"Active\" || \"N/A\",\r\n//         \"ERP Export\": \"Yes\" || \"N/A\",\r\n//         \"Lead Plant\": false,\r\n//         MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n//         \"Sort Value\": \"\",\r\n//       };\r\n//     }\r\n//   });\r\n// };\r\n\r\nexport const getTableData = (tableData, type) => {\r\n  if (!tableData) return [];\r\n\r\n  const revisionMap = {};\r\n  console.log(\"tableDta in table data helper\", tableData);\r\n  // Extracting Revision and State from instance response\r\n  // if (instanceResponse?.member?.length) {\r\n  //   instanceResponse.member.forEach((item) => {\r\n  //     const instance = item?.[\"dseng:EngInstance\"]?.member?.[0];\r\n  //     const parentId = instance?.parentObject?.identifier;\r\n  //     const name = instance?.name || \"\";\r\n\r\n  //     // Extract revision as the part after the last dot (e.g., \".1\")\r\n  //     const revision = name.split(\".\").pop();\r\n  //     revisionMap[parentId] = {\r\n  //       revision,\r\n  //       state: \"N/A\", // Add logic here if you have a way to extract 'state'\r\n  //     };\r\n  //   });\r\n  // }\r\n\r\n  return tableData.map((data) => {\r\n    const parentId = data?.ItemId || data?.id;\r\n    const revisionData = revisionMap[parentId] || { revision: \"N/A\", state: \"N/A\" };\r\n\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        \"Parent Item Name\": data.title || \"N/A\",\r\n        Plant: data?.ItemPlants || \"N/A\",\r\n        \"Parent Item Revision\": data.revision,\r\n        \"Parent Item State\": data.state,\r\n        \"Change\": data?.changeIntent[0]?.what || \"N/A\"\r\n      };\r\n    } else {\r\n      return {\r\n        \"Parent Item Name\": data.title,\r\n        Plant: data?.title || \"N/A\",\r\n        \"Parent Item Revision\": data.revision,\r\n        \"Parent Item State\": data.state,\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = ( type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"Parent Item Name\", header: \"Parent Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        // cell: ({ row }) => (\r\n        //   <PlantRenderer\r\n        //     plants={row.original.Plant} // ✅ Uses correct row data\r\n        //     itemId={row.original.ItemId} // ✅ Passes item ID\r\n        //     isRemoveMode={isRemoveMode}\r\n        //     handleRemovePlant={handleRemovePlant}\r\n        //   />\r\n        // ),\r\n      },\r\n      { accessorKey: \"Parent Item Revision\", header: \"Parent Item Revision\" },\r\n      { accessorKey: \"Parent Item State\", header: \"Parent Item State\" },\r\n      { accessorKey: \"Change\", header: \"Change\" },\r\n    ];\r\n  }\r\n\r\n  // return [\r\n  //   { accessorKey: \"Plant\", header: \"Plant\"},\r\n  //   { accessorKey: \"Seq\", header: \"Seq\" },\r\n  //   { accessorKey: \"Status\", header: \"Status\" },\r\n  //   { accessorKey: \"Change\", header: \"Change\" },\r\n  //   { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n  //   { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n  //   { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n  //   { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n  //   {\r\n  //     accessorKey: \"MBom\",\r\n  //     header: \"MBom\",\r\n      \r\n  //   },\r\n  //   { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n  //   { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n  //   { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n  //   { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  // ];\r\n\r\n  return [\r\n    \r\n    { accessorKey: \"Parent Item Name\", header: \"Parent Item Name\"},\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Parent Item Revision\", header: \"Parent Item Revision\" },\r\n    { accessorKey: \"Parent Item State\", header: \"Parent Item State\" },\r\n  ];\r\n  \r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport async function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nexport async function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/7D56FB4BAE741300682C5271000001CF?mask=dsmveng%3AEngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nexport async function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nexport async function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useObsolescenceDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport ObsolescenceWidget from \"./ObsolescenceWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <ObsolescenceWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n"],"names":["useObsolescenceWidget","showErrorToast","useToast","dispatch","useDispatch","ENOVIA_BASE_URL","process","email","window","widget","getValue","handleObsolescenceWidget","async","collabSpace","objectId","type","relativePath","setObselenceObjectData","parentObjectData","tableOfArrayData","setParentDetailsLoading","headers","fetchCsrfToken","console","log","MSG_FETCH_CSRF_HEADERS_FAILED","ChildObject","locateApi","status","output","_ChildObject$output","_ChildObject$output$m","_ChildObject$output$m2","_ChildObject$output$m3","member","length","url","map","items","_items$parentObject","_items$parentObject2","parentObject","source","revisionStateData","promises","revisionState","callEnoviaWebService","apiPath","_revisionState$output","Promise","all","isMFGCA","ItemDetails","fetchChangeActionData","CAURL","concat","response","change","_response$output","proposedChanges","where","responseofTable","_responseofTable$outp","_responseofTable$outp2","push","_objectSpread","changeIntent","whats","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","setCAItemDetails","setIsMFGCA","setCAHeaders","allCollabSpaces","getUserGroupCollab","plants","fetchAssignedPlants","success","data","plantData","setHeaders","getProductChildren","fetchProductChildren","setProductChildren","state","getCaDetails","fetchCADetails","setCAName","setProposedChanges","setCAData","CAData","error","obsoleteStateChecking","tableData","droppedObjectData","_droppedObjectData$in","_itemGroupId$items","_itemGroupId$items$","itemGroupId","initialDraggedData","setLoading","locateParentObjectsArray","finalObsoleteStatusArray","i","item","locateApiResponse","id","_locateApiResponse$ou","_locateApiResponse$ou2","_engInstances$dsengE","locateParentObject","j","parentMembers","_item$parentObject","_item$parentObject2","_revisionState$output2","_revisionState$output3","obsoleteStateData","hasObsolete","every","_droppedObjectData$ca","currentState","cardData","stateChange","response1","response2","err","message","baseURL","body","referencedObjects","identifier","nextState","maturitySatate","maturityChangeApi","useObsolescenceDropableArea","isDropped","useSelector","droppedObject","loading","validTypes","fetchObjectDetails","useCallback","dataItems","objectDetailsResult","getDroppedObjectDetails","_objectDetailsResult$","_dataItems$","_dataItems$2","draggedObjectData","objectType","Type","maturityState","includes","setDroppedObjectData","setIsDroppedAction","MSG_FETCH_OBJECT_DETAILS_FAILED","handleDrop","warn","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","_ref","editableColumns","selectedRows","onApplyUpdate","valueOptions","onClose","selectedColumn","setSelectedColumn","useState","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","_jsxs","className","style","width","display","children","_jsx","onChange","e","target","value","col","disabled","val","onClick","cursor","onSave","onMassUpdate","latestRevision","droppedRevision","ParentItemState","showWarningToast","showDropdown","setShowDropdown","_state$droppedObject","_state$droppedObject$","obselenceObjectData","hasUnreleasedItems","some","hasInvalidChangeIntent","_item$changeIntent$","what","MassUpdateDropdown","handleMassUpdate","column","scope","ObsolescenceWidget","_droppedObjectData$in3","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","selectableRows","setSelectableRows","showSuccessToast","selectedTableRows","loadingParentDetails","BOSObjectData","specDocument","_state$droppedObject$2","_droppedObjectData$in2","useEffect","changedCells","newTableData","useMemo","getTableData","_data$changeIntent$","ItemId","title","Plant","ItemPlants","revision","prevKey","Title","owner","Owner","Description","imageURL","EIN","getCardData","columns","tableColumns","accessorKey","header","_Fragment","Loader","DragAndDropComponent","Image","src","alt","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","initialAssignedPlants","uniquePlants","productChildren","CAName","CardWithDragAndDrop","widgetType","ObsolescenceWidgetToolbarNativeCta","ReusableTable","meta","updateTableData","disableSelection","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener","useDroppableArea","performSearch","useInterComSearch","height","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","extractIdsFromTitles","newClasses","itemTitle","replace","matchedPlant","find","plant","toLowerCase","filter","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","classes","declassifyResponse","fetchData","JSON","stringify","handleAddData","productChilds","hasMBOM","NotPropagableChilds","prodChild","action","ErrorObject","forEach","classId","missingIn","child","name","join","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","filteredNewClasses","classifyUrl","classifyResponse","childs","childclassifyResponse","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","AllClasses","finalArray","WAFData","loadWAFData","fetchOOTBData","method","resolve","reject","authenticatedRequest","onComplete","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","childName","Array","isArray","childTitles","errorItem","updateBody","MBOMName","propagateClasses","Object","keys","_response$member$","nextApiUrl","cestamp","patchUrl","forwardRef","ref","addedItem","rowSelection","setRowSelection","addPlant","selectedItems","table","getSelectedRowModel","rows","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","cell","_ref2","row","checked","getIsSelected","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext"],"sourceRoot":""}