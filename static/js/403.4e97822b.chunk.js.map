{"version":3,"file":"static/js/403.4e97822b.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Popup/Popup.jsx","services/api/PlantAssignment/createMFGCA.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\n// Import useToastWithProgress\r\n \r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n \r\n \r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n \r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n \r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n \r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n \r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\",\r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n \r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/createMFGCA\";\r\n \r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n \r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n \r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled\r\n) => {\r\n \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n \r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n \r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n \r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    return;\r\n  }\r\n \r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n \r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n \r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n \r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n   \r\n \r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n \r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n \r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n \r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n \r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n \r\n    console.log(\"Validation Errors:\", errors);\r\n \r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n \r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n \r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n    }\r\n  };\r\n \r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n \r\n  reader.readAsArrayBuffer(file);\r\n};\r\n \r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress,\r\n  handleReset\r\n) => {\r\n  try {\r\n \r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n \r\n    console.log(\"Collab Space:\", collabSpace);\r\n \r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n \r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n \r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n \r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    //showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    showSuccessToastWithProgress(\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n    <span>\r\n      Manufacturing CA created successfully! Name: <strong>{CAName}</strong>\r\n    </span>\r\n    <button\r\n      onClick={(event) => {\r\n        event.stopPropagation(); // Prevent the toast from closing\r\n        navigator.clipboard.writeText(CAName); // Copy the CAName to clipboard\r\n      }}\r\n      style={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        cursor: \"pointer\",\r\n        marginLeft: \"8px\",\r\n        color: \"grey\",\r\n      }}\r\n      title=\"Copy CA Name\"\r\n    >\r\n      <FaRegCopy size={14} />\r\n    </button>\r\n  </div>\r\n    );\r\n    handleReset();\r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onHide","title","footerButtons","_jsxs","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","style","parent","CellMeasurer","columnIndex","rowIndex","width","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","console","log","CustomModal","ErrorPopup","forwardRef","ref","data","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","id","cell","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","accessorKey","callManufacturingCAApi","async","response","url","body","arguments","undefined","method","JSON","stringify","axios","headers","fetchData","handleFileChange","event","setValidationErrors","setShowErrorsModal","showErrorToast","showSuccessToast","setValidatedData","setSelectedFiles","setIsCreateButtonDisabled","files","target","validExtensions","invalidFiles","Array","from","filter","file","name","toLowerCase","endsWith","value","reader","FileReader","onload","Uint8Array","e","result","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","header","normalizedHeaders","toString","trim","plants","errorDescription","formattedErrors","concat","onerror","readAsArrayBuffer","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","handleReset","csrfTokenHeaders","fetchCsrfToken","CAHeaders","_objectSpread","credentials","window","widget","getValue","credentialsParts","companyName","collabSpace","allPlantsData","getAllPlants","manufacturingCABody","excelData","items","uniquePlantTitles","Set","itemName","plantsList","p","plant","add","parentPlants","plantTitle","matchedPlant","find","replace","PlantName","PlantID","CATitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","display","alignItems","stopPropagation","navigator","clipboard","writeText","background","border","cursor","marginLeft","color","FaRegCopy","extractIdsFromTitles","allPlants","newClasses","itemTitle","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","classes","declassifyResponse","handleAddData","objectId","proposedChanges","productChilds","hasMBOM","NotPropagableChilds","prodChild","change","identifier","action","ErrorObject","classId","missingIn","child","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","filteredNewClasses","some","classifyUrl","mode","classifyResponse","childs","childclassifyResponse","success","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","AllClasses","finalArray","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","childName","Type","isArray","every","childTitles","errorItem","updateBody","MBOMName","propagateClasses","keys","_response$member$","nextApiUrl","cestamp","member","patchUrl"],"sourceRoot":""}