{"version":3,"file":"static/js/91.3454b817.chunk.js","mappings":"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","sources":["components/DragAndDrop/DragAndDrop.jsx","components/Popup/Popup.jsx","hooks/useObsolescenceWidget.js","hooks/useObsolescenceDropableArea.js","pages/ObsolescenceWidget/MassUpdateDropdown.jsx","pages/ObsolescenceWidget/ObsolescenceWidgetToolbarNativeCta.jsx","pages/ObsolescenceWidget/ObsolescenceWidget.jsx","pages/ObsolescenceWidget/ObsolescencedataHelper.js","pages/ObsolescenceWidget/WidgetLifecycle.jsx","pages/ObsolescenceWidget/ObsolescenceIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setObselenceObjectData,\r\n  setParentDetailsLoading,\r\n  // setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\nimport {\r\n  getAssignedClasses,\r\n  getItemDetails,\r\n  getLatestRevision,\r\n  getScopedItms,\r\n} from \"../pages/plantAssignment/dataHelpers\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\n\r\nconst useObsolescenceWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useObsolescenceWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  // const {droppedObjectData}= useSelector ((state)=> state.droppedObjectData)\r\n  // console.log(\"SSSSSSSSSSSSSSSs\", droppedObjectData)\r\n\r\n  const handleObsolescenceWidget = async (collabSpace,objectId, type, relativePath) => {\r\n    if (!collabSpace || !objectId || !type || !relativePath) {\r\n      console.error(\"[handleObsolescenceWidget] ❌ Missing required argument(s):\", {\r\n        collabSpace,\r\n        objectId,\r\n        type,\r\n        relativePath,\r\n      });\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      dispatch(\r\n        setObselenceObjectData({ parentObjectData: [] })\r\n      );\r\n      let tableOfArrayData =[]\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      console.log(\"headerssss\", headers);\r\n\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useObsolescenceWidget] CSRF Headers:\", headers);\r\n      // ================ locate api\r\n      // let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n      // let body = {\r\n      //   referencedObjects: [\r\n      //     {\r\n      //       source: ENOVIA_BASE_URL,\r\n      //       type: type,\r\n      //       identifier: objectId,\r\n      //       relativePath: relativePath,\r\n      //     },\r\n      //   ],\r\n      // };\r\n\r\n      // let ChildObject = await callEnoviaWebService(\r\n      //   \"POST\",\r\n      //   baseURL,\r\n      //   body,\r\n      //   headers\r\n      // );\r\n\r\n      let ChildObject = await locateApi(ENOVIA_BASE_URL, objectId, type, relativePath,headers);\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n      if (ChildObject.status && ChildObject.output) {\r\n        let member =\r\n          ChildObject?.output?.member[0][\"dseng:EngInstance\"]?.member;\r\n          console.log(\"🔍 EngInstance members:\", member);\r\n\r\n        if (member?.length > 0) {\r\n          let url = [];\r\n          member &&\r\n            member.map((items) => {\r\n              url.push(\r\n                items.parentObject?.source + items.parentObject?.relativePath\r\n              );\r\n            });\r\n          console.log(\"URL\", url);\r\n          let revisionStateData = [];\r\n          if (url) {\r\n            const promises = url.map(async (apiPath) => {\r\n              const revisionState = await callEnoviaWebService(\r\n                \"GET\",\r\n                apiPath,\r\n                \"\",\r\n                headers\r\n              );\r\n              if (revisionState) {\r\n                revisionStateData = [\r\n                  ...revisionStateData,\r\n                  ...revisionState?.output?.member,\r\n                ];\r\n              }\r\n            });\r\n            await Promise.all(promises);\r\n          }\r\n\r\n          \r\n          console.log(\"revisionStateData\", revisionStateData);\r\n          dispatch(\r\n            setObselenceObjectData({ parentObjectData: revisionStateData })\r\n          );\r\n        } else {\r\n          console.log(\"Not working\");\r\n          console.warn(\"⚠️ No parent object members found in locate call.\");\r\n        }\r\n       \r\n        if (type === \"Change Action\") {\r\n          let isMFGCA = false;\r\n          let ItemDetails = []; \r\n          console.log(\"The object Type is Change Action\");\r\n          const fetchChangeActionData = async () => {\r\n            const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n            const response = await callEnoviaWebService(\r\n              \"GET\",\r\n              CAURL,\r\n              \"\",\r\n              headers\r\n            );\r\n            console.log(\"Response from Change Action URL:\", response);\r\n            \r\n\r\n            if (response.status && response.output) {\r\n              // const realizedChanges = response.output.realizedChanges.map(\r\n              //     (realizedChange) => realizedChange.where.identifier\r\n              //   );\r\n              \r\n              for (let i = 0; i < response?.output?.proposedChanges?.length; i++) {\r\n                const change = response.output.proposedChanges[i];\r\n                const url = change.where.source + change.where.relativePath;\r\n                console.log(\"Processing change:\", change);\r\n                console.log(\"URL for change:\", url);\r\n                const responseofTable = await callEnoviaWebService(\r\n                  \"GET\",   \r\n                  url,    \r\n                  \"\", \r\n                  headers\r\n                );  \r\n                console.log(\"Response of Table:\", responseofTable); \r\n                if(responseofTable.status){\r\n                  console.log(\"Response of Table output:\", responseofTable?.output); \r\n                  tableOfArrayData.push( {...responseofTable?.output?.member[0],changeIntent: change?.whats}\r\n                  );\r\n                }       \r\n                // if(responseofTable.status && responseofTable.output){\r\n                //   tableOfArrayData.push(responseofTable.output.member[0])\r\n\r\n                // }\r\n              }\r\n              console.log(\"Table of Array Data:\", tableOfArrayData);\r\n              // const changeProcessingPromises =\r\n              //   response.output.proposedChanges.map(async (change) => {\r\n              //     let ItemId = change.where.identifier;\r\n              //     let ItemType = change.where.type;\r\n              //     console.log(\"Processing change:\", change);\r\n\r\n              //     if (change.target === \"NewVersion\") {\r\n              //       const sLatestID = await getLatestRevision(\r\n              //         ItemId,\r\n              //         ItemType,\r\n              //         headers\r\n              //       );\r\n              //       if (realizedChanges.includes(sLatestID)) {\r\n              //         ItemId = sLatestID;\r\n              //       }\r\n              //     }\r\n              //     if (\r\n              //       ItemType !== \"Raw_Material\" &&\r\n              //       ItemType !== \"VPMReference\"\r\n              //     ) {\r\n              //       isMFGCA = true;\r\n              //       const mfgDetails = await getScopedItms(ItemId, headers);\r\n              //       console.log(\"MFG Details are:\", mfgDetails);\r\n              //       ItemId = mfgDetails.identifier;\r\n              //       ItemType = mfgDetails.type;\r\n              //     }\r\n              //     if (ItemId !== undefined && ItemType !== undefined) {\r\n              //       try {\r\n              //         const [ItemPlants, Iteminfo] = await Promise.all([\r\n              //           getAssignedClasses(ItemId, headers),\r\n              //           getItemDetails(ItemId, ItemType, headers),\r\n              //         ]);\r\n\r\n              //         ItemDetails.push({\r\n              //           ItemId,\r\n              //           ItemType,\r\n              //           ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n              //           ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n              //           ItemMBOM:\r\n              //             Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]\r\n              //               ?.EMR_hasMBOM || \"N/A\",\r\n              //           ItemPlants,\r\n              //         });\r\n              //       } catch (err) {\r\n              //         console.error(\r\n              //           `Error processing change for item ${ItemId}:`,\r\n              //           err\r\n              //         );\r\n              //       }\r\n              //     }\r\n              //   });\r\n\r\n              // await Promise.all(changeProcessingPromises);\r\n\r\n            } else {\r\n              console.error(\r\n                \"Invalid response structure or no proposed changes.\"\r\n              );\r\n            }\r\n          };\r\n          const CAAllPlantsData = async () => {\r\n            // Replace this with your actual API call\r\n            const allPlants = await getAllPlants(\r\n              [collabSpace],\r\n              headers,\r\n              objectId\r\n            ); // getAllPlants wants collabspace as an array.\r\n            console.log(\"Parallel API response:\", allPlants);\r\n            dispatch(setCAAllPlants(allPlants));\r\n          };\r\n\r\n          // Run both functions in parallel\r\n          await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n          dispatch(setParentDetailsLoading(false));\r\n          dispatch(setCAItemDetails(ItemDetails));\r\n          dispatch(setIsMFGCA(isMFGCA));\r\n          dispatch(setCAHeaders(headers));\r\n          dispatch(setObselenceObjectData({parentObjectData: tableOfArrayData}))\r\n        } else {\r\n          // Step 1: Fetch user group collaboration spaces\r\n          const userGroupCollab = await getUserGroupCollab(\r\n            headers,\r\n            objectId,\r\n            email\r\n          );\r\n          console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n          let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n          console.log(\r\n            \"[Use Plant Assignment] All CollabSpaces:\",\r\n            allCollabSpaces\r\n          );\r\n\r\n          // Step 2: Fetch all plants if collab spaces exist\r\n          let allPlants = [];\r\n          if (allCollabSpaces.length > 0) {\r\n            allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n            console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n          } else {\r\n            console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n          }\r\n\r\n          // Step 3: Fetch assigned plants if there are any\r\n          if (allPlants.length > 0) {\r\n            const plants = await fetchAssignedPlants(\r\n              allPlants,\r\n              headers,\r\n              objectId\r\n            );\r\n            console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n            if (plants.success) {\r\n              dispatch(setObselenceObjectData(plants.data.plantData));\r\n              dispatch(setHeaders(headers));\r\n            } else {\r\n              console.error(\"Failed to fetch plant data.\");\r\n            }\r\n          } else {\r\n            console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n          }\r\n\r\n          // Step 4: Fetch Product Children based on type\r\n          let getProductChildren = {};\r\n          if (type === \"Raw_Material\") {\r\n            getProductChildren = { success: true, data: [] };\r\n          } else {\r\n            getProductChildren = await fetchProductChildren(\r\n              headers,\r\n              objectId,\r\n              type\r\n            );\r\n          }\r\n\r\n          console.log(\"Type After:\", type);\r\n          console.log(\r\n            \"[Use Plant Assignment] Product Children:\",\r\n            getProductChildren\r\n          );\r\n\r\n          if (getProductChildren.success) {\r\n            dispatch(setProductChildren(getProductChildren.data));\r\n          }\r\n\r\n          // Step 5: Fetch Change Action details\r\n          const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n          console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n          if (getCaDetails.success) {\r\n            dispatch(setCAName(getCaDetails.data));\r\n            dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n            dispatch(setCAData(getCaDetails.CAData));\r\n          }\r\n\r\n          console.log(\"[Plant Assignment] All services executed successfully.\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useObsolescenceWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  // ============ obselete Button Click Checking State ==============\r\n  const  obsoleteStateChecking = async(tableData)=>{\r\n    console.log(\"Table Data in obsoleteStateChecking:\", tableData);\r\n    const headers = await fetchCsrfToken();\r\n      console.log(\"headerssss\", headers);\r\n\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n    let locateParentObjects = []\r\n    for (let i = 0; i < tableData.length; i++) {\r\n      const item = tableData[i];\r\n      console.log(\"Checking item:\", item);\r\n      let locateApiResponse = await locateApi(\r\n        ENOVIA_BASE_URL,\r\n        item.id,\r\n        item.type,\r\n        `/resources/v1/modeler/dseng/dseng:EngItem/${item.id}`,\r\n        headers\r\n      ); \r\n\r\n      console.log(\"Locate API Response when click Obsolote:\", locateApiResponse);\r\n      \r\n    }\r\n  }\r\n  // ============ obselete Button Click Checking State ==============\r\n\r\n  return { handleObsolescenceWidget,\r\n    obsoleteStateChecking\r\n   };\r\n};\r\n\r\nexport default useObsolescenceWidget;\r\n\r\nasync function locateApi(ENOVIA_BASE_URL,objectId, type, relativePath, headers) {\r\n    let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n    let body = {\r\n      referencedObjects: [\r\n        {\r\n          source: ENOVIA_BASE_URL,\r\n          type: type,\r\n          identifier: objectId,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    let ChildObject = await callEnoviaWebService(\r\n      \"POST\",\r\n      baseURL,\r\n      body,\r\n      headers\r\n    );\r\n\r\n    return ChildObject;\r\n}\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n\r\nfunction fetchingTableData(){\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// import { useCallback, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\n// import { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// // Custom hook\r\n// import usePlantAssignment from \"./usePlantAssignment\";\r\n// // Reusable services\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({\r\n//           dataItems,\r\n//         });\r\n\r\n//         // const cardownerResult = await fetchCardOwnerDetailsService({\r\n//         //   dataItems,\r\n//         //   headers,\r\n//         // });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           // Merge the data from both services\r\n//           // const combineData = {\r\n//           //   cardData: objectDetailsResult.data.cardData,\r\n//           //   ownerData: cardownerResult.data.ownerData,\r\n//           // };\r\n\r\n//           dispatch(\r\n//             setDroppedObjectData({\r\n//               cardData: objectDetailsResult.data.cardData,\r\n//             })\r\n//           );\r\n\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // call usePlantAssignment after successfully fetching object details\r\n//           if (objectDetailsResult) {\r\n//             await handleObsolescenceWidget(\r\n//               draggedObjectData[\"Collaborative Space\"],\r\n//               draggedObjectData[\"Maturity State\"],\r\n//               dataItems[0]?.objectId,\r\n//               dataItems[0]?.objectType,\r\n//               draggedObjectData.Name,\r\n//               draggedObjectData[\"Dropped Revision\"]\r\n//             );\r\n//           }\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       setLoading(true); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         setLoading(false);\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         console.log(\r\n//           \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n//         );\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast]\r\n//   );\r\n//   // Initialize droppable area\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n//       );\r\n//       dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n//     } else {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n//       );\r\n//     }\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100); // Check every 100ms\r\n\r\n//     return () => clearInterval(interval); // Cleanup interval on unmount\r\n//   }, [handleDrop, dispatch]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n//           if (\r\n//             objectType !== \"VPMReference\" &&\r\n//             objectType !== \"Change Action\"\r\n//           ) {\r\n//             showErrorToast(\"Please select CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n////////////////////////////////////////////////original///////////////////////////\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult= await getDroppedObjectDetails({ dataItems });\r\n//         console.log(\"[Object Details Result]:\", objectDetailsResult);\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n//           console.log(\"Maturity state\", maturityState)\r\n\r\n//           if (objectType === \"Change Action\") {\r\n//             const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n//             if (maturityState === \"Completed\") {\r\n//               showErrorToast(\"CA is already completed.\");\r\n//               dispatch(setLoading(false));\r\n//               return;\r\n//             }\r\n//           }\r\n\r\n//           if ((objectType === \"Physical Product\") && (maturityState !== \"Released\")) {\r\n//             showErrorToast(\"Product is not released.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//            // draggedObjectData[\"Collaborative Space\"],\r\n//            // draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData[\"relativePath\"],\r\n//             // draggedObjectData.Name,\r\n//           //  draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n////////////////////////////////////////////////////////////original above//////////////////\r\n\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setLoading,setObselenceObjectData,\r\n  setIsDropped as setIsDroppedAction,\r\n} from \"../store/droppedObjectSlice\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport useObsolescenceWidget from \"./useObsolescenceWidget\";\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useObsolescenceDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const validTypes = [\"VPMReference\", \"Physical Product\", \"Change Action\"];\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        console.log(\r\n          \"[FetchObjectDetails] Requesting with dataItems:\",\r\n          dataItems\r\n        );\r\n\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        console.log(\"[FetchObjectDetails] API response:\", objectDetailsResult);\r\n\r\n        if (objectDetailsResult.success) {\r\n          const draggedObjectData = objectDetailsResult?.data?.cardData;\r\n          const objectType = draggedObjectData?.Type;\r\n          const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n\r\n          console.log(\"[Dragged Object Type]:\", objectType);\r\n          console.log(\"[Maturity State]:\", maturityState);\r\n\r\n          // if (!validTypes.includes(objectType)) {\r\n          //   showErrorToast(\"Please select a CA or Engg Item.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n\r\n          // if (objectType === \"Change Action\" && maturityState === \"Completed\") {\r\n          //   showErrorToast(\"CA is already completed.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n\r\n          // if (objectType === \"Physical Product\" && maturityState !== \"Released\") {\r\n          //   showErrorToast(\"Product is not released.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n          console.log(\"[Validation] Object Type:\", objectType);\r\n          console.log(\"[Validation] Maturity State:\", maturityState);\r\n          console.log(\r\n            \"[Validation] Is valid type?\",\r\n            validTypes.includes(objectType)\r\n          );\r\n\r\n          if (!validTypes.includes(objectType)) {\r\n            console.log(\"[Validation] Invalid object type error triggered\");\r\n            showErrorToast(\"Please select a CA or Engg Item.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          if (objectType === \"Change Action\" && maturityState === \"Completed\") {\r\n            console.log(\"[Validation] CA completed error triggered\");\r\n            showErrorToast(\"CA is already completed.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          if (\r\n            objectType === \"Physical Product\" &&\r\n            maturityState !== \"Released\"\r\n          ) {\r\n            console.log(\"[Validation] Product not released error triggered\");\r\n            showErrorToast(\"Product is not released.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n          dispatch(setIsDroppedAction(true));\r\n          console.log(\"[FetchObjectDetails] Setting dropped object data:\", draggedObjectData);\r\n          \r\n          await handleObsolescenceWidget(\r\n            draggedObjectData[\"Collaborative Space\"], // collabSpace\r\n            dataItems[0]?.objectId,                   // objectId\r\n            dataItems[0]?.objectType,                 // objectType\r\n            draggedObjectData[\"relativePath\"]         // relativePath\r\n          );          \r\n        } else {\r\n          console.error(\r\n            \"[FetchObjectDetails] API failure:\",\r\n            objectDetailsResult\r\n          );\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Exception:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleObsolescenceWidget, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      dispatch(setLoading(true));\r\n      console.log(\"[handleDrop] Called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n          dispatch(setLoading(false));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[handleDrop] Unexpected error:\", error);\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast, dispatch]\r\n  );\r\n\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\"[initializeDroppableArea] Resetting isDropped to false...\");\r\n      dispatch(setIsDroppedAction(false));\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useObsolescenceDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n  onClose, // New prop to close dropdown\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n    onClose(); // Close after applying update\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropdown-menu p-3 \"\r\n      style={{ width: \"300px\", display: \"block\" }}\r\n    >\r\n      <label>Select Column:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        onChange={(e) => setSelectedColumn(e.target.value)}\r\n        value={selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Column --</option>\r\n        {editableColumns.map((col) => (\r\n          <option key={col} value={col}>\r\n            {col}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Select Value:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        value={selectedValue}\r\n        onChange={(e) => setSelectedValue(e.target.value)}\r\n        disabled={!selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Value --</option>\r\n        {valueOptions.map((val) => (\r\n          <option key={val} value={val}>\r\n            {val}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button\r\n        className=\"btn btn-outline-success me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(false)}\r\n        disabled={!selectedRows.length}\r\n        style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n      >\r\n        Apply to Selected\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(true)}\r\n      >\r\n        Apply to All\r\n      </button>\r\n\r\n      {/* Close Button */}\r\n      <button className=\"btn btn-outline-danger me-2 mb-2\" onClick={onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","// import { useState } from \"react\";\r\n// import Popup from \"../../components/Popup/Popup\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\n// import MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\n// const ObsolescenceWidgetToolbarNativeCta = ({\r\n//   onSave,\r\n//   state,\r\n//   selectedRows,\r\n//   tableData,\r\n//   onMassUpdate,\r\n//   type,\r\n//   latestRevision,\r\n//   droppedRevision,\r\n// }) => {\r\n//   const { showWarningToast } = useToast();\r\n//   const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n//   const handleSaveClick = () => {\r\n//     if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n//       showWarningToast(MSG_BOS_SAVE);\r\n//     } else {\r\n//       onSave();\r\n//     }\r\n//     // When save button is clicked, call onSave passed as prop\r\n//     // onSave is passed with tableData from parent\r\n//   };\r\n//   const handleMassUpdate = (column, value, scope) => {\r\n//     if (scope === \"selected\") {\r\n//       onMassUpdate(selectedRows, column, value);\r\n//     } else {\r\n//       onMassUpdate(tableData, column, value);\r\n//     }\r\n//   };\r\n//   const editableColumns = [\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column cta-absolute\">\r\n//       <div className=\"d-flex\">\r\n//         <button\r\n//           className=\"btn btn-outline-success btn-lg m-2\"\r\n//           // onClick={handleSaveClick}\r\n//         >\r\n//           Obsolete\r\n//         </button>\r\n//         {/* <button\r\n//           className=\"btn btn-outline-primary btn-lg m-2\"\r\n//           onClick={() =>\r\n//             type !== \"Document\" && latestRevision !== droppedRevision\r\n//               ? showWarningToast(MSG_BOS_SAVE)\r\n//               : setShowDropdown((prev) => !prev)\r\n//           }\r\n//         >\r\n//           Mass Update\r\n//         </button> */}\r\n//       </div>\r\n\r\n//       {/* Dropdown appears below */}\r\n//       {showDropdown && (\r\n//         <div className=\"mt-2\">\r\n//           <MassUpdateDropdown\r\n//             editableColumns={editableColumns}\r\n//             selectedRows={selectedRows}\r\n//             onApplyUpdate={handleMassUpdate}\r\n//             valueOptions={[\"Yes\", \"No\"]}\r\n//             onClose={() => setShowDropdown(false)}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ObsolescenceWidgetToolbarNativeCta;\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useObsolescenceWidget from \"../../hooks/useObsolescenceWidget\";\r\n\r\nconst ObsolescenceWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n  ParentItemState,\r\n}) => {\r\n  const { showWarningToast, showErrorToast } = useToast();\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const{obsoleteStateChecking} = useObsolescenceWidget()\r\n  const parentObjectData = useSelector(\r\n    (state) => state.droppedObject?.obselenceObjectData?.parentObjectData || []\r\n  );\r\n  const handleSaveClick = () => {\r\n    if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n      showWarningToast(MSG_BOS_SAVE);\r\n    } else {\r\n      onSave();\r\n    }\r\n  };\r\n\r\n  // const handleObsoleteClick = () => {\r\n  //   // Show the new toast\r\n  //   showWarningToast(\"Product is not yet released\");\r\n\r\n  //   // Preserve original save logic\r\n  //   handleSaveClick();\r\n  // };\r\n\r\n  const handleObsoleteClick = async () => {\r\n    console.log(\"Parent Object Data:\", parentObjectData);\r\n    if(parentObjectData){\r\n      const hasUnreleasedItems = parentObjectData.some(item => item?.state !== \"RELEASED\");\r\n      const hasInvalidChangeIntent = parentObjectData.some(\r\n        item => item?.changeIntent[0]?.what !== \"ChangeMaturityObsolete\"\r\n      );\r\n\r\n      if (hasUnreleasedItems) {\r\n        showErrorToast(\"All items must be in 'RELEASED' state.\");\r\n      } else if (hasInvalidChangeIntent) {\r\n        showErrorToast(\"All items must have ChangeIntent: 'ChangeMaturityObsolete'.\");\r\n      }\r\n      await obsoleteStateChecking(parentObjectData)\r\n    }\r\n   \r\n  };\r\n    \r\n\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleObsoleteClick}\r\n        >\r\n          Obsolete\r\n        </button>\r\n        {/* <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={() =>\r\n            type !== \"Document\" && latestRevision !== droppedRevision\r\n              ? showWarningToast(MSG_BOS_SAVE)\r\n              : setShowDropdown((prev) => !prev)\r\n          }\r\n        >\r\n          Mass Update\r\n        </button> */}\r\n      </div>\r\n\r\n      {showDropdown && (\r\n        <div className=\"mt-2\">\r\n          <MassUpdateDropdown\r\n            editableColumns={editableColumns}\r\n            selectedRows={selectedRows}\r\n            onApplyUpdate={handleMassUpdate}\r\n            valueOptions={[\"Yes\", \"No\"]}\r\n            onClose={() => setShowDropdown(false)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidgetToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./ObsolescenceWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {   formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns } from \"./ObsolescencedataHelper\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\nimport ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst ObsolescenceWidget = () => {\r\n  const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  // Get redux data\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData?.specDocument || []\r\n  );\r\n  const parentObjectData = useSelector(\r\n    (state) => state.droppedObject?.obselenceObjectData?.parentObjectData || []\r\n  );\r\n\r\n  // Derive type and state from droppedObjectData if present\r\n  let state, type;\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    state = droppedObjectData.cardData[\"Maturity State\"];\r\n    type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n  console.log(\"droppedObjectData.initialDraggedData?.data\", droppedObjectData.initialDraggedData?.data)\r\n  console.log(\"Type of Parent:\", type);\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(() => getTableData(parentObjectData, type), [\r\n    parentObjectData,\r\n    type,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  }, [newTableData]);\r\n\r\n  const cardData = useMemo(() => getCardData(droppedObjectData), [\r\n    droppedObjectData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  console.log(\"In Widget columns\", columns)\r\n  // ...rest of your functions like handleSave, handleMassUpdate, updateTableData etc.\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea();\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    );\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]);\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n        <>\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"ObsolescenceWidget\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <div className=\"wrapper-cta\">\r\n              <ObsolescenceWidgetToolbarNativeCta\r\n                onSave={() => console.log(\"Save function here\")} // replace with handleSave\r\n                type={type}\r\n                latestRevision={droppedObjectData?.cardData[\"Latest Revision\"]}\r\n                droppedRevision={droppedObjectData?.cardData[\"Dropped Revision\"]}\r\n                selectedRows={selectedTableRows}\r\n                state={state}\r\n                tableData={selectableRows}\r\n                onMassUpdate={() => console.log(\"Mass update clicked\")} // replace with handleMassUpdate\r\n              />\r\n              <ReusableTable\r\n                key={tableKey}\r\n                data={tableData}\r\n                columns={columns}\r\n                meta={{ updateTableData: (data) => console.log(\"updateTableData called\", data) }} // replace with updateTableData\r\n                type={type}\r\n                latestRevision={droppedObjectData?.cardData[\"Latest Revision\"]}\r\n                droppedRevision={droppedObjectData?.cardData[\"Dropped Revision\"]}\r\n                widgetType=\"Obsolescence_Attribute_Widget\"\r\n                disableSelection={true}  \r\n              />\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidget;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants?.length >0 ? plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      )): 'N/A'}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\n// export const getTableData = (tableData, type, CAData) => {\r\n//   console.log(\"cadata datahelpers\",CAData );\r\n  \r\n//   if (!tableData) return [];\r\n\r\n//   return tableData.map((data) => {\r\n//     if (type === \"Change Action\") {\r\n//       return {\r\n//         ItemName: data?.ItemTitle || \"N/A\",\r\n//         Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n//         ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n//       };\r\n//     } else {\r\n//       console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n//       return {\r\n//         Plant: data?.title || \"N/A\",\r\n//         Seq: data?.Seq || \"1\",\r\n//         Status: data?.PlantStatus || \"Pending\",\r\n//         \"MFG Change\": data?.MFGChange || \"N/A\",\r\n//         \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n//         Change: data?.Change || CAData.CAName ||\"N/A\",\r\n//         \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n//         \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n//         \"ERP Status\": \"Active\" || \"N/A\",\r\n//         \"ERP Export\": \"Yes\" || \"N/A\",\r\n//         \"Lead Plant\": false,\r\n//         MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n//         \"Sort Value\": \"\",\r\n//       };\r\n//     }\r\n//   });\r\n// };\r\n\r\nexport const getTableData = (tableData, type) => {\r\n  if (!tableData) return [];\r\n\r\n  const revisionMap = {};\r\n  console.log(\"tableDta in table data helper\", tableData);\r\n  // Extracting Revision and State from instance response\r\n  // if (instanceResponse?.member?.length) {\r\n  //   instanceResponse.member.forEach((item) => {\r\n  //     const instance = item?.[\"dseng:EngInstance\"]?.member?.[0];\r\n  //     const parentId = instance?.parentObject?.identifier;\r\n  //     const name = instance?.name || \"\";\r\n\r\n  //     // Extract revision as the part after the last dot (e.g., \".1\")\r\n  //     const revision = name.split(\".\").pop();\r\n  //     revisionMap[parentId] = {\r\n  //       revision,\r\n  //       state: \"N/A\", // Add logic here if you have a way to extract 'state'\r\n  //     };\r\n  //   });\r\n  // }\r\n\r\n  return tableData.map((data) => {\r\n    const parentId = data?.ItemId || data?.id;\r\n    const revisionData = revisionMap[parentId] || { revision: \"N/A\", state: \"N/A\" };\r\n\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        \"Parent Item Name\": data.title || \"N/A\",\r\n        Plant: data?.ItemPlants || \"N/A\",\r\n        \"Parent Item Revision\": data.revision,\r\n        \"Parent Item State\": data.state,\r\n        \"Change\": data?.changeIntent[0]?.what || \"N/A\"\r\n      };\r\n    } else {\r\n      return {\r\n        \"Parent Item Name\": data.title,\r\n        Plant: data?.title || \"N/A\",\r\n        \"Parent Item Revision\": data.revision,\r\n        \"Parent Item State\": data.state,\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = ( type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"Parent Item Name\", header: \"Parent Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        // cell: ({ row }) => (\r\n        //   <PlantRenderer\r\n        //     plants={row.original.Plant} // ✅ Uses correct row data\r\n        //     itemId={row.original.ItemId} // ✅ Passes item ID\r\n        //     isRemoveMode={isRemoveMode}\r\n        //     handleRemovePlant={handleRemovePlant}\r\n        //   />\r\n        // ),\r\n      },\r\n      { accessorKey: \"Parent Item Revision\", header: \"Parent Item Revision\" },\r\n      { accessorKey: \"Parent Item State\", header: \"Parent Item State\" },\r\n      { accessorKey: \"Change\", header: \"Change\" },\r\n    ];\r\n  }\r\n\r\n  // return [\r\n  //   { accessorKey: \"Plant\", header: \"Plant\"},\r\n  //   { accessorKey: \"Seq\", header: \"Seq\" },\r\n  //   { accessorKey: \"Status\", header: \"Status\" },\r\n  //   { accessorKey: \"Change\", header: \"Change\" },\r\n  //   { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n  //   { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n  //   { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n  //   { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n  //   {\r\n  //     accessorKey: \"MBom\",\r\n  //     header: \"MBom\",\r\n      \r\n  //   },\r\n  //   { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n  //   { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n  //   { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n  //   { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  // ];\r\n\r\n  return [\r\n    \r\n    { accessorKey: \"Parent Item Name\", header: \"Parent Item Name\"},\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Parent Item Revision\", header: \"Parent Item Revision\" },\r\n    { accessorKey: \"Parent Item State\", header: \"Parent Item State\" },\r\n  ];\r\n  \r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport async function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nexport async function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/7D56FB4BAE741300682C5271000001CF?mask=dsmveng%3AEngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nexport async function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nexport async function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useObsolescenceDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport ObsolescenceWidget from \"./ObsolescenceWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <ObsolescenceWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","forwardRef","_ref","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","cell","_ref2","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","onClick","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","useObsolescenceWidget","showErrorToast","dispatch","useDispatch","ENOVIA_BASE_URL","process","email","window","widget","getValue","log","handleObsolescenceWidget","async","collabSpace","relativePath","setObselenceObjectData","parentObjectData","tableOfArrayData","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","ChildObject","locateApi","status","output","_ChildObject$output","_ChildObject$output$m","member","url","items","_items$parentObject","_items$parentObject2","push","parentObject","source","revisionStateData","promises","revisionState","callEnoviaWebService","apiPath","_revisionState$output","Promise","all","isMFGCA","ItemDetails","fetchChangeActionData","CAURL","concat","response","i","_response$output","_response$output$prop","proposedChanges","change","where","responseofTable","_responseofTable$outp","_objectSpread","changeIntent","whats","error","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","getUserGroupCollab","allCollabSpaces","plants","fetchAssignedPlants","success","plantData","setHeaders","getProductChildren","fetchProductChildren","setProductChildren","getCaDetails","fetchCADetails","setCAName","setProposedChanges","setCAData","CAData","obsoleteStateChecking","tableData","locateApiResponse","baseURL","body","referencedObjects","identifier","useObsolescenceDropableArea","isDropped","useSelector","droppedObject","loading","validTypes","fetchObjectDetails","useCallback","dataItems","objectDetailsResult","getDroppedObjectDetails","_objectDetailsResult$","_dataItems$","_dataItems$2","draggedObjectData","cardData","Type","maturityState","includes","setLoading","setDroppedObjectData","setIsDroppedAction","MSG_FETCH_OBJECT_DETAILS_FAILED","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","editableColumns","selectedRows","onApplyUpdate","valueOptions","onClose","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","display","e","target","value","col","disabled","val","cursor","onSave","onMassUpdate","latestRevision","droppedRevision","ParentItemState","showDropdown","setShowDropdown","_state$droppedObject","_state$droppedObject$","obselenceObjectData","hasUnreleasedItems","some","hasInvalidChangeIntent","_item$changeIntent$","what","MassUpdateDropdown","handleMassUpdate","scope","ObsolescenceWidget","_droppedObjectData$in3","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","selectableRows","setSelectableRows","showSuccessToast","selectedTableRows","droppedObjectData","loadingParentDetails","BOSObjectData","specDocument","_state$droppedObject$2","_droppedObjectData$in","_droppedObjectData$in2","initialDraggedData","changedCells","newTableData","getTableData","_data$changeIntent$","ItemId","Plant","ItemPlants","revision","prevKey","Title","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","header","Loader","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","initialAssignedPlants","uniquePlants","productChildren","CardWithDragAndDrop","widgetType","ObsolescenceWidgetToolbarNativeCta","ReusableTable","meta","updateTableData","disableSelection","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener","extractIdsFromTitles","newClasses","itemTitle","replace","matchedPlant","find","plant","toLowerCase","filter","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","classes","declassifyResponse","fetchData","JSON","stringify","handleAddData","productChilds","hasMBOM","NotPropagableChilds","prodChild","action","ErrorObject","classId","missingIn","child","name","join","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","message","filteredNewClasses","classifyUrl","classifyResponse","childs","childclassifyResponse","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","AllClasses","finalArray","WAFData","loadWAFData","fetchOOTBData","method","resolve","reject","authenticatedRequest","onComplete","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","childName","Array","isArray","every","childTitles","errorItem","updateBody","MBOMName","propagateClasses","Object","keys","_response$member$","nextApiUrl","cestamp","patchUrl"],"sourceRoot":""}