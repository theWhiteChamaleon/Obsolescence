{"version":3,"file":"static/js/91.11127fc2.chunk.js","mappings":"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","sources":["components/DragAndDrop/DragAndDrop.jsx","components/Popup/Popup.jsx","pages/ObsolescenceWidget/ObsolescencedataHelper.js","hooks/useObsolescenceWidget.js","hooks/useObsolescenceDropableArea.js","pages/ObsolescenceWidget/MassUpdateDropdown.jsx","pages/ObsolescenceWidget/ObsolescenceWidgetToolbarNativeCta.jsx","pages/ObsolescenceWidget/ObsolescenceWidget.jsx","pages/ObsolescenceWidget/WidgetLifecycle.jsx","pages/ObsolescenceWidget/ObsolescenceIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\n// export const getTableData = (tableData, type, CAData) => {\r\n//   console.log(\"cadata datahelpers\",CAData );\r\n  \r\n//   if (!tableData) return [];\r\n\r\n//   return tableData.map((data) => {\r\n//     if (type === \"Change Action\") {\r\n//       return {\r\n//         ItemName: data?.ItemTitle || \"N/A\",\r\n//         Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n//         ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n//       };\r\n//     } else {\r\n//       console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n//       return {\r\n//         Plant: data?.title || \"N/A\",\r\n//         Seq: data?.Seq || \"1\",\r\n//         Status: data?.PlantStatus || \"Pending\",\r\n//         \"MFG Change\": data?.MFGChange || \"N/A\",\r\n//         \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n//         Change: data?.Change || CAData.CAName ||\"N/A\",\r\n//         \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n//         \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n//         \"ERP Status\": \"Active\" || \"N/A\",\r\n//         \"ERP Export\": \"Yes\" || \"N/A\",\r\n//         \"Lead Plant\": false,\r\n//         MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n//         \"Sort Value\": \"\",\r\n//       };\r\n//     }\r\n//   });\r\n// };\r\n\r\nexport const getTableData = (tableData, type, CAData, instanceResponse,parentObjectData) => {\r\n  if (!tableData) return [];\r\n\r\n  const revisionMap = {};\r\n  \r\n  // Extracting Revision and State from instance response\r\n  if (instanceResponse?.member?.length) {\r\n    instanceResponse.member.forEach((item) => {\r\n      const instance = item?.[\"dseng:EngInstance\"]?.member?.[0];\r\n      const parentId = instance?.parentObject?.identifier;\r\n      const name = instance?.name || \"\";\r\n\r\n      // Extract revision as the part after the last dot (e.g., \".1\")\r\n      const revision = name.split(\".\").pop();\r\n      revisionMap[parentId] = {\r\n        revision,\r\n        state: \"N/A\", // Add logic here if you have a way to extract 'state'\r\n      };\r\n    });\r\n  }\r\n\r\n  return tableData.map((parentObjectData) => {\r\n    const parentId = data?.ItemId || data?.id;\r\n    const revisionData = revisionMap[parentId] || { revision: \"N/A\", state: \"N/A\" };\r\n\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: parentObjectData.title || \"N/A\",\r\n        Plant: data?.ItemPlants || \"N/A\",\r\n        Revision: parentObjectData.revision,\r\n        State: parentObjectData.state,\r\n      };\r\n    } else {\r\n      return {\r\n        \"Item Name\": parentObjectData.title,\r\n        Plant: data?.title || \"N/A\",\r\n        \"Item Revision\": parentObjectData.revision,\r\n        \"Item State\": parentObjectData.state,\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  // return [\r\n  //   { accessorKey: \"Plant\", header: \"Plant\"},\r\n  //   { accessorKey: \"Seq\", header: \"Seq\" },\r\n  //   { accessorKey: \"Status\", header: \"Status\" },\r\n  //   { accessorKey: \"Change\", header: \"Change\" },\r\n  //   { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n  //   { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n  //   { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n  //   { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n  //   {\r\n  //     accessorKey: \"MBom\",\r\n  //     header: \"MBom\",\r\n      \r\n  //   },\r\n  //   { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n  //   { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n  //   { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n  //   { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  // ];\r\n\r\n  return [\r\n    \r\n    { accessorKey: \"Item Name\", header: \"Item Name\"},\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Item Revision\", header: \"Item Revision\" },\r\n    { accessorKey: \"Item State\", header: \"Item State\" },\r\n  ];\r\n  \r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport async function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nexport async function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/7D56FB4BAE741300682C5271000001CF?mask=dsmveng%3AEngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nexport async function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nexport async function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}","import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  setObselenceObjectData,\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\n\r\nconst useObsolescenceWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useObsolescenceWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n \r\n\r\n  // const {droppedObjectData}= useSelector ((state)=> state.droppedObjectData)\r\n  // console.log(\"SSSSSSSSSSSSSSSs\", droppedObjectData)\r\n\r\n  const handleObsolescenceWidget = \r\n    async ( objectId, type, relativePath) => {\r\n      try {\r\n        console.log(\"Object id is:\", objectId);\r\n        console.log(\"Object type is:\", type);\r\n        console.log(\"Relative path is:\", relativePath);\r\n\r\n        dispatch(setParentDetailsLoading(true));\r\n\r\n        const headers = await fetchCsrfToken();\r\n        console.log(\"headerssss\", headers);\r\n       \r\n        if (!headers) {\r\n          showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n          return;\r\n        }\r\n\r\n        console.log(\"[useObsolescenceWidget] CSRF Headers:\", headers);\r\n        let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n        let body = {\r\n          referencedObjects: [\r\n            {\r\n              source: ENOVIA_BASE_URL,\r\n              type: type,\r\n              identifier: objectId,\r\n              relativePath: relativePath,\r\n            },\r\n          ],\r\n        };\r\n\r\n        let ChildObject = await callEnoviaWebService(\r\n          \"POST\",\r\n          baseURL,\r\n          body,\r\n          headers\r\n        );\r\n\r\n        console.log(\"SpecDetails Response:\", ChildObject);\r\n        if(ChildObject.status && ChildObject.output){\r\n          let member = ChildObject?.output?.member[0]['dseng:EngInstance']?.member\r\n          if(member?.length >0){\r\n            let url =[]\r\n            member && member.map((items)=>{\r\n              url.push(items.parentObject?.source+ items.parentObject?.relativePath)\r\n            })\r\n            console.log(\"URL\", url);\r\n            let revisionStateData = []\r\n            if(url){\r\n              // url.map(async (apiPath)=>{\r\n              //   let revisionState = await callEnoviaWebService(\r\n              //     \"GET\",\r\n              //     apiPath,\r\n              //     \"\",\r\n              //     headers\r\n              //   );\r\n              //   if(revisionState){\r\n              //     revisionStateData = [...revisionStateData ,revisionState?.output?.member]\r\n              //   }\r\n        \r\n              // })\r\n              const promises = url.map(async (apiPath) => {\r\n                const revisionState = await callEnoviaWebService(\"GET\", apiPath, \"\", headers);\r\n                if (revisionState) {\r\n                  revisionStateData = [...revisionStateData ,...revisionState?.output?.member]\r\n                }\r\n              });\r\n              await Promise.all(promises);\r\n            }\r\n            console.log(\"revisionStateData\", revisionStateData)\r\n            dispatch(setObselenceObjectData({parentObjectData: revisionStateData}))\r\n          }\r\n          else{\r\n            console.log(\"Not working\")\r\n          }\r\n          // Handle \"Change Action\" type separately\r\n          if (type === \"Change Action\") {\r\n            let isMFGCA = false;\r\n            console.log(\"The object Type is Change Action\");\r\n            const fetchChangeActionData = async () => {\r\n              const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n              const response = await callEnoviaWebService(\r\n                \"GET\",\r\n                CAURL,\r\n                \"\",\r\n                headers\r\n              );\r\n              console.log(\"Response from Change Action URL:\", response);\r\n    \r\n              if (response.status && response.output) {\r\n                const realizedChanges = response.output.realizedChanges.map(\r\n                  (realizedChange) => realizedChange.where.identifier\r\n                );\r\n                const changeProcessingPromises =\r\n                  response.output.proposedChanges.map(async (change) => {\r\n                    let ItemId = change.where.identifier;\r\n                    let ItemType = change.where.type;\r\n    \r\n                    if (change.target === \"NewVersion\") {\r\n                      const sLatestID = await getLatestRevision(\r\n                        ItemId,\r\n                        ItemType,\r\n                        headers\r\n                      );\r\n                      if (realizedChanges.includes(sLatestID)) {\r\n                        ItemId = sLatestID;\r\n                      }\r\n                    }\r\n                    if (\r\n                      ItemType !== \"Raw_Material\" &&\r\n                      ItemType !== \"VPMReference\"\r\n                    ) {\r\n                      isMFGCA = true;\r\n                      const mfgDetails = await getScopedItms(ItemId, headers);\r\n                      console.log(\"MFG Details are:\", mfgDetails);\r\n                      ItemId = mfgDetails.identifier;\r\n                      ItemType = mfgDetails.type;\r\n                    }\r\n                    if (ItemId !== undefined && ItemType !== undefined) {\r\n                      try {\r\n                        const [ItemPlants, Iteminfo] = await Promise.all([\r\n                          getAssignedClasses(ItemId, headers),\r\n                          getItemDetails(ItemId, ItemType, headers),\r\n                        ]);\r\n    \r\n                        ItemDetails.push({\r\n                          ItemId,\r\n                          ItemType,\r\n                          ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                          ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                          ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                          ItemPlants,\r\n                        });\r\n                      } catch (err) {\r\n                        console.error(\r\n                          `Error processing change for item ${ItemId}:`,\r\n                          err\r\n                        );\r\n                      }\r\n                    }\r\n                  });\r\n    \r\n                await Promise.all(changeProcessingPromises);\r\n              } else {\r\n                console.error(\"Invalid response structure or no proposed changes.\");\r\n              }\r\n            };\r\n            const CAAllPlantsData = async () => {\r\n              // Replace this with your actual API call\r\n              const allPlants = await getAllPlants(\r\n                [collabSpace],\r\n                headers,\r\n                objectId\r\n              ); // getAllPlants wants collabspace as an array.\r\n              console.log(\"Parallel API response:\", allPlants);\r\n              dispatch(setCAAllPlants(allPlants));\r\n            };\r\n    \r\n            // Run both functions in parallel\r\n            await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n    \r\n            dispatch(setParentDetailsLoading(false));\r\n            dispatch(setCAItemDetails(ItemDetails));\r\n            dispatch(setIsMFGCA(isMFGCA));\r\n            dispatch(setCAHeaders(headers));\r\n          } else {\r\n    \r\n    \r\n            // Step 1: Fetch user group collaboration spaces\r\n            const userGroupCollab = await getUserGroupCollab(\r\n              headers,\r\n              objectId,\r\n              email\r\n            );\r\n            console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n    \r\n            let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n            console.log(\r\n              \"[Use Plant Assignment] All CollabSpaces:\",\r\n              allCollabSpaces\r\n            );\r\n    \r\n            // Step 2: Fetch all plants if collab spaces exist\r\n            let allPlants = [];\r\n            if (allCollabSpaces.length > 0) {\r\n              allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n              console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n            } else {\r\n              console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n            }\r\n    \r\n          }\r\n        }\r\n\r\n        //  Check for the product Type here for calling api's...\r\n        \r\n\r\n        // this is for the product type other then Change Action...\r\n        \r\n      } catch (error) {\r\n        console.error(\"[useObsolescenceWidget] Error:\", error);\r\n        throw error; // Let the caller handle the error\r\n      } finally {\r\n        dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n      }\r\n    }\r\n\r\n  return { handleObsolescenceWidget };\r\n};\r\n\r\n\r\nexport default useObsolescenceWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","// import { useCallback, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\n// import { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// // Custom hook\r\n// import usePlantAssignment from \"./usePlantAssignment\";\r\n// // Reusable services\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({\r\n//           dataItems,\r\n//         });\r\n\r\n//         // const cardownerResult = await fetchCardOwnerDetailsService({\r\n//         //   dataItems,\r\n//         //   headers,\r\n//         // });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           // Merge the data from both services\r\n//           // const combineData = {\r\n//           //   cardData: objectDetailsResult.data.cardData,\r\n//           //   ownerData: cardownerResult.data.ownerData,\r\n//           // };\r\n\r\n//           dispatch(\r\n//             setDroppedObjectData({\r\n//               cardData: objectDetailsResult.data.cardData,\r\n//             })\r\n//           );\r\n\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // call usePlantAssignment after successfully fetching object details\r\n//           if (objectDetailsResult) {\r\n//             await handleObsolescenceWidget(\r\n//               draggedObjectData[\"Collaborative Space\"],\r\n//               draggedObjectData[\"Maturity State\"],\r\n//               dataItems[0]?.objectId,\r\n//               dataItems[0]?.objectType,\r\n//               draggedObjectData.Name,\r\n//               draggedObjectData[\"Dropped Revision\"]\r\n//             );\r\n//           }\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       setLoading(true); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         setLoading(false);\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         console.log(\r\n//           \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n//         );\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast]\r\n//   );\r\n//   // Initialize droppable area\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n//       );\r\n//       dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n//     } else {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n//       );\r\n//     }\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100); // Check every 100ms\r\n \r\n//     return () => clearInterval(interval); // Cleanup interval on unmount\r\n//   }, [handleDrop, dispatch]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n//           if (\r\n//             objectType !== \"VPMReference\" &&\r\n//             objectType !== \"Change Action\"\r\n//           ) {\r\n//             showErrorToast(\"Please select CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setLoading,\r\n  setIsDropped as setIsDroppedAction,\r\n} from \"../store/droppedObjectSlice\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport useObsolescenceWidget from \"./useObsolescenceWidget\";\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useObsolescenceDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  // Define valid types for CA or Engg Item\r\n  const validTypes = [\r\n    \"VPMReference\",      // Valid Type 1\r\n    \"Engg Item\",         // Valid Type 2\r\n    \"Physical Product\",  // Valid Type 3\r\n    \"Change Action\",     // Valid Type 4 (CA)\r\n  ];\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n        if (objectDetailsResult.success) {\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          // ✅ Validate object type before proceeding\r\n          const objectType = draggedObjectData?.Type;\r\n\r\n          // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(\"Please select a CA or Engg Item.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n          console.log(\"Maturity state\", maturityState)\r\n          if ((objectType === \"Physical Product\") && (maturityState !== \"Released\")) {\r\n            showErrorToast(\"Product is not released.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n          \r\n\r\n          // Proceed with setting the dropped object data\r\n          dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // Call handleObsolescenceWidget after successful validation\r\n          await handleObsolescenceWidget(\r\n           // draggedObjectData[\"Collaborative Space\"],\r\n           // draggedObjectData[\"Maturity State\"],\r\n            dataItems[0]?.objectId,\r\n            dataItems[0]?.objectType,\r\n            draggedObjectData[\"relativePath\"],\r\n            // draggedObjectData.Name,\r\n          //  draggedObjectData[\"Dropped Revision\"]\r\n          );\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleObsolescenceWidget, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      dispatch(setLoading(true)); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        dispatch(setLoading(false));\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast, dispatch]\r\n  );\r\n\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n      dispatch(setIsDroppedAction(false));\r\n    } else {\r\n      console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100);\r\n\r\n    return () => clearInterval(interval); // Cleanup\r\n  }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useObsolescenceDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n  onClose, // New prop to close dropdown\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n    onClose(); // Close after applying update\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropdown-menu p-3 \"\r\n      style={{ width: \"300px\", display: \"block\" }}\r\n    >\r\n      <label>Select Column:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        onChange={(e) => setSelectedColumn(e.target.value)}\r\n        value={selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Column --</option>\r\n        {editableColumns.map((col) => (\r\n          <option key={col} value={col}>\r\n            {col}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Select Value:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        value={selectedValue}\r\n        onChange={(e) => setSelectedValue(e.target.value)}\r\n        disabled={!selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Value --</option>\r\n        {valueOptions.map((val) => (\r\n          <option key={val} value={val}>\r\n            {val}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button\r\n        className=\"btn btn-outline-success me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(false)}\r\n        disabled={!selectedRows.length}\r\n        style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n      >\r\n        Apply to Selected\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(true)}\r\n      >\r\n        Apply to All\r\n      </button>\r\n\r\n      {/* Close Button */}\r\n      <button className=\"btn btn-outline-danger me-2 mb-2\" onClick={onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","// import { useState } from \"react\";\r\n// import Popup from \"../../components/Popup/Popup\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\n// import MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\n// const ObsolescenceWidgetToolbarNativeCta = ({\r\n//   onSave,\r\n//   state,\r\n//   selectedRows,\r\n//   tableData,\r\n//   onMassUpdate,\r\n//   type,\r\n//   latestRevision,\r\n//   droppedRevision,\r\n// }) => {\r\n//   const { showWarningToast } = useToast();\r\n//   const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n//   const handleSaveClick = () => {\r\n//     if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n//       showWarningToast(MSG_BOS_SAVE);\r\n//     } else {\r\n//       onSave();\r\n//     }\r\n//     // When save button is clicked, call onSave passed as prop\r\n//     // onSave is passed with tableData from parent\r\n//   };\r\n//   const handleMassUpdate = (column, value, scope) => {\r\n//     if (scope === \"selected\") {\r\n//       onMassUpdate(selectedRows, column, value);\r\n//     } else {\r\n//       onMassUpdate(tableData, column, value);\r\n//     }\r\n//   };\r\n//   const editableColumns = [\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column cta-absolute\">\r\n//       <div className=\"d-flex\">\r\n//         <button\r\n//           className=\"btn btn-outline-success btn-lg m-2\"\r\n//           // onClick={handleSaveClick}\r\n//         >\r\n//           Obsolete\r\n//         </button>\r\n//         {/* <button\r\n//           className=\"btn btn-outline-primary btn-lg m-2\"\r\n//           onClick={() =>\r\n//             type !== \"Document\" && latestRevision !== droppedRevision\r\n//               ? showWarningToast(MSG_BOS_SAVE)\r\n//               : setShowDropdown((prev) => !prev)\r\n//           }\r\n//         >\r\n//           Mass Update\r\n//         </button> */}\r\n//       </div>\r\n\r\n//       {/* Dropdown appears below */}\r\n//       {showDropdown && (\r\n//         <div className=\"mt-2\">\r\n//           <MassUpdateDropdown\r\n//             editableColumns={editableColumns}\r\n//             selectedRows={selectedRows}\r\n//             onApplyUpdate={handleMassUpdate}\r\n//             valueOptions={[\"Yes\", \"No\"]}\r\n//             onClose={() => setShowDropdown(false)}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ObsolescenceWidgetToolbarNativeCta;\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\nconst ObsolescenceWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  const handleSaveClick = () => {\r\n    if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n      showWarningToast(MSG_BOS_SAVE);\r\n    } else {\r\n      onSave();\r\n    }\r\n  };\r\n\r\n  // const handleObsoleteClick = () => {\r\n  //   // Show the new toast\r\n  //   showWarningToast(\"Product is not yet released\");\r\n\r\n  //   // Preserve original save logic\r\n  //   handleSaveClick();\r\n  // };\r\n\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          // onClick={handleObsoleteClick}\r\n        >\r\n          Obsolete\r\n        </button>\r\n        {/* <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={() =>\r\n            type !== \"Document\" && latestRevision !== droppedRevision\r\n              ? showWarningToast(MSG_BOS_SAVE)\r\n              : setShowDropdown((prev) => !prev)\r\n          }\r\n        >\r\n          Mass Update\r\n        </button> */}\r\n      </div>\r\n\r\n      {showDropdown && (\r\n        <div className=\"mt-2\">\r\n          <MassUpdateDropdown\r\n            editableColumns={editableColumns}\r\n            selectedRows={selectedRows}\r\n            onApplyUpdate={handleMassUpdate}\r\n            valueOptions={[\"Yes\", \"No\"]}\r\n            onClose={() => setShowDropdown(false)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidgetToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./ObsolescenceWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./ObsolescencedataHelper\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\nimport ObsolescenceWidgetToolbarNativeCta from \"./ObsolescenceWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst ObsolescenceWidget = () => {\r\n  const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"Table Data is:\", tableData);\r\n    setScreenLoader(true);\r\n    console.log(\"Type of Parent:\", type);\r\n    let parentData = [];\r\n    let ChildNameKey;\r\n    let ChildRevKey;\r\n    let ChildStateKey;\r\n    let ChildIdKey;\r\n    if (type === \"Document\") {\r\n      parentData = {\r\n        SpecName: droppedObjectData.cardData.Name,\r\n        SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        SpecState: droppedObjectData.cardData[\"Maturity State\"],\r\n        SpecID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK CARD DATA\r\n        // SpecState need to be added.\r\n      };\r\n      ChildNameKey = \"ItemName\";\r\n      ChildRevKey = \"ItemRevision\";\r\n      ChildStateKey = \"ItemState\";\r\n      ChildIdKey = \"ItemID\";\r\n    } else {\r\n      console.log(\"It's a physical Product\");\r\n      parentData = {\r\n        ItemName: droppedObjectData.cardData.Name,\r\n        ItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n        ItemState: droppedObjectData.cardData[\"Maturity State\"],\r\n        ItemID: droppedObjectData.cardData[\"ID\"], // NEED TO CHECK THIS\r\n        // need to add Maturity State as Item State and ItemId is Dropped Revision Id.\r\n      };\r\n      ChildNameKey = \"SpecName\";\r\n      ChildRevKey = \"SpecRevision\";\r\n      ChildStateKey = \"SpecState\";\r\n      ChildIdKey = \"SpecID\";\r\n    }\r\n\r\n    const formattedData = tableData.map((item) => {\r\n      // Find matching data in bosSpecDocument\r\n      let matchingData = bosSpecDocument.find(\r\n        (data) =>\r\n          data.childTitle === item.Title && data.childRevision === item.Revision\r\n      );\r\n\r\n      return {\r\n        [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n        [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n        [ChildStateKey]: matchingData ? matchingData.childState : null, // need to check this\r\n        [ChildIdKey]: matchingData ? matchingData.ID : null, //\r\n        // something needs to be done here\r\n        // [ChildStateKey]:\r\n        ...parentData, // Merge Parent Data\r\n        PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n        PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n        WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n        PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n        \"SAP/JDE\": item[\"SAP/JDE\"],\r\n      };\r\n    });\r\n\r\n    formattedData.sort((a, b) => {\r\n      if (a.SpecName !== b.SpecName) {\r\n        return a.SpecName.localeCompare(b.SpecName);\r\n      }\r\n      return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n    });\r\n\r\n    console.log(\"Formatted Data:\", formattedData);\r\n    const saveURL =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n    const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n    console.log(\"the response from node API is:\", response);\r\n    if (response.status === 200) {\r\n      showSuccessToast(MSG_SAVE_SUCCESS);\r\n      setSpecData(tableData);\r\n      setScreenLoader(false);\r\n    } else {\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n      setScreenLoader(false);\r\n    }\r\n  };\r\n\r\n  const handleMassUpdate = async (data, column, value) => {\r\n    console.log(\"Data when the Mass Update is Clicked:\", data);\r\n    console.log(\"Columns to Change:\", column);\r\n    console.log(\"Value after change:\", value);\r\n\r\n    const updatedData = data.map((row) => ({\r\n      ...row,\r\n      [column]: value, // Update the specified column with the new value\r\n    }));\r\n\r\n    console.log(\"Updated Data is:\", updatedData);\r\n    console.log(\"Table Data is:\", tableData);\r\n\r\n    // Merge updatedData into tableData based on matching Title & Revision\r\n    const mergedData = tableData.map((row) => {\r\n      const updatedRow = updatedData.find(\r\n        (updated) =>\r\n          updated.Title === row.Title && updated.Revision === row.Revision\r\n      );\r\n\r\n      return updatedRow ? updatedRow : row; // Use updated row if found, else keep original row\r\n    });\r\n\r\n    console.log(\"Merged Data:\", mergedData);\r\n    updateTableData(mergedData);\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n  console.log(\"Bos data in BOS Widget is:\", bosData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData.specDocument\r\n  );\r\n  console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n  const parentObjectData = useSelector(\r\n    (state)=> state.droppedObject?.obselenceObjectData?.parentObjectData\r\n  );\r\n  console.log(\"Parent Object Data:\", parentObjectData)\r\n\r\n  const updateTableData = (updatedData) => {\r\n    const newDataWithChanges = updatedData.map((newItem) => {\r\n      const originalItem = specData.find(\r\n        (oldItem) =>\r\n          oldItem.Title === newItem.Title &&\r\n          oldItem.Revision === newItem.Revision\r\n      );\r\n\r\n      if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n      // Track changed cells\r\n      const changedCells = {};\r\n      Object.keys(newItem).forEach((key) => {\r\n        if (newItem[key] !== originalItem[key]) {\r\n          changedCells[key] = true; // Mark this cell as changed\r\n        }\r\n      });\r\n\r\n      return { ...newItem, changedCells };\r\n    });\r\n\r\n    setTableData(newDataWithChanges);\r\n  };\r\n\r\n  console.log(\"Table Data is:\", tableData);\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(\r\n    () => getTableData(bosSpecDocument, type),\r\n    [bosSpecDocument, type]\r\n  );\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n\r\n        <>\r\n         {/* Show initial loader when loading is true */}\r\n         {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && (\r\n                <CardWithDragAndDrop data={cardData} widgetType=\"ObsolescenceWidget\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <ObsolescenceWidgetToolbarNativeCta\r\n                  onSave={handleSave}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  selectedRows={selectedTableRows}\r\n                  state={state}\r\n                  tableData={selectableRows}\r\n                  onMassUpdate={handleMassUpdate}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  widgetType=\"Obsolescence_Attribute_Widget\"\r\n                  onSelectableRowsChange={setSelectableRows}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ObsolescenceWidget;\r\n\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useObsolescenceDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport ObsolescenceWidget from \"./ObsolescenceWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <ObsolescenceWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","forwardRef","_ref","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","cell","_ref2","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","onClick","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","log","plant","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","size","cursor","marginLeft","PlantID","useObsolescenceWidget","showErrorToast","dispatch","useDispatch","ENOVIA_BASE_URL","process","email","window","widget","getValue","handleObsolescenceWidget","async","relativePath","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","concat","body","referencedObjects","source","identifier","ChildObject","callEnoviaWebService","status","output","_ChildObject$output","_ChildObject$output$m","member","url","items","_items$parentObject","_items$parentObject2","push","parentObject","revisionStateData","promises","revisionState","apiPath","_revisionState$output","Promise","all","setObselenceObjectData","parentObjectData","isMFGCA","fetchChangeActionData","CAURL","response","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","target","sLatestID","getLatestRevision","includes","mfgDetails","getScopedItms","undefined","_Iteminfo$member$","_Iteminfo$member$$dse","ItemPlants","Iteminfo","getAssignedClasses","getItemDetails","ItemDetails","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","error","CAAllPlantsData","allPlants","getAllPlants","collabSpace","setCAAllPlants","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","getUserGroupCollab","allCollabSpaces","useObsolescenceDropableArea","isDropped","useSelector","droppedObject","loading","validTypes","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","success","_dataItems$","_dataItems$2","draggedObjectData","cardData","Type","setLoading","maturityState","setDroppedObjectData","setIsDroppedAction","MSG_FETCH_OBJECT_DETAILS_FAILED","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","editableColumns","selectedRows","onApplyUpdate","valueOptions","onClose","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","e","value","col","disabled","val","onSave","tableData","onMassUpdate","latestRevision","droppedRevision","showDropdown","setShowDropdown","MassUpdateDropdown","handleMassUpdate","scope","ObsolescenceWidget","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","selectableRows","setSelectableRows","showSuccessToast","_objectSpread","changedCells","selectedTableRows","droppedObjectData","loadingParentDetails","plantObjectData","bosData","BOSObjectData","bosSpecDocument","specDocument","_state$droppedObject","_state$droppedObject$","obselenceObjectData","updateTableData","updatedData","newDataWithChanges","newItem","originalItem","find","oldItem","Title","Revision","Object","keys","key","prevKey","initialDraggedData","_droppedObjectData$in","_droppedObjectData$in2","newTableData","getTableData","CAData","instanceResponse","_instanceResponse$mem","revisionMap","_item$dsengEngInstan","_item$dsengEngInstan$","_instance$parentObjec","instance","parentId","revision","name","split","pop","_data","_data2","_data3","_data4","ItemName","Plant","State","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","header","Loader","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","initialAssignedPlants","uniquePlants","productChildren","CardWithDragAndDrop","widgetType","ObsolescenceWidgetToolbarNativeCta","ChildNameKey","ChildRevKey","ChildStateKey","ChildIdKey","parentData","SpecName","Name","SpecRevision","SpecState","SpecID","ItemRevision","ItemID","formattedData","matchingData","childTitle","childRevision","childName","childState","ID","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","sort","a","b","localeCompare","Number","fetchData","MSG_SAVE_SUCCESS","MSG_SAVE_FAILURE","mergedData","updatedRow","updated","ReusableTable","meta","onSelectableRowsChange","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener","extractIdsFromTitles","newClasses","itemTitle","replace","matchedPlant","toLowerCase","filter","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","classes","declassifyResponse","JSON","stringify","handleAddData","productChilds","hasMBOM","NotPropagableChilds","prodChild","action","ErrorObject","classId","missingIn","child","join","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","message","filteredNewClasses","classifyUrl","classifyResponse","childs","childclassifyResponse","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","AllClasses","finalArray","WAFData","loadWAFData","fetchOOTBData","method","resolve","reject","authenticatedRequest","onComplete","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","Array","isArray","every","childTitles","errorItem","updateBody","MBOMName","propagateClasses","_response$member$","nextApiUrl","cestamp","patchUrl"],"sourceRoot":""}